{"version":3,"sources":["webpack://storm-react-diagrams/webpack/universalModuleDefinition","webpack://storm-react-diagrams/webpack/bootstrap","webpack://storm-react-diagrams/external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"_\",\"root\":\"_\"}","webpack://storm-react-diagrams/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/DiagonalMovement.js","webpack://storm-react-diagrams/./src/widgets/BaseWidget.tsx","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Util.js","webpack://storm-react-diagrams/./src/models/PointModel.ts","webpack://storm-react-diagrams/./src/models/BaseModel.ts","webpack://storm-react-diagrams/./src/Toolkit.ts","webpack://storm-react-diagrams/./src/factories/AbstractFactory.ts","webpack://storm-react-diagrams/./src/models/NodeModel.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Heuristic.js","webpack://storm-react-diagrams/./src/actions/BaseAction.ts","webpack://storm-react-diagrams/./src/models/PortModel.ts","webpack://storm-react-diagrams/./src/BaseEntity.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinderBase.js","webpack://storm-react-diagrams/./node_modules/heap/index.js","webpack://storm-react-diagrams/./src/routing/PathFinding.ts","webpack://storm-react-diagrams/./src/models/LabelModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultLabelModel.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultPortModel.ts","webpack://storm-react-diagrams/./src/models/LinkModel.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiAStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/AStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Node.js","webpack://storm-react-diagrams/./src/widgets/NodeWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/LinkWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidget.tsx","webpack://storm-react-diagrams/./src/actions/SelectingAction.ts","webpack://storm-react-diagrams/./src/actions/MoveItemsAction.ts","webpack://storm-react-diagrams/./src/actions/MoveCanvasAction.ts","webpack://storm-react-diagrams/./src/factories/AbstractNodeFactory.ts","webpack://storm-react-diagrams/./src/widgets/PortWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultPortLabelWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultNodeWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLinkFactory.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLinkWidget.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultNodeModel.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLabelWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLabelFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLabelFactory.tsx","webpack://storm-react-diagrams/./src/factories/AbstractPortFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultPortFactory.tsx","webpack://storm-react-diagrams/./src/models/DiagramModel.ts","webpack://storm-react-diagrams/./src/main.ts","webpack://storm-react-diagrams/./src/widgets/DiagramWidget.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultNodeFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLinkFactory.tsx","webpack://storm-react-diagrams/./src/DiagramEngine.ts","webpack://storm-react-diagrams/./node_modules/paths-js/geom.js","webpack://storm-react-diagrams/./node_modules/paths-js/path.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/IDAStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiDijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/DijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Grid.js","webpack://storm-react-diagrams/(webpack)/buildin/module.js","webpack://storm-react-diagrams/./node_modules/heap/lib/heap.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/PathFinding.js","webpack://storm-react-diagrams/./node_modules/pathfinding/index.js","webpack://storm-react-diagrams/./node_modules/matches-selector/index.js","webpack://storm-react-diagrams/./node_modules/closest/index.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","DiagonalMovement","Always","Never","IfAtMostOneObstacle","OnlyWhenNoObstacles","React","BaseWidget","_super","__extends","props","_this","this","className","bem","selector","baseClass","getClassName","getProps","__assign","extraProps","Component","backtrace","node","path","x","y","parent","push","reverse","biBacktrace","nodeA","nodeB","pathA","pathB","concat","pathLength","sum","a","b","dx","dy","length","Math","sqrt","interpolate","x0","y0","x1","y1","abs","line","sx","sy","err","e2","expandPath","expanded","len","coord0","coord1","interpolated","interpolatedLen","j","smoothenPath","grid","ex","ey","newPath","coord","testCoord","blocked","isWalkableAt","lastValidCoord","compressPath","compressed","px","py","lx","ly","ldx","ldy","sq","BaseModel_1","_","PointModel","link","points","getSelectedEntities","isSelected","isConnectedToPort","getPortForPoint","getLink","getParent","deSerialize","ob","engine","serialize","merge","remove","removePoint","updateLocation","getX","getY","isLocked","BaseModel","BaseEntity_1","type","id","selected","setParent","getType","getID","setSelected","iterateListeners","listener","event","selectionChanged","entityRemoved","BaseEntity","closest","PathFinding_1","Path","Toolkit","UID","TESTING","TESTING_UID","replace","random","v","toString","element","document","body","generateLinePath","firstPoint","lastPoint","generateCurvePath","curvy","isHorizontal","curvyX","curvyY","generateDynamicPath","pathCoords","moveto","ROUTING_SCALING_FACTOR","slice","forEach","coords","lineto","print","AbstractFactory","NodeModel","nodeType","extras","ports","setPosition","oldX","oldY","port","getLinks","point","getPointForPort","entities","map","portOb","getPortFactory","getNewInstance","addPort","doClone","lookupTable","clone","getPortFromID","getPort","getPorts","removePort","updateDimensions","_a","width","height","manhattan","euclidean","octile","F","SQRT2","chebyshev","max","BaseAction","mouseX","mouseY","ms","Date","getTime","PortModel","maximumLinks","links","parentNode","getNode","getName","getMaximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","updateCoords","canLinkToPort","Toolkit_1","listeners","locked","clearListeners","data","cb","firing","entity","stopPropagation","removeListener","addListener","uid","setLocked","lockChanged","Heap","Util","Heuristic","JumpPointFinderBase","opt","heuristic","trackJumpRecursion","findPath","startX","startY","endX","endY","openList","f","startNode","getNodeAt","endNode","g","opened","empty","pop","closed","_identifySuccessors","neighbors","neighbor","jumpPoint","jx","jy","ng","jumpNode","_findNeighbors","_jump","h","updateItem","PF","pathFinderInstance","JumpPointFinder","diagonalMovement","PathFinding","diagramEngine","instance","calculateDirectPath","from","to","matrix","getCanvasMatrix","Grid","translateRoutingX","floor","translateRoutingY","calculateLinkStartEndCoords","startIndex","findIndex","endIndex","undefined","pathToStart","pathToEnd","start","end","calculateDynamicPath","routingMatrix","dynamicPath","LabelModel","offsetX","offsetY","LabelModel_1","DefaultLabelModel","setLabel","label","LinkModel_1","DefaultLabelModel_1","DefaultLinkModel","color","curvyness","addLabel","labelOb","setWidth","widthChanged","setColor","colorChanged","LinkModel","PortModel_1","DefaultLinkModel_1","DefaultPortModel","isInput","in","setSourcePort","setTargetPort","PointModel_1","linkType","sourcePort","targetPort","labels","getLabelFactory","target","source","setPoints","getPoints","isLastPoint","index","getPointIndex","indexOf","getPointModel","getFirstPoint","getLastPoint","sourcePortChanged","getSourcePort","getTargetPort","targetPortChanged","addPoint","generatePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","BiAStarFinder","allowDiagonal","dontCrossCorners","weight","cmp","startOpenList","endOpenList","BY_START","BY_END","getNeighbors","AStarFinder","Node","walkable","BaseWidget_1","NodeWidget","state","shouldComponentUpdate","canEntityRepaint","render","createElement","data-nodeid","style","top","left","children","NodeWidget_1","NodeLayerWidget","updateNodeDimensions","nodesRendered","diagramModel","getDiagramModel","getNodes","getNodeDimensions","componentDidUpdate","transform","getOffsetX","getOffsetY","getZoomLevel","key","generateWidgetForNode","LinkWidget","LinkWidget_1","LinkLayerWidget","canvas","linksThatHaveInitiallyRendered","portCenter","getPortCenter","portCoords","getPortCoords","ignore","last","generatedLink","generateWidgetForLink","Error","cloneElement","pointAdded","BaseAction_1","SelectingAction","mouseX2","mouseY2","getBoxDimensions","right","bottom","containsElement","z","dimensions","MoveItemsAction","moved","enableRepaintEntities","getSelectedItems","selectedItems","filter","item","isModelLocked","selectionModels","model","initialX","initialY","MoveCanvasAction","initialOffsetX","initialOffsetY","AbstractFactory_1","AbstractNodeFactory","PortWidget","onMouseEnter","setState","onMouseLeave","data-name","PortWidget_1","DefaultPortLabel","DefaultPortLabelWidget_1","DefaultNodeWidget","generatePort","background","getInPorts","bind","getOutPorts","AbstractLinkFactory","DefaultLinkWidget","addPointToLink","shiftKey","getMaxNumberPointsPerLink","getRelativeMousePoint","forceUpdate","findPathAndRelativePositionToRenderLabel","lengths","refPaths","getTotalLength","labelPosition","reduce","previousValue","currentValue","pathIndex","position","calculateLabelPosition","refLabels","labelDimensions","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","setAttribute","isSmartRoutingEnabled","pathFinding","default","calculateAllLabelPosition","requestAnimationFrame","componentDidMount","pointIndex","cx","cy","data-id","data-linkid","opacity","generateLabel","ref","getFactoryForLabel","generateReactWidget","generateLink","Bottom","getFactoryForLink","generateLinkSegment","Top","strokeLinecap","strokeOpacity","strokeWidth","onContextMenu","preventDefault","isSmartRoutingApplicable","paths","directPathCoords","first","getRoutingMatrix","smartLink","simplifiedPath","onMouseDown","xOrY","margin","pointLeft","pointRight","this_1","data-point","labelModel","defaultProps","smooth","DefaultPortModel_1","NodeModel_1","DefaultNodeModel","addInPort","addOutPort","portModel","DefaultLabelWidget","AbstractLabelFactory","AbstractLabelFactory_1","DefaultLabelWidget_1","DefaultLabelFactory","initialConfig","AbstractPortFactory","AbstractPortFactory_1","DefaultPortFactory","DiagramModel","nodes","zoom","rendered","gridSize","setGridSize","gridUpdated","getGridPosition","pos","deSerializeDiagram","nodeOb","getNodeFactory","addNode","linkOb","getLinkFactory","serializeDiagram","clearSelection","filters","_i","arguments","Array","isArray","items","flatMap","uniq","includes","setZoomLevel","zoomUpdated","setOffset","offsetUpdated","setOffsetX","setOffsetY","addAll","models","linksUpdated","isCreated","removeNode","nodesUpdated","__export","LinkLayerWidget_1","NodeLayerWidget_1","MoveCanvasAction_1","MoveItemsAction_1","SelectingAction_1","DiagramWidget","onKeyUpPointer","onMouseMove","onMouseUp","action","wasMoved","renderedNodes","windowListener","diagramEngineListener","componentWillUnmount","setCanvas","removeEventListener","componentWillReceiveProps","nextProps","repaintCanvas","componentWillUpdate","onKeyUp","addEventListener","focus","getMouseElement","nodeElement","getAttribute","fireAction","actionStillFiring","stopFiringAction","shouldSkipEvent","actionStoppedFiring","startFiringAction","actionStartedFiring","relative","getRelativePoint","clientX","clientY","allSelected","amountX_1","amountY_1","amountZoom_1","calculateRoutingMatrix","calculateCanvasMatrix","allowCanvasTranslation","deleteKeys","keyCode","newLink","allowLooseLinks","selectedPoint","some","clearRepaintEntities","drawSelectionBox","setMaxNumberPointsPerLink","maxNumberPointsPerLink","setSmartRoutingStatus","smartRouting","onWheel","allowCanvasZoom","oldZoomFactor","scrollDelta","inverseZoom","deltaY","ctrlKey","zoomFactor","boundingRect","currentTarget","getBoundingClientRect","clientWidth","clientHeight","widthDiff","heightDiff","xFactor","yFactor","Infinity","DefaultNodeModel_1","DefaultNodeWidget_1","AbstractNodeFactory_1","DefaultNodeFactory","DefaultLinkWidget_1","AbstractLinkFactory_1","DefaultLinkFactory","widget","stroke","DiagramModel_1","main_1","DefaultPortFactory_1","DefaultLabelFactory_1","DiagramEngine","canvasMatrix","hAdjustmentFactor","vAdjustmentFactor","calculateMatrixDimensions","allNodesCoords","allLinks","allPortsCoords","allPointsCoords","minX","min","minBy","maxXElement","maxBy","maxX","minY","maxYElement","maxY","ceil","markNodes","markMatrixPoint","markPorts","allElements","nodeFactories","linkFactories","portFactories","labelFactories","paintableWidgets","installDefaultFactories","registerNodeFactory","registerLinkFactory","registerPortFactory","registerLabelFactory","recalculatePortsVisually","baseModel","setDiagramModel","getNodeFactories","getLinkFactories","getLabelFactories","labelFactoriesUpdated","portFactoriesUpdated","nodeFactoriesUpdated","linkFactoriesUpdated","getFactoryForNode","linkFactory","nodeFactory","canvasRect","getNodeElement","querySelector","getNodePortElement","sourceElement","sourceRect","rel","nodeRect","status","canvasWidth","canvasHeight","matrixWidth","matrixHeight","range","fill","cloneDeep","zoomToFit","scrollWidth","scrollHeight","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","Symbol","iterator","_s","next","done","TypeError","distPointToPoint","_ref","_ref3","_ref2","ax","ay","_ref32","bx","by","distPointToParabol","circumCenter","xc","yc","parabolsCrossX","fa","fb","q","s1","s2","doHalflinesCross","sa","sb","approx","ps","hp","vec","det","u","matrixTransform","transformEllipse","rx","ry","torad","PI","epsilon","cos","sin","ma","J","K","D","JK","isDegenerate","L","l1","l2","newAx","newRx","newRy","atan","_geom","init","_instructions","el","copy","areEqualPoints","a1","b1","a2","b2","trimZeros","string","char","charAt","substr","round","number","digits","str","toFixed","printInstrunction","_ref4","command","params","numbers","param","join","_ref5","prev","transformParams","instruction","transformer","V","pts","newPts","H","A","sweepFlag","C","Z","_default","newParams","verbosify","keys","args","k","apply","plus","hlineto","vlineto","closepath","curveto","x2","y2","smoothcurveto","qcurveto","smoothqcurveto","arc","xrot","largeArcFlag","translate","_ret","newInstructions","rotate","angle","_ret2","rad","scale","_ret3","shearX","_ret4","tan","shearY","_ret5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","instructions","connect","unshift","JPFMoveDiagonallyIfAtMostOneObstacle","constructor","tested","nx","ny","neighborNodes","neighborNode","JPFMoveDiagonallyIfNoObstacles","isNextWalkable","isTopWalkable","isBottomWalkable","isRightWalkable","isLeftWalkable","JPFAlwaysMoveDiagonally","JPFNeverMoveDiagonally","IDAStarFinder","trackRecursion","timeLimit","nodesVisited","startTime","cost","search","cutoff","route","depth","t","neighbour","neighbours","retainCount","cutOff","BiDijkstraFinder","BiBreadthFirstFinder","shift","BiBestFirstFinder","orig","DijkstraFinder","BreadthFirstFinder","BestFirstFinder","width_or_matrix","_buildNodes","isInside","setWalkableAt","s0","d0","d1","d2","s3","d3","thisNodes","newGrid","newNodes","webpackPolyfill","deprecate","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","_siftdown","_siftup","lo","hi","mid","array","lastelt","returnitem","_j","_len","_ref1","_results","_results1","elem","result","sort","los","startpos","newitem","parentpos","childpos","endpos","rightpos","pushpop","peek","contains","clear","heap","toArray","insert","front","has","proto","Element","vendor","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","match","querySelectorAll","matches","checkYoSelf"],"mappings":"CAAA,SAAAA,iCAAAC,KAAAC,SACA,UAAAC,UAAA,iBAAAC,SAAA,SACAA,OAAAD,QAAAD,QAAAG,QAAA,UAAAA,QAAA,eACA,UAAAC,SAAA,YAAAA,OAAAC,IACAD,QAAA,aAAAJ,cACA,UAAAC,UAAA,SACAA,QAAA,wBAAAD,QAAAG,QAAA,UAAAA,QAAA,eAEAJ,KAAA,wBAAAC,QAAAD,KAAA,KAAAA,KAAA,WARA,CASCO,OAAA,SAAAC,+BAAAC,gCACD,yBCTA,IAAAC,oBAGA,SAAAC,oBAAAC,UAGA,GAAAF,iBAAAE,UAAA,CACA,OAAAF,iBAAAE,UAAAV,QAGA,IAAAC,OAAAO,iBAAAE,WACAC,EAAAD,SACAE,EAAA,MACAZ,YAIAa,QAAAH,UAAAI,KAAAb,OAAAD,QAAAC,cAAAD,QAAAS,qBAGAR,OAAAW,EAAA,KAGA,OAAAX,OAAAD,QAKAS,oBAAAM,EAAAF,QAGAJ,oBAAAO,EAAAR,iBAGAC,oBAAAQ,EAAA,SAAAjB,QAAAkB,KAAAC,QACA,IAAAV,oBAAAW,EAAApB,QAAAkB,MAAA,CACAG,OAAAC,eAAAtB,QAAAkB,MACAK,aAAA,MACAC,WAAA,KACAC,IAAAN,WAMAV,oBAAAiB,EAAA,SAAA1B,SACAqB,OAAAC,eAAAtB,QAAA,cAAiD2B,MAAA,QAIjDlB,oBAAAmB,EAAA,SAAA3B,QACA,IAAAkB,OAAAlB,eAAA4B,WACA,SAAAC,aAA2B,OAAA7B,OAAA,YAC3B,SAAA8B,mBAAiC,OAAA9B,QACjCQ,oBAAAQ,EAAAE,OAAA,IAAAA,QACA,OAAAA,QAIAV,oBAAAW,EAAA,SAAAY,OAAAC,UAAsD,OAAAZ,OAAAa,UAAAC,eAAArB,KAAAkB,OAAAC,WAGtDxB,oBAAA2B,EAAA,GAIA,OAAA3B,wCAAA4B,EAAA,+BCnEApC,OAAAD,QAAAM,yDCAAL,OAAAD,QAAAO,yDCAA,IAAA+B,kBACAC,OAAA,EACAC,MAAA,EACAC,oBAAA,EACAC,oBAAA,GAGAzC,OAAAD,QAAAsC,qrBCPA,IAAAK,MAAAlC,oBAAA,GAmBA,IAAAmC,WAAA,SAAAC,QAAsFC,UAAAF,WAAAC,QAGrF,SAAAD,WAAY1B,KAAc6B,OAA1B,IAAAC,MACCH,OAAA/B,KAAAmC,KAAMF,QAAME,KACZD,MAAKE,UAAYhC,kBAGlB0B,WAAAV,UAAAiB,IAAA,SAAIC,UACH,OAAQH,KAAKF,MAAMM,WAAaJ,KAAKC,WAAaE,SAAW,KAG9DR,WAAAV,UAAAoB,aAAA,WACC,OACEL,KAAKF,MAAMM,WAAaJ,KAAKC,WAAa,KAAOD,KAAKF,MAAMG,UAAYD,KAAKF,MAAMG,UAAY,IAAM,KAIxGN,WAAAV,UAAAqB,SAAA,WACC,OAAAC,YACMP,KAAKF,MAAMU,gBAChBP,UAAWD,KAAKK,kBAGnB,OAAAV,WAxBA,CAAsFD,MAAMe,WAA/E1D,QAAA4C,gDCbb,SAAAe,UAAAC,MACA,IAAAC,OAAAD,KAAAE,EAAAF,KAAAG,IACA,MAAAH,KAAAI,OAAA,CACAJ,UAAAI,OACAH,KAAAI,MAAAL,KAAAE,EAAAF,KAAAG,IAEA,OAAAF,KAAAK,UAEAlE,QAAA2D,oBAQA,SAAAQ,YAAAC,MAAAC,OACA,IAAAC,MAAAX,UAAAS,OACAG,MAAAZ,UAAAU,OACA,OAAAC,MAAAE,OAAAD,MAAAL,WAEAlE,QAAAmE,wBAOA,SAAAM,WAAAZ,MACA,IAAAlD,EAAA+D,IAAA,EAAAC,EAAAC,EAAAC,GAAAC,GACA,IAAAnE,EAAA,EAAeA,EAAAkD,KAAAkB,SAAiBpE,EAAA,CAChCgE,EAAAd,KAAAlD,EAAA,GACAiE,EAAAf,KAAAlD,GACAkE,GAAAF,EAAA,GAAAC,EAAA,GACAE,GAAAH,EAAA,GAAAC,EAAA,GACAF,KAAAM,KAAAC,KAAAJ,MAAAC,OAEA,OAAAJ,IAEA1E,QAAAyE,sBAaA,SAAAS,YAAAC,GAAAC,GAAAC,GAAAC,IACA,IAAAC,IAAAP,KAAAO,IACAC,QACAC,GAAAC,GAAAb,GAAAC,GAAAa,IAAAC,GAEAf,GAAAU,IAAAF,GAAAF,IACAL,GAAAS,IAAAD,GAAAF,IAEAK,GAAAN,GAAAE,GAAA,KACAK,GAAAN,GAAAE,GAAA,KAEAK,IAAAd,GAAAC,GAEA,YACAU,KAAAvB,MAAAkB,GAAAC,KAEA,GAAAD,KAAAE,IAAAD,KAAAE,GAAA,CACA,MAGAM,GAAA,EAAAD,IACA,GAAAC,IAAAd,GAAA,CACAa,QAAAb,GACAK,MAAAM,GAEA,GAAAG,GAAAf,GAAA,CACAc,QAAAd,GACAO,MAAAM,IAIA,OAAAF,KAEAxF,QAAAkF,wBASA,SAAAW,WAAAhC,MACA,IAAAiC,YACAC,IAAAlC,KAAAkB,OACAiB,OAAAC,OACAC,aACAC,gBACAxF,EAAAyF,EAEA,GAAAL,IAAA,GACA,OAAAD,SAGA,IAAAnF,EAAA,EAAeA,EAAAoF,IAAA,IAAapF,EAAA,CAC5BqF,OAAAnC,KAAAlD,GACAsF,OAAApC,KAAAlD,EAAA,GAEAuF,aAAAhB,YAAAc,OAAA,GAAAA,OAAA,GAAAC,OAAA,GAAAA,OAAA,IACAE,gBAAAD,aAAAnB,OACA,IAAAqB,EAAA,EAAmBA,EAAAD,gBAAA,IAAyBC,EAAA,CAC5CN,SAAA7B,KAAAiC,aAAAE,KAGAN,SAAA7B,KAAAJ,KAAAkC,IAAA,IAEA,OAAAD,SAEA9F,QAAA6F,sBASA,SAAAQ,aAAAC,KAAAzC,MACA,IAAAkC,IAAAlC,KAAAkB,OACAI,GAAAtB,KAAA,MACAuB,GAAAvB,KAAA,MACAwB,GAAAxB,KAAAkC,IAAA,MACAT,GAAAzB,KAAAkC,IAAA,MACAN,GAAAC,GACAa,GAAAC,GACAC,QACA9F,EAAAyF,EAAAM,MAAAlB,KAAAmB,UAAAC,QAEAnB,GAAAN,GACAO,GAAAN,GACAqB,UAAAhB,GAAAC,KAEA,IAAA/E,EAAA,EAAeA,EAAAoF,MAASpF,EAAA,CACxB+F,MAAA7C,KAAAlD,GACA4F,GAAAG,MAAA,GACAF,GAAAE,MAAA,GACAlB,KAAAN,YAAAO,GAAAC,GAAAa,GAAAC,IAEAI,QAAA,MACA,IAAAR,EAAA,EAAmBA,EAAAZ,KAAAT,SAAiBqB,EAAA,CACpCO,UAAAnB,KAAAY,GAEA,IAAAE,KAAAO,aAAAF,UAAA,GAAAA,UAAA,KACAC,QAAA,KACA,OAGA,GAAAA,QAAA,CACAE,eAAAjD,KAAAlD,EAAA,GACA8F,QAAAxC,KAAA6C,gBACArB,GAAAqB,eAAA,GACApB,GAAAoB,eAAA,IAGAL,QAAAxC,MAAAoB,GAAAC,KAEA,OAAAmB,QAEAzG,QAAAqG,0BASA,SAAAU,aAAAlD,MAGA,GAAAA,KAAAkB,OAAA,GACA,OAAAlB,KAGA,IAAAmD,cACAvB,GAAA5B,KAAA,MACA6B,GAAA7B,KAAA,MACAoD,GAAApD,KAAA,MACAqD,GAAArD,KAAA,MACAgB,GAAAoC,GAAAxB,GACAX,GAAAoC,GAAAxB,GACAyB,GAAAC,GACAC,IAAAC,IACAC,GAAA5G,EAGA4G,GAAAvC,KAAAC,KAAAJ,MAAAC,OACAD,IAAA0C,GACAzC,IAAAyC,GAGAP,WAAA/C,MAAAwB,GAAAC,KAEA,IAAA/E,EAAA,EAAcA,EAAAkD,KAAAkB,OAAiBpE,IAAA,CAG/BwG,GAAAF,GACAG,GAAAF,GAGAG,IAAAxC,GACAyC,IAAAxC,GAGAmC,GAAApD,KAAAlD,GAAA,GACAuG,GAAArD,KAAAlD,GAAA,GAGAkE,GAAAoC,GAAAE,GACArC,GAAAoC,GAAAE,GAGAG,GAAAvC,KAAAC,KAAAJ,MAAAC,OACAD,IAAA0C,GACAzC,IAAAyC,GAGA,GAAA1C,KAAAwC,KAAAvC,KAAAwC,IAAA,CACAN,WAAA/C,MAAAkD,GAAAC,MAKAJ,WAAA/C,MAAAgD,GAAAC,KAEA,OAAAF,WAEAhH,QAAA+G,wfCrPA,IAAAS,YAAA/G,oBAAA,GAEA,IAAAgH,EAAAhH,oBAAA,GAGA,IAAAiH,WAAA,SAAA7E,QAAgCC,UAAA4E,WAAA7E,QAI/B,SAAA6E,WAAYC,KAAiBC,QAA7B,IAAA5E,MACCH,OAAA/B,KAAAmC,OAAOA,KACPD,MAAKc,EAAI8D,OAAO9D,EAChBd,MAAKe,EAAI6D,OAAO7D,EAChBf,MAAKgB,OAAS2D,kBAGfD,WAAAxF,UAAA2F,oBAAA,WACC,GAAIhF,OAAAX,UAAM4F,WAAUhH,KAAAmC,QAAOA,KAAK8E,oBAAqB,CACpD,OAAQ9E,MAET,UAGDyE,WAAAxF,UAAA6F,kBAAA,WACC,OAAO9E,KAAKe,OAAOgE,gBAAgB/E,QAAU,MAG9CyE,WAAAxF,UAAA+F,QAAA,WACC,OAAOhF,KAAKiF,aAGbR,WAAAxF,UAAAiG,YAAA,SAAYC,GAAIC,QACfxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAKa,EAAIsE,GAAGtE,EACZb,KAAKc,EAAIqE,GAAGrE,GAGb2D,WAAAxF,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7Ba,EAAGb,KAAKa,EACRC,EAAGd,KAAKc,KAIV2D,WAAAxF,UAAAsG,OAAA,WAEC,GAAIvF,KAAKe,OAAQ,CAChBf,KAAKe,OAAOyE,YAAYxF,MAEzBJ,OAAAX,UAAMsG,OAAM1H,KAAAmC,OAGbyE,WAAAxF,UAAAwG,eAAA,SAAed,QACd3E,KAAKa,EAAI8D,OAAO9D,EAChBb,KAAKc,EAAI6D,OAAO7D,GAGjB2D,WAAAxF,UAAAyG,KAAA,WACC,OAAO1F,KAAKa,GAGb4D,WAAAxF,UAAA0G,KAAA,WACC,OAAO3F,KAAKc,GAGb2D,WAAAxF,UAAA2G,SAAA,WACC,OAAOhG,OAAAX,UAAM2G,SAAQ/H,KAAAmC,OAAMA,KAAKiF,YAAYW,YAE9C,OAAAnB,WA/DA,CAAgCF,YAAAsB,WAAnB9I,QAAA0H,0rBCLb,IAAAqB,aAAAtI,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAaA,IAAAqI,UAAA,SAAAjG,QAGUC,UAAAgG,UAAAjG,QAKT,SAAAiG,UAAYE,KAAeC,IAA3B,IAAAjG,MACCH,OAAA/B,KAAAmC,KAAMgG,KAAGhG,KACTD,MAAKgG,KAAOA,KACZhG,MAAKkG,SAAW,mBAGVJ,UAAA5G,UAAAgG,UAAP,WACC,OAAOjF,KAAKe,QAGN8E,UAAA5G,UAAAiH,UAAP,SAAiBnF,QAChBf,KAAKe,OAASA,QAGR8E,UAAA5G,UAAA2F,oBAAP,WACC,GAAI5E,KAAK6E,aAAc,CACtB,OAAQ7E,MAET,UAGM6F,UAAA5G,UAAAiG,YAAP,SAAmBC,GAAIC,QACtBxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAK+F,KAAOZ,GAAGY,KACf/F,KAAKiG,SAAWd,GAAGc,UAGbJ,UAAA5G,UAAAoG,UAAP,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7B+F,KAAM/F,KAAK+F,KACXE,SAAUjG,KAAKiG,YAIVJ,UAAA5G,UAAAkH,QAAP,WACC,OAAOnG,KAAK+F,MAGNF,UAAA5G,UAAAmH,MAAP,WACC,OAAOpG,KAAKgG,IAGNH,UAAA5G,UAAA4F,WAAP,WACC,OAAO7E,KAAKiG,UAGNJ,UAAA5G,UAAAoH,YAAP,SAAmBJ,UAAA,GAAAA,gBAAA,GAAAA,SAAA,KAClBjG,KAAKiG,SAAWA,SAChBjG,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASE,iBAAkB,CAC9BF,SAASE,iBAAgBlG,YAAMiG,OAAO3B,WAAYoB,gBAK9CJ,UAAA5G,UAAAsG,OAAP,WACCvF,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASG,cAAe,CAC3BH,SAASG,cAAcF,WAI3B,OAAAX,UAtEA,CAGUC,aAAAa,YAHG5J,QAAA8I,wICbb,IAAAe,QAAApJ,oBAAA,IAEA,IAAAqJ,cAAArJ,oBAAA,IACA,IAAAsJ,KAAAtJ,oBAAA,IAIA,IAAAuJ,QAAA,oBAAAA,WAQeA,QAAAC,IAAd,WACC,GAAID,QAAQE,QAAS,CACpBF,QAAQG,cACR,MAAO,GAAKH,QAAQG,YAErB,MAAO,uCAAuCC,QAAQ,QAAS,SAAApJ,GAC9D,IAAMU,EAAKsD,KAAKqF,SAAW,GAAM,EACjC,IAAMC,EAAItJ,IAAM,IAAMU,EAAKA,EAAI,EAAO,EACtC,OAAO4I,EAAEC,SAAS,OAUNP,QAAAH,QAAd,SAAsBW,QAAkBpH,UACvC,GAAIqH,SAASC,KAAKb,QAAS,CAC1B,OAAOW,QAAQX,QAAQzG,UAExB,OAAOyG,QAAQW,QAASpH,WAGX4G,QAAAW,iBAAd,SAA+BC,WAAwBC,WACtD,MAAO,IAAID,WAAW9G,EAAC,IAAI8G,WAAW7G,EAAC,MAAM8G,UAAU/G,EAAC,IAAI+G,UAAU9G,GAGzDiG,QAAAc,kBAAd,SAAgCF,WAAwBC,UAAuBE,OAAA,GAAAA,aAAA,GAAAA,MAAA,EAC9E,IAAIC,aAAehG,KAAKO,IAAIqF,WAAW9G,EAAI+G,UAAU/G,GAAKkB,KAAKO,IAAIqF,WAAW7G,EAAI8G,UAAU9G,GAC5F,IAAIkH,OAASD,aAAeD,MAAQ,EACpC,IAAIG,OAASF,aAAe,EAAID,MAEhC,MAAO,IAAIH,WAAW9G,EAAC,IAAI8G,WAAW7G,EAAC,OAAM6G,WAAW9G,EAAImH,QAAM,KAAIL,WAAW7G,EAAImH,QAAM,UACvFL,UAAU/G,EAAImH,QAAM,KAAIJ,UAAU9G,EAAImH,QAAM,IAAIL,UAAU/G,EAAC,IAAI+G,UAAU9G,GAGhEiG,QAAAmB,oBAAd,SAAkCC,YACjC,IAAIvH,KAAOkG,OACXlG,KAAOA,KAAKwH,OAAOD,WAAW,GAAG,GAAKtB,cAAAwB,uBAAwBF,WAAW,GAAG,GAAKtB,cAAAwB,wBACjFF,WAAWG,MAAM,GAAGC,QAAQ,SAAAC,QAC3B5H,KAAOA,KAAK6H,OAAOD,OAAO,GAAK3B,cAAAwB,uBAAwBG,OAAO,GAAK3B,cAAAwB,0BAEpE,OAAOzH,KAAK8H,SAnDN3B,QAAAE,QAAmB,MACnBF,QAAAG,YAAc,EAoDtB,OAAAH,QAtDA,GAAahK,QAAAgK,oICNb,IAAA4B,gBAAA,WAGC,SAAAA,gBAAY1K,MACX+B,KAAK+F,KAAO9H,KAGb0K,gBAAA1J,UAAAkH,QAAA,WACC,OAAOnG,KAAK+F,MAId,OAAA4C,gBAZA,GAAsB5L,QAAA4L,8fCFtB,IAAApE,YAAA/G,oBAAA,GAEA,IAAAgH,EAAAhH,oBAAA,GAIA,IAAAoL,UAAA,SAAAhJ,QAA+BC,UAAA+I,UAAAhJ,QAU9B,SAAAgJ,UAAYC,SAA8B7C,IAA9B,GAAA6C,gBAAA,GAAAA,SAAA,UAAZ,IAAA9I,MACCH,OAAA/B,KAAAmC,KAAM6I,SAAU7C,KAAGhG,KACnBD,MAAKc,EAAI,EACTd,MAAKe,EAAI,EACTf,MAAK+I,UACL/I,MAAKgJ,sBAGNH,UAAA3J,UAAA+J,YAAA,SAAYnI,EAAGC,GAEd,IAAImI,KAAOjJ,KAAKa,EAChB,IAAIqI,KAAOlJ,KAAKc,EAChB0D,EAAE+D,QAAQvI,KAAK+I,MAAO,SAAAI,MACrB3E,EAAE+D,QAAQY,KAAKC,WAAY,SAAA1E,MAC1B,IAAI2E,MAAQ3E,KAAK4E,gBAAgBH,MACjCE,MAAMxI,EAAIwI,MAAMxI,EAAIA,EAAIoI,KACxBI,MAAMvI,EAAIuI,MAAMvI,EAAIA,EAAIoI,SAG1BlJ,KAAKa,EAAIA,EACTb,KAAKc,EAAIA,GAGV8H,UAAA3J,UAAA2F,oBAAA,WACC,IAAI2E,SAAW3J,OAAAX,UAAM2F,oBAAmB/G,KAAAmC,MAGxC,GAAIA,KAAK6E,aAAc,CACtBL,EAAE+D,QAAQvI,KAAK+I,MAAO,SAAAI,MACrBI,SAAWA,SAAShI,OACnBiD,EAAEgF,IAAIL,KAAKC,WAAY,SAAA1E,MACtB,OAAOA,KAAK4E,gBAAgBH,WAKhC,OAAOI,UAGRX,UAAA3J,UAAAiG,YAAA,SAAYC,GAAIC,QAAhB,IAAArF,MAAAC,KACCJ,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAKa,EAAIsE,GAAGtE,EACZb,KAAKc,EAAIqE,GAAGrE,EACZd,KAAK8I,OAAS3D,GAAG2D,OAGjBtE,EAAE+D,QAAQpD,GAAG4D,MAAO,SAACI,MACpB,IAAIM,OAASrE,OAAOsE,eAAeP,KAAKpD,MAAM4D,iBAC9CF,OAAOvE,YAAYiE,KAAM/D,QACzBrF,MAAK6J,QAAQH,WAIfb,UAAA3J,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7Ba,EAAGb,KAAKa,EACRC,EAAGd,KAAKc,EACRgI,OAAQ9I,KAAK8I,OACbC,MAAOvE,EAAEgF,IAAIxJ,KAAK+I,MAAO,SAAAI,MACxB,OAAOA,KAAK9D,iBAKfuD,UAAA3J,UAAA4K,QAAA,SAAQC,YAAkBC,OAAlB,GAAAD,mBAAA,GAAAA,eAEPC,MAAMhB,SACNvE,EAAE+D,QAAQvI,KAAK+I,MAAO,SAAAI,MACrBY,MAAMH,QAAQT,KAAKY,MAAMD,iBAI3BlB,UAAA3J,UAAAsG,OAAA,WACC3F,OAAAX,UAAMsG,OAAM1H,KAAAmC,MACZwE,EAAE+D,QAAQvI,KAAK+I,MAAO,SAAAI,MACrB3E,EAAE+D,QAAQY,KAAKC,WAAY,SAAA1E,MAC1BA,KAAKa,cAKRqD,UAAA3J,UAAA+K,cAAA,SAAchE,IACb,IAAK,IAAItI,KAAKsC,KAAK+I,MAAO,CACzB,GAAI/I,KAAK+I,MAAMrL,GAAGsI,KAAOA,GAAI,CAC5B,OAAOhG,KAAK+I,MAAMrL,IAGpB,OAAO,MAGRkL,UAAA3J,UAAAgL,QAAA,SAAQhM,MACP,OAAO+B,KAAK+I,MAAM9K,OAGnB2K,UAAA3J,UAAAiL,SAAA,WACC,OAAOlK,KAAK+I,OAGbH,UAAA3J,UAAAkL,WAAA,SAAWhB,MAEV,GAAInJ,KAAK+I,MAAMI,KAAKlL,MAAO,CAC1B+B,KAAK+I,MAAMI,KAAKlL,MAAMiI,UAAU,aACzBlG,KAAK+I,MAAMI,KAAKlL,QAIzB2K,UAAA3J,UAAA2K,QAAA,SAA6BT,MAC5BA,KAAKjD,UAAUlG,MACfA,KAAK+I,MAAMI,KAAKlL,MAAQkL,KACxB,OAAOA,MAGRP,UAAA3J,UAAAmL,iBAAA,SAAiBC,QAAEC,MAAAD,GAAAC,MAAOC,OAAAF,GAAAE,OACzBvK,KAAKsK,MAAQA,MACbtK,KAAKuK,OAASA,QAEhB,OAAA3B,UA9HA,CAA+BrE,YAAAsB,WAAlB9I,QAAA6L,8CCFb5L,OAAAD,SAQAyN,UAAA,SAAA5I,GAAAC,IACA,OAAAD,GAAAC,IASA4I,UAAA,SAAA7I,GAAAC,IACA,OAAAE,KAAAC,KAAAJ,MAAAC,QASA6I,OAAA,SAAA9I,GAAAC,IACA,IAAA8I,EAAA5I,KAAA6I,MAAA,EACA,OAAAhJ,GAAAC,GAAA8I,EAAA/I,GAAAC,GAAA8I,EAAA9I,GAAAD,IASAiJ,UAAA,SAAAjJ,GAAAC,IACA,OAAAE,KAAA+I,IAAAlJ,GAAAC,0HC5CA,IAAAkJ,WAAA,WAKC,SAAAA,WAAYC,OAAgBC,QAC3BjL,KAAKgL,OAASA,OACdhL,KAAKiL,OAASA,OACdjL,KAAKkL,IAAK,IAAIC,MAAOC,UAEvB,OAAAL,WAVA,GAAahO,QAAAgO,ofCAb,IAAAxG,YAAA/G,oBAAA,GAGA,IAAAgH,EAAAhH,oBAAA,GAGA,IAAA6N,UAAA,SAAAzL,QAA+BC,UAAAwL,UAAAzL,QAW9B,SAAAyL,UAAYpN,KAAc8H,KAAeC,GAAasF,cAAtD,IAAAvL,MACCH,OAAA/B,KAAAmC,KAAM+F,KAAMC,KAAGhG,KACfD,MAAK9B,KAAOA,KACZ8B,MAAKwL,SACLxL,MAAKuL,aAAeA,0BAGrBD,UAAApM,UAAAiG,YAAA,SAAYC,GAAIC,QACfxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAK/B,KAAOkH,GAAGlH,KACf+B,KAAKsL,aAAenG,GAAGmG,cAGxBD,UAAApM,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7B/B,KAAM+B,KAAK/B,KACXuN,WAAYxL,KAAKe,OAAOiF,GACxBuF,MAAO/G,EAAEgF,IAAIxJ,KAAKuL,MAAO,SAAA7G,MACxB,OAAOA,KAAKsB,KAEbsF,aAActL,KAAKsL,gBAIrBD,UAAApM,UAAA4K,QAAA,SAAQC,YAAkBC,OAAlB,GAAAD,mBAAA,GAAAA,eACPC,MAAMwB,SACNxB,MAAMyB,WAAaxL,KAAKiF,YAAY8E,MAAMD,cAG3CuB,UAAApM,UAAAwM,QAAA,WACC,OAAOzL,KAAKiF,aAGboG,UAAApM,UAAAyM,QAAA,WACC,OAAO1L,KAAK/B,MAGboN,UAAApM,UAAA0M,gBAAA,WACC,OAAO3L,KAAKsL,cAGbD,UAAApM,UAAA2M,gBAAA,SAAgBN,cACftL,KAAKsL,aAAeA,cAGrBD,UAAApM,UAAA4M,WAAA,SAAWnH,aACH1E,KAAKuL,MAAM7G,KAAK0B,UAGxBiF,UAAApM,UAAA6M,QAAA,SAAQpH,MACP1E,KAAKuL,MAAM7G,KAAK0B,SAAW1B,MAG5B2G,UAAApM,UAAAmK,SAAA,WACC,OAAOpJ,KAAKuL,OAGNF,UAAApM,UAAA8M,gBAAP,WACC,GAAIvH,EAAEwH,SAAShM,KAAKsL,cAAe,CAClC,IAAIW,cAAwBzH,EAAE0H,KAAKlM,KAAKuL,OACxC,GAAIvL,KAAKsL,eAAiB,GAAKW,eAAiB,EAAG,CAClD,OAAOzH,EAAE2H,OAAOnM,KAAKuL,OAAO,QACtB,GAAIU,eAAiBjM,KAAKsL,aAAc,CAC9C,OAAO,MAGT,OAAO,MAGRD,UAAApM,UAAAmN,aAAA,SAAa/B,QAAExJ,EAAAwJ,GAAAxJ,EAAGC,EAAAuJ,GAAAvJ,EAAGwJ,MAAAD,GAAAC,MAAOC,OAAAF,GAAAE,OAC3BvK,KAAKa,EAAIA,EACTb,KAAKc,EAAIA,EACTd,KAAKsK,MAAQA,MACbtK,KAAKuK,OAASA,QAGfc,UAAApM,UAAAoN,cAAA,SAAclD,MACb,OAAO,MAGRkC,UAAApM,UAAA2G,SAAA,WACC,OAAOhG,OAAAX,UAAM2G,SAAQ/H,KAAAmC,OAAMA,KAAKiF,YAAYW,YAE9C,OAAAyF,UA9FA,CAA+B9G,YAAAsB,WAAlB9I,QAAAsO,8UCNb,IAAAiB,UAAA9O,oBAAA,GACA,IAAAgH,EAAAhH,oBAAA,GAmBA,IAAAmJ,WAAA,WAKC,SAAAA,WAAYX,IACXhG,KAAKuM,aACLvM,KAAKgG,GAAKA,IAAMsG,UAAAvF,QAAQC,MACxBhH,KAAKwM,OAAS,MAGf7F,WAAA1H,UAAAmH,MAAA,WACC,OAAOpG,KAAKgG,IAGbW,WAAA1H,UAAA4K,QAAA,SAAQC,YAAwCC,OAAxC,GAAAD,mBAAA,GAAAA,iBAIRnD,WAAA1H,UAAA8K,MAAA,SAAMD,aAAA,GAAAA,mBAAA,GAAAA,eAEL,GAAIA,YAAY9J,KAAKgG,IAAK,CACzB,OAAO8D,YAAY9J,KAAKgG,IAEzB,IAAI+D,MAAQvF,EAAEuF,MAAM/J,MACpB+J,MAAM/D,GAAKsG,UAAAvF,QAAQC,MACnB+C,MAAM0C,iBACN3C,YAAY9J,KAAKgG,IAAM+D,MAEvB/J,KAAK6J,QAAQC,YAAaC,OAC1B,OAAOA,OAGRpD,WAAA1H,UAAAwN,eAAA,WACCzM,KAAKuM,cAGC5F,WAAA1H,UAAAiG,YAAP,SAAmBwH,KAA4BtH,QAC9CpF,KAAKgG,GAAK0G,KAAK1G,IAGTW,WAAA1H,UAAAoG,UAAP,WACC,OACCW,GAAIhG,KAAKgG,KAIJW,WAAA1H,UAAAqH,iBAAP,SAAwBqG,IACvB,IAAInG,OACHR,GAAIsG,UAAAvF,QAAQC,MACZ4F,OAAQ,KACRC,OAAQ7M,KACR8M,gBAAiB,WAChBtG,MAAMoG,OAAS,QAIjB,IAAK,IAAIlP,KAAKsC,KAAKuM,UAAW,CAC7B,GAAIvM,KAAKuM,UAAUrN,eAAexB,GAAI,CAErC,IAAK8I,MAAMoG,OAAQ,CAClB,OAEDD,GAAG3M,KAAKuM,UAAU7O,GAAI8I,UAKlBG,WAAA1H,UAAA8N,eAAP,SAAsBxG,UACrB,GAAIvG,KAAKuM,UAAUhG,UAAW,QACtBvG,KAAKuM,UAAUhG,UACtB,OAAO,KAER,OAAO,OAGDI,WAAA1H,UAAA+N,YAAP,SAAmBzG,UAClB,IAAI0G,IAAMX,UAAAvF,QAAQC,MAClBhH,KAAKuM,UAAUU,KAAO1G,SACtB,OAAO0G,KAGDtG,WAAA1H,UAAA2G,SAAP,WACC,OAAO5F,KAAKwM,QAGN7F,WAAA1H,UAAAiO,UAAP,SAAiBV,QAAA,GAAAA,cAAA,GAAAA,OAAA,KAChBxM,KAAKwM,OAASA,OACdxM,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAAS4G,YAAa,CACzB5G,SAAS4G,YAAW5M,YAAMiG,OAAOgG,OAAQA,cAI7C,OAAA7F,WA9FA,GAAa5J,QAAA4J,oECjBb,IAAAyG,KAAA5P,oBAAA,IACA,IAAA6P,KAAA7P,oBAAA,GACA,IAAA8P,UAAA9P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAQA,SAAA+P,oBAAAC,KACAA,YACAxN,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,UACAxK,KAAA0N,mBAAAF,IAAAE,oBAAA,MAQAH,oBAAAtO,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MACA,IAAA2K,SAAAhO,KAAAgO,SAAA,IAAAZ,KAAA,SAAAjM,MAAAC,OACA,OAAAD,MAAA8M,EAAA7M,MAAA6M,IAEAC,UAAAlO,KAAAkO,UAAA7K,KAAA8K,UAAAP,OAAAC,QACAO,QAAApO,KAAAoO,QAAA/K,KAAA8K,UAAAL,KAAAC,MAAApN,KAEAX,KAAAqD,UAIA6K,UAAAG,EAAA,EACAH,UAAAD,EAAA,EAGAD,SAAAhN,KAAAkN,WACAA,UAAAI,OAAA,KAGA,OAAAN,SAAAO,QAAA,CAEA5N,KAAAqN,SAAAQ,MACA7N,KAAA8N,OAAA,KAEA,GAAA9N,OAAAyN,QAAA,CACA,OAAAf,KAAAzK,WAAAyK,KAAA3M,UAAA0N,UAGApO,KAAA0O,oBAAA/N,MAIA,UASA4M,oBAAAtO,UAAAyP,oBAAA,SAAA/N,MACA,IAAA0C,KAAArD,KAAAqD,KACAoK,UAAAzN,KAAAyN,UACAO,SAAAhO,KAAAgO,SACAF,KAAA9N,KAAAoO,QAAAvN,EACAkN,KAAA/N,KAAAoO,QAAAtN,EACA6N,UAAAC,SACAC,UAAAnR,EAAAC,EACAkD,EAAAF,KAAAE,EAAAC,EAAAH,KAAAG,EACAgO,GAAAC,GAAAnN,GAAAC,GAAA7D,EAAAgR,GAAAC,SACA3M,IAAAP,KAAAO,IAAAwI,IAAA/I,KAAA+I,IAEA6D,UAAA3O,KAAAkP,eAAAvO,MACA,IAAAjD,EAAA,EAAAC,EAAAgR,UAAA7M,OAAoCpE,EAAAC,IAAOD,EAAA,CAC3CkR,SAAAD,UAAAjR,GACAmR,UAAA7O,KAAAmP,MAAAP,SAAA,GAAAA,SAAA,GAAA/N,EAAAC,GACA,GAAA+N,UAAA,CAEAC,GAAAD,UAAA,GACAE,GAAAF,UAAA,GACAI,SAAA5L,KAAA8K,UAAAW,GAAAC,IAEA,GAAAE,SAAAR,OAAA,CACA,SAIAzQ,EAAAsP,UAAA5C,OAAApI,IAAAwM,GAAAjO,GAAAyB,IAAAyM,GAAAjO,IACAkO,GAAArO,KAAA0N,EAAArQ,EAEA,IAAAiR,SAAAX,QAAAU,GAAAC,SAAAZ,EAAA,CACAY,SAAAZ,EAAAW,GACAC,SAAAG,EAAAH,SAAAG,GAAA3B,UAAAnL,IAAAwM,GAAAhB,MAAAxL,IAAAyM,GAAAhB,OACAkB,SAAAhB,EAAAgB,SAAAZ,EAAAY,SAAAG,EACAH,SAAAlO,OAAAJ,KAEA,IAAAsO,SAAAX,OAAA,CACAN,SAAAhN,KAAAiO,UACAA,SAAAX,OAAA,SACiB,CACjBN,SAAAqB,WAAAJ,eAOAjS,OAAAD,QAAAwQ,kECjHAvQ,OAAAD,QAAAS,oBAAA,wHCAA,IAAA8R,GAAA9R,oBAAA,IAQaT,QAAAsL,uBAAyB,EAEtC,IAAMkH,mBAAqB,IAAID,GAAGE,iBACjC/B,UAAW6B,GAAGhC,UAAU9C,UACxBiF,iBAAkBH,GAAGjQ,iBAAiBE,QAGvC,IAAAmQ,YAAA,WAIC,SAAAA,YAAYC,eACX3P,KAAK4P,SAAWL,mBAChBvP,KAAK2P,cAAgBA,cAOtBD,YAAAzQ,UAAA4Q,oBAAA,SACCC,KAIAC,IAKA,IAAMC,OAAShQ,KAAK2P,cAAcM,kBAClC,IAAM5M,KAAO,IAAIiM,GAAGY,KAAKF,QAEzB,OAAOT,mBAAmB5B,SACzB3N,KAAK2P,cAAcQ,kBAAkBpO,KAAKqO,MAAMN,KAAKjP,EAAI9D,QAAAsL,yBACzDrI,KAAK2P,cAAcU,kBAAkBtO,KAAKqO,MAAMN,KAAKhP,EAAI/D,QAAAsL,yBACzDrI,KAAK2P,cAAcQ,kBAAkBpO,KAAKqO,MAAML,GAAGlP,EAAI9D,QAAAsL,yBACvDrI,KAAK2P,cAAcU,kBAAkBtO,KAAKqO,MAAML,GAAGjP,EAAI/D,QAAAsL,yBACvDhF,OASFqM,YAAAzQ,UAAAqR,4BAAA,SACCN,OACApP,MAaA,IAAM2P,WAAa3P,KAAK4P,UAAU,SAAAnH,OAAS,OAAA2G,OAAO3G,MAAM,IAAIA,MAAM,MAAQ,IAC1E,IAAMoH,SACL7P,KAAKkB,OACL,EACAlB,KACE0H,QACArH,UACAuP,UAAU,SAAAnH,OAAS,OAAA2G,OAAO3G,MAAM,IAAIA,MAAM,MAAQ,IAIrD,GAAIkH,cAAgB,GAAKE,YAAc,EAAG,CACzC,OAAOC,UAGR,IAAMC,YAAc/P,KAAK0H,MAAM,EAAGiI,YAClC,IAAMK,UAAYhQ,KAAK0H,MAAMmI,UAE7B,OACCI,OACChQ,EAAGD,KAAK2P,YAAY,GACpBzP,EAAGF,KAAK2P,YAAY,IAErBO,KACCjQ,EAAGD,KAAK6P,UAAU,GAClB3P,EAAGF,KAAK6P,UAAU,IAEnBE,YAAWA,YACXC,UAASA,YAQXlB,YAAAzQ,UAAA8R,qBAAA,SACCC,cACAH,MAIAC,IAIAH,YACAC,WAXD,IAAA7Q,MAAAC,KAcC,IAAMqD,KAAO,IAAIiM,GAAGY,KAAKc,eACzB,IAAMC,YAAc1B,mBAAmB5B,SAASkD,MAAMhQ,EAAGgQ,MAAM/P,EAAGgQ,IAAIjQ,EAAGiQ,IAAIhQ,EAAGuC,MAGhF,IAAM8E,WAAawI,YACjBpP,OAAO0P,YAAaL,WACpBpH,IAAI,SAAAhB,QAAU,OACdzI,MAAK4P,cAAcQ,kBAAkB3H,OAAO,GAAI,MAChDzI,MAAK4P,cAAcU,kBAAkB7H,OAAO,GAAI,SAElD,OAAO8G,GAAGjC,KAAKvJ,aAAaqE,aAE9B,OAAAuH,YArHA,6fCfA,IAAAnL,YAAA/G,oBAAA,GAEA,IAAAgH,EAAAhH,oBAAA,GAGA,IAAA0T,WAAA,SAAAtR,QAAgCC,UAAAqR,WAAAtR,QAI/B,SAAAsR,WAAYnL,KAAeC,IAA3B,IAAAjG,MACCH,OAAA/B,KAAAmC,KAAM+F,KAAMC,KAAGhG,KACfD,MAAKoR,QAAU,EACfpR,MAAKqR,QAAU,eAGhBF,WAAAjS,UAAAiG,YAAA,SAAYC,GAAIC,QACfxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAKmR,QAAUhM,GAAGgM,QAClBnR,KAAKoR,QAAUjM,GAAGiM,SAGnBF,WAAAjS,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7BmR,QAASnR,KAAKmR,QACdC,QAASpR,KAAKoR,WAGjB,OAAAF,WAtBA,CAAgC3M,YAAAsB,WAAnB9I,QAAAmU,ofCLb,IAAAG,aAAA7T,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAGA,IAAA8T,kBAAA,SAAA1R,QAAuCC,UAAAyR,kBAAA1R,QAGtC,SAAA0R,oBAAA,IAAAvR,MACCH,OAAA/B,KAAAmC,KAAM,YAAUA,KAChBD,MAAKqR,SAAW,gBAGjBE,kBAAArS,UAAAsS,SAAA,SAASC,OACRxR,KAAKwR,MAAQA,OAGdF,kBAAArS,UAAAiG,YAAA,SAAYC,GAAIC,QACfxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAKwR,MAAQrM,GAAGqM,OAGjBF,kBAAArS,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7BwR,MAAOxR,KAAKwR,SAGf,OAAAF,kBAtBA,CAAuCD,aAAAH,YAA1BnU,QAAAuU,wsBCDb,IAAAG,YAAAjU,oBAAA,IAEA,IAAAgH,EAAAhH,oBAAA,GAGA,IAAAkU,oBAAAlU,oBAAA,IACA,IAAA6T,aAAA7T,oBAAA,IAQA,IAAAmU,iBAAA,SAAA/R,QAAsCC,UAAA8R,iBAAA/R,QAKrC,SAAA+R,iBAAY5L,MAAA,GAAAA,YAAA,GAAAA,KAAA,UAAZ,IAAAhG,MACCH,OAAA/B,KAAAmC,KAAM+F,OAAK/F,KACXD,MAAK6R,MAAQ,wBACb7R,MAAKuK,MAAQ,EACbvK,MAAK8R,UAAY,gBAGlBF,iBAAA1S,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7BsK,MAAOtK,KAAKsK,MACZsH,MAAO5R,KAAK4R,MACZC,UAAW7R,KAAK6R,aAIlBF,iBAAA1S,UAAAiG,YAAA,SAAYC,GAAIC,QACfxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAK4R,MAAQzM,GAAGyM,MAChB5R,KAAKsK,MAAQnF,GAAGmF,MAChBtK,KAAK6R,UAAY1M,GAAG0M,WAGrBF,iBAAA1S,UAAA6S,SAAA,SAASN,OACR,GAAIA,iBAAiBH,aAAAH,WAAY,CAChC,OAAOtR,OAAAX,UAAM6S,SAAQjU,KAAAmC,KAACwR,OAEvB,IAAIO,QAAU,IAAIL,oBAAAJ,kBAClBS,QAAQR,SAASC,OACjB,OAAO5R,OAAAX,UAAM6S,SAAQjU,KAAAmC,KAAC+R,UAGvBJ,iBAAA1S,UAAA+S,SAAA,SAAS1H,OACRtK,KAAKsK,MAAQA,MACbtK,KAAKsG,iBAAiB,SAACC,SAAoCC,OAC1D,GAAID,SAAS0L,aAAc,CAC1B1L,SAAS0L,aAAY1R,YAAMiG,OAAO8D,MAAOA,aAK5CqH,iBAAA1S,UAAAiT,SAAA,SAASN,OACR5R,KAAK4R,MAAQA,MACb5R,KAAKsG,iBAAiB,SAACC,SAAoCC,OAC1D,GAAID,SAAS4L,aAAc,CAC1B5L,SAAS4L,aAAY5R,YAAMiG,OAAOoL,MAAOA,aAI7C,OAAAD,iBArDA,CAAsCF,YAAAW,WAAzBrV,QAAA4U,ggBCjBb,IAAAnN,EAAAhH,oBAAA,GACA,IAAA6U,YAAA7U,oBAAA,IAEA,IAAA8U,mBAAA9U,oBAAA,IAGA,IAAA+U,iBAAA,SAAA3S,QAAsCC,UAAA0S,iBAAA3S,QAKrC,SAAA2S,iBAAYC,QAAkBvU,KAAcuT,MAAsBxL,IAAtB,GAAAwL,aAAA,GAAAA,MAAA,KAA5C,IAAAzR,MACCH,OAAA/B,KAAAmC,KAAM/B,KAAM,UAAW+H,KAAGhG,KAC1BD,MAAK0S,GAAKD,QACVzS,MAAKyR,MAAQA,OAASvT,kBAGvBsU,iBAAAtT,UAAAiG,YAAA,SAAYnG,OAAQqG,QACnBxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACjB,OAAQqG,QAC1BpF,KAAKyS,GAAK1T,OAAO0T,GACjBzS,KAAKwR,MAAQzS,OAAOyS,OAGrBe,iBAAAtT,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7ByS,GAAIzS,KAAKyS,GACTjB,MAAOxR,KAAKwR,SAIde,iBAAAtT,UAAAyF,KAAA,SAAKyE,MACJ,IAAIzE,KAAO1E,KAAK+L,kBAChBrH,KAAKgO,cAAc1S,MACnB0E,KAAKiO,cAAcxJ,MACnB,OAAOzE,MAGR6N,iBAAAtT,UAAAoN,cAAA,SAAclD,MACb,GAAIA,gBAAgBoJ,iBAAkB,CACrC,OAAOvS,KAAKyS,KAAOtJ,KAAKsJ,GAEzB,OAAO,MAGRF,iBAAAtT,UAAA8M,gBAAA,WACC,IAAIrH,KAAO9E,OAAAX,UAAM8M,gBAAelO,KAAAmC,MAChC,OAAO0E,MAAQ,IAAI4N,mBAAAX,kBAErB,OAAAY,iBA1CA,CAAsCF,YAAAhH,WAAzBtO,QAAAwV,ssBCNb,IAAAhO,YAAA/G,oBAAA,GAEA,IAAAoV,aAAApV,oBAAA,GACA,IAAAgH,EAAAhH,oBAAA,GAYA,IAAA4U,UAAA,SAAAxS,QAAgFC,UAAAuS,UAAAxS,QAO/E,SAAAwS,UAAYS,SAA8B7M,IAA9B,GAAA6M,gBAAA,GAAAA,SAAA,UAAZ,IAAA9S,MACCH,OAAA/B,KAAAmC,KAAM6S,SAAU7M,KAAGhG,KACnBD,MAAK4E,QAAU,IAAIiO,aAAAnO,WAAW1E,OAAQc,EAAG,EAAGC,EAAG,IAAM,IAAI8R,aAAAnO,WAAW1E,OAAQc,EAAG,EAAGC,EAAG,KACrFf,MAAK+I,UACL/I,MAAK+S,WAAa,KAClB/S,MAAKgT,WAAa,KAClBhT,MAAKiT,uBAGNZ,UAAAnT,UAAAiG,YAAA,SAAYC,GAAIC,QAAhB,IAAArF,MAAAC,KACCJ,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACmF,GAAIC,QACtBpF,KAAK8I,OAAS3D,GAAG2D,OACjB9I,KAAK2E,OAASH,EAAEgF,IAAIrE,GAAGR,WAAc,SAAC0E,OACrC,IAAIlK,EAAI,IAAIyT,aAAAnO,WAAW1E,OAAQc,EAAGwI,MAAMxI,EAAGC,EAAGuI,MAAMvI,IACpD3B,EAAE+F,YAAYmE,MAAOjE,QACrB,OAAOjG,IAIRqF,EAAE+D,QAAQpD,GAAG6N,WAAc,SAACxB,OAC3B,IAAIO,QAAU3M,OAAO6N,gBAAgBzB,MAAMzL,MAAM4D,iBACjDoI,QAAQ7M,YAAYsM,MAAOpM,QAC3BrF,MAAK+R,SAASC,WAGf,GAAI5M,GAAG+N,OAAQ,CACdlT,KAAK2S,cACJ3S,KAAKiF,YACHwG,QAAQtG,GAAG+N,QACXlJ,cAAc7E,GAAG4N,aAIrB,GAAI5N,GAAGgO,OAAQ,CACdnT,KAAK0S,cACJ1S,KAAKiF,YACHwG,QAAQtG,GAAGgO,QACXnJ,cAAc7E,GAAG2N,eAKtBV,UAAAnT,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7BmT,OAAQnT,KAAK8S,WAAa9S,KAAK8S,WAAW7N,YAAYe,GAAK,KAC3D8M,WAAY9S,KAAK8S,WAAa9S,KAAK8S,WAAW9M,GAAK,KACnDkN,OAAQlT,KAAK+S,WAAa/S,KAAK+S,WAAW9N,YAAYe,GAAK,KAC3D+M,WAAY/S,KAAK+S,WAAa/S,KAAK+S,WAAW/M,GAAK,KACnDrB,OAAQH,EAAEgF,IAAIxJ,KAAK2E,OAAQ,SAAA0E,OAC1B,OAAOA,MAAMhE,cAEdyD,OAAQ9I,KAAK8I,OACbkK,OAAQxO,EAAEgF,IAAIxJ,KAAKgT,OAAQ,SAAAxB,OAC1B,OAAOA,MAAMnM,iBAKhB+M,UAAAnT,UAAA4K,QAAA,SAAQC,YAAkBC,OAAlB,GAAAD,mBAAA,GAAAA,eACPC,MAAMqJ,UACL5O,EAAEgF,IAAIxJ,KAAKqT,YAAa,SAAChK,OACxB,OAAOA,MAAMU,MAAMD,gBAGrB,GAAI9J,KAAK8S,WAAY,CACpB/I,MAAM2I,cAAc1S,KAAK8S,WAAW/I,MAAMD,cAE3C,GAAI9J,KAAK+S,WAAY,CACpBhJ,MAAM4I,cAAc3S,KAAK+S,WAAWhJ,MAAMD,gBAI5CsI,UAAAnT,UAAAsG,OAAA,WACC,GAAIvF,KAAK8S,WAAY,CACpB9S,KAAK8S,WAAWjH,WAAW7L,MAE5B,GAAIA,KAAK+S,WAAY,CACpB/S,KAAK+S,WAAWlH,WAAW7L,MAE5BJ,OAAAX,UAAMsG,OAAM1H,KAAAmC,OAGboS,UAAAnT,UAAAqU,YAAA,SAAYjK,OACX,IAAIkK,MAAQvT,KAAKwT,cAAcnK,OAC/B,OAAOkK,QAAUvT,KAAK2E,OAAO7C,OAAS,GAGvCsQ,UAAAnT,UAAAuU,cAAA,SAAcnK,OACb,OAAOrJ,KAAK2E,OAAO8O,QAAQpK,QAG5B+I,UAAAnT,UAAAyU,cAAA,SAAc1N,IACb,IAAK,IAAItI,EAAI,EAAGA,EAAIsC,KAAK2E,OAAO7C,OAAQpE,IAAK,CAC5C,GAAIsC,KAAK2E,OAAOjH,GAAGsI,KAAOA,GAAI,CAC7B,OAAOhG,KAAK2E,OAAOjH,IAGrB,OAAO,MAGR0U,UAAAnT,UAAA8F,gBAAA,SAAgBsE,OACf,GAAIrJ,KAAK8S,aAAe,MAAQ9S,KAAK2T,gBAAgBvN,UAAYiD,MAAMjD,QAAS,CAC/E,OAAOpG,KAAK8S,WAEb,GAAI9S,KAAK+S,aAAe,MAAQ/S,KAAK4T,eAAexN,UAAYiD,MAAMjD,QAAS,CAC9E,OAAOpG,KAAK+S,WAEb,OAAO,MAGRX,UAAAnT,UAAAqK,gBAAA,SAAgBH,MACf,GAAInJ,KAAK8S,aAAe,MAAQ9S,KAAK8S,WAAW1M,UAAY+C,KAAK/C,QAAS,CACzE,OAAOpG,KAAK2T,gBAEb,GAAI3T,KAAK+S,aAAe,MAAQ/S,KAAK+S,WAAW3M,UAAY+C,KAAK/C,QAAS,CACzE,OAAOpG,KAAK4T,eAEb,OAAO,MAGRxB,UAAAnT,UAAA0U,cAAA,WACC,OAAO3T,KAAK2E,OAAO,IAGpByN,UAAAnT,UAAA2U,aAAA,WACC,OAAO5T,KAAK2E,OAAO3E,KAAK2E,OAAO7C,OAAS,IAGzCsQ,UAAAnT,UAAAyT,cAAA,SAAcvJ,MACb,GAAIA,OAAS,KAAM,CAClBA,KAAK2C,QAAQ9L,MAEd,GAAIA,KAAK8S,aAAe,KAAM,CAC7B9S,KAAK8S,WAAWjH,WAAW7L,MAE5BA,KAAK8S,WAAa3J,KAClBnJ,KAAKsG,iBAAiB,SAACC,SAA6BC,OACnD,GAAID,SAASsN,kBAAmB,CAC/BtN,SAASsN,kBAAiBtT,YAAMiG,OAAO2C,KAAMA,YAKhDiJ,UAAAnT,UAAA6U,cAAA,WACC,OAAO9T,KAAK8S,YAGbV,UAAAnT,UAAA8U,cAAA,WACC,OAAO/T,KAAK+S,YAGbX,UAAAnT,UAAA0T,cAAA,SAAcxJ,MACb,GAAIA,OAAS,KAAM,CAClBA,KAAK2C,QAAQ9L,MAEd,GAAIA,KAAK+S,aAAe,KAAM,CAC7B/S,KAAK+S,WAAWlH,WAAW7L,MAE5BA,KAAK+S,WAAa5J,KAClBnJ,KAAKsG,iBAAiB,SAACC,SAA6BC,OACnD,GAAID,SAASyN,kBAAmB,CAC/BzN,SAASyN,kBAAiBzT,YAAMiG,OAAO2C,KAAMA,YAKhDiJ,UAAAnT,UAAAoK,MAAA,SAAMxI,EAAWC,GAChB,OAAOd,KAAKiU,SAASjU,KAAKkU,cAAcrT,EAAGC,KAG5CsR,UAAAnT,UAAA6S,SAAA,SAASN,OACRA,MAAMtL,UAAUlG,MAChBA,KAAKgT,OAAOhS,KAAKwQ,QAGlBY,UAAAnT,UAAAoU,UAAA,WACC,OAAOrT,KAAK2E,QAGbyN,UAAAnT,UAAAmU,UAAA,SAAUzO,QAAV,IAAA5E,MAAAC,KACCwE,EAAE+D,QAAQ5D,OAAQ,SAAA0E,OACjBA,MAAMnD,UAAUnG,SAEjBC,KAAK2E,OAASA,QAGfyN,UAAAnT,UAAAuG,YAAA,SAAY2O,YACXnU,KAAK2E,OAAOyP,OAAOpU,KAAKwT,cAAcW,YAAa,IAGpD/B,UAAAnT,UAAAoV,mBAAA,SAAmBF,YAClBnU,KAAK2E,OAAOyP,OAAO,EAAGpU,KAAKwT,cAAcW,cAG1C/B,UAAAnT,UAAAqV,kBAAA,SAAkBH,YACjBnU,KAAK2E,OAAOyP,OAAOpU,KAAKwT,cAAcW,YAAc,IAGrD/B,UAAAnT,UAAAsV,mBAAA,WACC,GAAIvU,KAAK2E,OAAO7C,OAAS,EAAG,CAC3B9B,KAAK2E,OAAOyP,OAAO,EAAGpU,KAAK2E,OAAO7C,OAAS,KAI7CsQ,UAAAnT,UAAAgV,SAAA,SAA+BE,WAAeZ,OAAA,GAAAA,aAAA,GAAAA,MAAA,EAC7CY,WAAWjO,UAAUlG,MACrBA,KAAK2E,OAAOyP,OAAOb,MAAO,EAAGY,YAC7B,OAAOA,YAGR/B,UAAAnT,UAAAiV,cAAA,SAAcrT,EAAeC,GAAf,GAAAD,SAAA,GAAAA,EAAA,EAAe,GAAAC,SAAA,GAAAA,EAAA,EAC5B,OAAO,IAAI8R,aAAAnO,WAAWzE,MAAQa,EAAGA,EAAGC,EAAGA,KAEzC,OAAAsR,UA5NA,CAAgF7N,YAAAsB,WAAnE9I,QAAAqV,kECfb,IAAAhF,KAAA5P,oBAAA,IACA,IAAA6P,KAAA7P,oBAAA,GACA,IAAA8P,UAAA9P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAiBA,SAAAgX,cAAAhH,KACAA,YACAxN,KAAAyU,cAAAjH,IAAAiH,cACAzU,KAAA0U,iBAAAlH,IAAAkH,iBACA1U,KAAAyP,iBAAAjC,IAAAiC,iBACAzP,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,UACAxK,KAAA2U,OAAAnH,IAAAmH,QAAA,EAEA,IAAA3U,KAAAyP,iBAAA,CACA,IAAAzP,KAAAyU,cAAA,CACAzU,KAAAyP,iBAAApQ,iBAAAE,UACS,CACT,GAAAS,KAAA0U,iBAAA,CACA1U,KAAAyP,iBAAApQ,iBAAAI,wBACa,CACbO,KAAAyP,iBAAApQ,iBAAAG,sBAOA,GAAAQ,KAAAyP,mBAAApQ,iBAAAE,MAAA,CACAS,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,cACK,CACLxK,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA5C,QASA8J,cAAAvV,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MACA,IAAAuR,IAAA,SAAAzT,MAAAC,OACA,OAAAD,MAAA8M,EAAA7M,MAAA6M,GAEA4G,cAAA,IAAAzH,KAAAwH,KACAE,YAAA,IAAA1H,KAAAwH,KACA1G,UAAA7K,KAAA8K,UAAAP,OAAAC,QACAO,QAAA/K,KAAA8K,UAAAL,KAAAC,MACAN,UAAAzN,KAAAyN,UACAgC,iBAAAzP,KAAAyP,iBACAkF,OAAA3U,KAAA2U,OACArS,IAAAP,KAAAO,IAAAsI,MAAA7I,KAAA6I,MACAjK,KAAAgO,UAAAC,SAAAlR,EAAAC,EAAAkD,EAAAC,EAAAkO,GACA+F,SAAA,EAAAC,OAAA,EAIA9G,UAAAG,EAAA,EACAH,UAAAD,EAAA,EACA4G,cAAA7T,KAAAkN,WACAA,UAAAI,OAAAyG,SAIA3G,QAAAC,EAAA,EACAD,QAAAH,EAAA,EACA6G,YAAA9T,KAAAoN,SACAA,QAAAE,OAAA0G,OAGA,OAAAH,cAAAtG,UAAAuG,YAAAvG,QAAA,CAGA5N,KAAAkU,cAAArG,MACA7N,KAAA8N,OAAA,KAGAE,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAEA,GAAAkR,SAAAH,OAAA,CACA,SAEA,GAAAG,SAAAN,SAAA0G,OAAA,CACA,OAAA3H,KAAAnM,YAAAP,KAAAiO,UAGA/N,EAAA+N,SAAA/N,EACAC,EAAA8N,SAAA9N,EAIAkO,GAAArO,KAAA0N,GAAAxN,EAAAF,KAAAE,IAAA,GAAAC,EAAAH,KAAAG,IAAA,IAAA8J,OAIA,IAAAgE,SAAAN,QAAAU,GAAAJ,SAAAP,EAAA,CACAO,SAAAP,EAAAW,GACAJ,SAAAQ,EAAAR,SAAAQ,GACAuF,OAAAlH,UAAAnL,IAAAzB,EAAAiN,MAAAxL,IAAAxB,EAAAiN,OACAa,SAAAX,EAAAW,SAAAP,EAAAO,SAAAQ,EACAR,SAAA7N,OAAAJ,KAEA,IAAAiO,SAAAN,OAAA,CACAuG,cAAA7T,KAAA4N,UACAA,SAAAN,OAAAyG,aACiB,CAIjBF,cAAAxF,WAAAT,YAOAjO,KAAAmU,YAAAtG,MACA7N,KAAA8N,OAAA,KAGAE,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAEA,GAAAkR,SAAAH,OAAA,CACA,SAEA,GAAAG,SAAAN,SAAAyG,SAAA,CACA,OAAA1H,KAAAnM,YAAA0N,SAAAjO,MAGAE,EAAA+N,SAAA/N,EACAC,EAAA8N,SAAA9N,EAIAkO,GAAArO,KAAA0N,GAAAxN,EAAAF,KAAAE,IAAA,GAAAC,EAAAH,KAAAG,IAAA,IAAA8J,OAIA,IAAAgE,SAAAN,QAAAU,GAAAJ,SAAAP,EAAA,CACAO,SAAAP,EAAAW,GACAJ,SAAAQ,EAAAR,SAAAQ,GACAuF,OAAAlH,UAAAnL,IAAAzB,EAAA+M,QAAAtL,IAAAxB,EAAA+M,SACAe,SAAAX,EAAAW,SAAAP,EAAAO,SAAAQ,EACAR,SAAA7N,OAAAJ,KAEA,IAAAiO,SAAAN,OAAA,CACAwG,YAAA9T,KAAA4N,UACAA,SAAAN,OAAA0G,WACiB,CAIjBF,YAAAzF,WAAAT,aAOA,UAGA5R,OAAAD,QAAAyX,4DCpLA,IAAApH,KAAA5P,oBAAA,IACA,IAAA6P,KAAA7P,oBAAA,GACA,IAAA8P,UAAA9P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAgBA,SAAA0X,YAAA1H,KACAA,YACAxN,KAAAyU,cAAAjH,IAAAiH,cACAzU,KAAA0U,iBAAAlH,IAAAkH,iBACA1U,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,UACAxK,KAAA2U,OAAAnH,IAAAmH,QAAA,EACA3U,KAAAyP,iBAAAjC,IAAAiC,iBAEA,IAAAzP,KAAAyP,iBAAA,CACA,IAAAzP,KAAAyU,cAAA,CACAzU,KAAAyP,iBAAApQ,iBAAAE,UACS,CACT,GAAAS,KAAA0U,iBAAA,CACA1U,KAAAyP,iBAAApQ,iBAAAI,wBACa,CACbO,KAAAyP,iBAAApQ,iBAAAG,sBAOA,GAAAQ,KAAAyP,mBAAApQ,iBAAAE,MAAA,CACAS,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,cACK,CACLxK,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA5C,QASAwK,YAAAjW,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MACA,IAAA2K,SAAA,IAAAZ,KAAA,SAAAjM,MAAAC,OACA,OAAAD,MAAA8M,EAAA7M,MAAA6M,IAEAC,UAAA7K,KAAA8K,UAAAP,OAAAC,QACAO,QAAA/K,KAAA8K,UAAAL,KAAAC,MACAN,UAAAzN,KAAAyN,UACAgC,iBAAAzP,KAAAyP,iBACAkF,OAAA3U,KAAA2U,OACArS,IAAAP,KAAAO,IAAAsI,MAAA7I,KAAA6I,MACAjK,KAAAgO,UAAAC,SAAAlR,EAAAC,EAAAkD,EAAAC,EAAAkO,GAGAd,UAAAG,EAAA,EACAH,UAAAD,EAAA,EAGAD,SAAAhN,KAAAkN,WACAA,UAAAI,OAAA,KAGA,OAAAN,SAAAO,QAAA,CAEA5N,KAAAqN,SAAAQ,MACA7N,KAAA8N,OAAA,KAGA,GAAA9N,OAAAyN,QAAA,CACA,OAAAf,KAAA3M,UAAA0N,SAIAO,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAEA,GAAAkR,SAAAH,OAAA,CACA,SAGA5N,EAAA+N,SAAA/N,EACAC,EAAA8N,SAAA9N,EAIAkO,GAAArO,KAAA0N,GAAAxN,EAAAF,KAAAE,IAAA,GAAAC,EAAAH,KAAAG,IAAA,IAAA8J,OAIA,IAAAgE,SAAAN,QAAAU,GAAAJ,SAAAP,EAAA,CACAO,SAAAP,EAAAW,GACAJ,SAAAQ,EAAAR,SAAAQ,GAAAuF,OAAAlH,UAAAnL,IAAAzB,EAAAiN,MAAAxL,IAAAxB,EAAAiN,OACAa,SAAAX,EAAAW,SAAAP,EAAAO,SAAAQ,EACAR,SAAA7N,OAAAJ,KAEA,IAAAiO,SAAAN,OAAA,CACAN,SAAAhN,KAAA4N,UACAA,SAAAN,OAAA,SACiB,CAIjBN,SAAAqB,WAAAT,aAOA,UAGA5R,OAAAD,QAAAmY,sCCpHA,SAAAC,KAAAtU,EAAAC,EAAAsU,UAKApV,KAAAa,IAKAb,KAAAc,IAKAd,KAAAoV,oBAAA1E,UAAA,KAAA0E,SAGApY,OAAAD,QAAAoY,yqBC3BA,IAAAzV,MAAAlC,oBAAA,GAIA,IAAA6X,aAAA7X,oBAAA,GAaA,IAAA8X,WAAA,SAAA1V,QAAgCC,UAAAyV,WAAA1V,QAC/B,SAAA0V,WAAYxV,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,WAAYF,QAAME,KACxBD,MAAKwV,sBAGND,WAAArW,UAAAuW,sBAAA,WACC,OAAOxV,KAAKF,MAAM6P,cAAc8F,iBAAiBzV,KAAKF,MAAMa,OAG7D2U,WAAArW,UAAAoB,aAAA,WACC,MAAO,QAAUT,OAAAX,UAAMoB,aAAYxC,KAAAmC,OAAMA,KAAKF,MAAMa,KAAKkE,aAAe7E,KAAKE,IAAI,cAAgB,KAGlGoV,WAAArW,UAAAyW,OAAA,WACC,OACChW,MAAAiW,cAAA,MAAApV,YACKP,KAAKM,YAAUsV,cACN5V,KAAKF,MAAMa,KAAKqF,GAC7B6P,OACCC,IAAK9V,KAAKF,MAAMa,KAAKG,EACrBiV,KAAM/V,KAAKF,MAAMa,KAAKE,KAGtBb,KAAKF,MAAMkW,WAIhB,OAAAV,WA5BA,CAAgCD,aAAA1V,YAAnB5C,QAAAuY,0rBCjBb,IAAA5V,MAAAlC,oBAAA,GAEA,IAAAgH,EAAAhH,oBAAA,GACA,IAAAyY,aAAAzY,oBAAA,IAEA,IAAA6X,aAAA7X,oBAAA,GAQA,IAAA0Y,gBAAA,SAAAtW,QAAqCC,UAAAqW,gBAAAtW,QACpC,SAAAsW,gBAAYpW,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,iBAAkBF,QAAME,KAI/BD,MAAAoW,qBAAuB,WACtB,IAAKpW,MAAKD,MAAM6P,cAAcyG,cAAe,CAC5C,IAAMC,aAAetW,MAAKD,MAAM6P,cAAc2G,kBAC9C9R,EAAEgF,IAAI6M,aAAaE,WAAY,SAAA5V,MAC9BA,KAAKyJ,iBAAiBrK,MAAKD,MAAM6P,cAAc6G,kBAAkB7V,WAPnEZ,MAAKwV,sBAYNW,gBAAAjX,UAAAwX,mBAAA,WACCzW,KAAKmW,uBACLnW,KAAKF,MAAM6P,cAAcyG,cAAgB,MAG1CF,gBAAAjX,UAAAyW,OAAA,eAAA3V,MAAAC,KACC,IAAIqW,aAAerW,KAAKF,MAAM6P,cAAc2G,kBAC5C,OACC5W,MAAAiW,cAAA,MAAApV,YACKP,KAAKM,YACTuV,OACCa,UACC,aACAL,aAAaM,aACb,MACAN,aAAaO,aACb,aACAP,aAAaQ,eAAiB,IAC9B,OAGDrS,EAAEgF,IAAI6M,aAAaE,WAAY,SAAC5V,MAChC,OAAOjB,MAAMiW,cACZM,aAAAX,YAEC3F,cAAe5P,MAAKD,MAAM6P,cAC1BmH,IAAKnW,KAAKqF,GACVrF,KAAMA,MAEPZ,MAAKD,MAAM6P,cAAcoH,sBAAsBpW,WAMrD,OAAAuV,gBAlDA,CAAqCb,aAAA1V,YAAxB5C,QAAAmZ,8fCVb,IAAAb,aAAA7X,oBAAA,GAaA,IAAAwZ,WAAA,SAAApX,QAAgCC,UAAAmX,WAAApX,QAC/B,SAAAoX,WAAYlX,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,WAAYF,QAAME,KACxBD,MAAKwV,sBAGNyB,WAAA/X,UAAAuW,sBAAA,WACC,OAAOxV,KAAKF,MAAM6P,cAAc8F,iBAAiBzV,KAAKF,MAAM4E,OAG7DsS,WAAA/X,UAAAyW,OAAA,WACC,OAAO1V,KAAKF,MAAMkW,UAEpB,OAAAgB,WAbA,CAAgC3B,aAAA1V,YAAnB5C,QAAAia,0rBChBb,IAAAtX,MAAAlC,oBAAA,GAEA,IAAAyZ,aAAAzZ,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAA6X,aAAA7X,oBAAA,GAYA,IAAA0Z,gBAAA,SAAAtX,QAAqCC,UAAAqX,gBAAAtX,QACpC,SAAAsX,gBAAYpX,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,iBAAkBF,QAAME,KAC9BD,MAAKwV,sBAGN2B,gBAAAjY,UAAAyW,OAAA,eAAA3V,MAAAC,KACC,IAAIqW,aAAerW,KAAKF,MAAM6P,cAAc2G,kBAC5C,OACC5W,MAAAiW,cAAA,MAAApV,YACKP,KAAKM,YACTuV,OACCa,UACC,aACAL,aAAaM,aACb,MACAN,aAAaO,aACb,aACAP,aAAaQ,eAAiB,IAC9B,OAIF7W,KAAKF,MAAM6P,cAAcwH,QACxB3S,EAAEgF,IAAI6M,aAAajN,WAAY,SAAA1E,MAC9B,GACC3E,MAAKD,MAAM6P,cAAcyG,gBACxBrW,MAAKD,MAAM6P,cAAcyH,+BAA+B1S,KAAKsB,IAC7D,CACD,GAAItB,KAAKoO,aAAe,KAAM,CAC7B,IACC,IAAMuE,WAAatX,MAAKD,MAAM6P,cAAc2H,cAAc5S,KAAKoO,YAC/DpO,KAAKC,OAAO,GAAGc,eAAe4R,YAE9B,IAAME,WAAaxX,MAAKD,MAAM6P,cAAc6H,cAAc9S,KAAKoO,YAC/DpO,KAAKoO,WAAW1G,aAAamL,YAE7BxX,MAAKD,MAAM6P,cAAcyH,+BAA+B1S,KAAKsB,IAAM,KAClE,MAAOyR,UAIV,GAAI/S,KAAKqO,aAAe,KAAM,CAC7B,IACC,IAAMsE,WAAatX,MAAKD,MAAM6P,cAAc2H,cAAc5S,KAAKqO,YAC/DvO,EAAEkT,KAAKhT,KAAKC,QAAQc,eAAe4R,YAEnC,IAAME,WAAaxX,MAAKD,MAAM6P,cAAc6H,cAAc9S,KAAKqO,YAC/DrO,KAAKqO,WAAW3G,aAAamL,YAE7BxX,MAAKD,MAAM6P,cAAcyH,+BAA+B1S,KAAKsB,IAAM,KAClE,MAAOyR,WAOX,IAAIE,cAAgB5X,MAAKD,MAAM6P,cAAciI,sBAAsBlT,MACnE,IAAKiT,cAAe,CACnB,MAAM,IAAIE,MAAM,+BAA+BnT,KAAKyB,WAGrD,OACCzG,MAAAiW,cAACsB,aAAAD,YAAWF,IAAKpS,KAAK0B,QAAS1B,KAAMA,KAAMiL,cAAe5P,MAAKD,MAAM6P,eACnEjQ,MAAMoY,aAAaH,eACnBI,WAAYhY,MAAKD,MAAMiY,kBAQhC,OAAAb,gBA1EA,CAAqC7B,aAAA1V,YAAxB5C,QAAAma,8fCjBb,IAAAc,aAAAxa,oBAAA,IAGA,IAAAya,gBAAA,SAAArY,QAAqCC,UAAAoY,gBAAArY,QAIpC,SAAAqY,gBAAYjN,OAAgBC,QAA5B,IAAAlL,MACCH,OAAA/B,KAAAmC,KAAMgL,OAAQC,SAAOjL,KACrBD,MAAKmY,QAAUlN,OACfjL,MAAKoY,QAAUlN,oBAGhBgN,gBAAAhZ,UAAAmZ,iBAAA,WACC,OACCrC,KAAM/V,KAAKkY,QAAUlY,KAAKgL,OAAShL,KAAKgL,OAAShL,KAAKkY,QACtDpC,IAAK9V,KAAKmY,QAAUnY,KAAKiL,OAASjL,KAAKiL,OAASjL,KAAKmY,QACrD7N,MAAOvI,KAAKO,IAAItC,KAAKkY,QAAUlY,KAAKgL,QACpCT,OAAQxI,KAAKO,IAAItC,KAAKmY,QAAUnY,KAAKiL,QACrCoN,MAAOrY,KAAKkY,QAAUlY,KAAKgL,OAAShL,KAAKgL,OAAShL,KAAKkY,QACvDI,OAAQtY,KAAKmY,QAAUnY,KAAKiL,OAASjL,KAAKiL,OAASjL,KAAKmY,UAI1DF,gBAAAhZ,UAAAsZ,gBAAA,SAAgB1X,EAAWC,EAAWuV,cACrC,IAAImC,EAAInC,aAAaQ,eAAiB,IACtC,IAAI4B,WAAazY,KAAKoY,mBAEtB,OACCvX,EAAI2X,EAAInC,aAAaM,aAAe8B,WAAW1C,MAC/ClV,EAAI2X,EAAInC,aAAaM,aAAe8B,WAAWJ,OAC/CvX,EAAI0X,EAAInC,aAAaO,aAAe6B,WAAW3C,KAC/ChV,EAAI0X,EAAInC,aAAaO,aAAe6B,WAAWH,QAGlD,OAAAL,gBAhCA,CAAqCD,aAAAjN,YAAxBhO,QAAAkb,8fCHb,IAAAD,aAAAxa,oBAAA,IAMA,IAAAkb,gBAAA,SAAA9Y,QAAqCC,UAAA6Y,gBAAA9Y,QAIpC,SAAA8Y,gBAAY1N,OAAgBC,OAAgB0E,eAA5C,IAAA5P,MACCH,OAAA/B,KAAAmC,KAAMgL,OAAQC,SAAOjL,KACrBD,MAAK4Y,MAAQ,MACbhJ,cAAciJ,sBAAsBjJ,cAAc2G,kBAAkBuC,oBACpE,IAAIC,cAAgBnJ,cAAc2G,kBAAkBuC,mBAGpDC,cAAgBA,cAAcC,OAAO,SAAAC,MACpC,OAAQrJ,cAAcsJ,cAAcD,QAGrCjZ,MAAKmZ,gBAAkBJ,cAActP,IAAI,SAACwP,MACzC,OACCG,MAAOH,KACPI,SAAUJ,KAAKnY,EACfwY,SAAUL,KAAKlY,kBAInB,OAAA4X,gBAvBA,CAAqCV,aAAAjN,YAAxBhO,QAAA2b,8fCNb,IAAAV,aAAAxa,oBAAA,IAGA,IAAA8b,iBAAA,SAAA1Z,QAAsCC,UAAAyZ,iBAAA1Z,QAIrC,SAAA0Z,iBAAYtO,OAAgBC,OAAgBoL,cAA5C,IAAAtW,MACCH,OAAA/B,KAAAmC,KAAMgL,OAAQC,SAAOjL,KACrBD,MAAKwZ,eAAiBlD,aAAaM,aACnC5W,MAAKyZ,eAAiBnD,aAAaO,0BAErC,OAAA0C,iBATA,CAAsCtB,aAAAjN,YAAzBhO,QAAAuc,ggBCDb,IAAAG,kBAAAjc,oBAAA,GAEA,IAAAkc,oBAAA,SAAA9Z,QAAmFC,UAAA6Z,oBAAA9Z,QAAnF,SAAA8Z,+EAEA,OAAAA,oBAFA,CAAmFD,kBAAA9Q,iBAA7D5L,QAAA2c,4sBCJtB,IAAAha,MAAAlC,oBAAA,GAEA,IAAA6X,aAAA7X,oBAAA,GAcA,IAAAmc,WAAA,SAAA/Z,QAAgCC,UAAA8Z,WAAA/Z,QAC/B,SAAA+Z,WAAY7Z,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,WAAYF,QAAME,KACxBD,MAAKwV,OACJtP,SAAU,oBAIZ0T,WAAA1a,UAAAoB,aAAA,WACC,MAAO,QAAUT,OAAAX,UAAMoB,aAAYxC,KAAAmC,OAAMA,KAAKuV,MAAMtP,SAAWjG,KAAKE,IAAI,cAAgB,KAGzFyZ,WAAA1a,UAAAyW,OAAA,eAAA3V,MAAAC,KACC,OACCN,MAAAiW,cAAA,MAAApV,YACKP,KAAKM,YACTsZ,aAAc,WACb7Z,MAAK8Z,UAAW5T,SAAU,QAE3B6T,aAAc,WACb/Z,MAAK8Z,UAAW5T,SAAU,SAC1B8T,YACU/Z,KAAKF,MAAM7B,KAAI2X,cACb5V,KAAKF,MAAMa,KAAKyF,YAIjC,OAAAuT,WA3BA,CAAgCtE,aAAA1V,YAAnB5C,QAAA4c,0rBChBb,IAAAja,MAAAlC,oBAAA,GAEA,IAAAwc,aAAAxc,oBAAA,IACA,IAAA6X,aAAA7X,oBAAA,GAWA,IAAAyc,iBAAA,SAAAra,QAAsCC,UAAAoa,iBAAAra,QACrC,SAAAqa,iBAAYna,cACXF,OAAA/B,KAAAmC,KAAM,mBAAoBF,QAAME,KAGjCia,iBAAAhb,UAAAoB,aAAA,WACC,OAAOT,OAAAX,UAAMoB,aAAYxC,KAAAmC,OAAMA,KAAKF,MAAMqZ,MAAM1G,GAAKzS,KAAKE,IAAI,QAAUF,KAAKE,IAAI,WAGlF+Z,iBAAAhb,UAAAyW,OAAA,WACC,IAAIvM,KAAOzJ,MAAAiW,cAACqE,aAAAL,YAAWhZ,KAAMX,KAAKF,MAAMqZ,MAAMlU,YAAahH,KAAM+B,KAAKF,MAAMqZ,MAAMlb,OAClF,IAAIuT,MAAQ9R,MAAAiW,cAAA,OAAK1V,UAAU,QAAQD,KAAKF,MAAMqZ,MAAM3H,OAEpD,OACC9R,MAAAiW,cAAA,MAAApV,YAASP,KAAKM,YACZN,KAAKF,MAAMqZ,MAAM1G,GAAKtJ,KAAOqI,MAC7BxR,KAAKF,MAAMqZ,MAAM1G,GAAKjB,MAAQrI,OAInC,OAAA8Q,iBApBA,CAAsC5E,aAAA1V,YAAzB5C,QAAAkd,ssBCdb,IAAAva,MAAAlC,oBAAA,GACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAA0c,yBAAA1c,oBAAA,IAEA,IAAA6X,aAAA7X,oBAAA,GAYA,IAAA2c,kBAAA,SAAAva,QAAuCC,UAAAsa,kBAAAva,QACtC,SAAAua,kBAAYra,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,mBAAoBF,QAAME,KAChCD,MAAKwV,sBAGN4E,kBAAAlb,UAAAmb,aAAA,SAAajR,MACZ,OAAOzJ,MAAAiW,cAACuE,yBAAAD,kBAAiBd,MAAOhQ,KAAM2N,IAAK3N,KAAKnD,MAGjDmU,kBAAAlb,UAAAyW,OAAA,WACC,OACChW,MAAAiW,cAAA,MAAApV,YAASP,KAAKM,YAAYuV,OAASwE,WAAYra,KAAKF,MAAMa,KAAKiR,SAC9DlS,MAAAiW,cAAA,OAAK1V,UAAWD,KAAKE,IAAI,YACxBR,MAAAiW,cAAA,OAAK1V,UAAWD,KAAKE,IAAI,WAAYF,KAAKF,MAAMa,KAAK1C,OAEtDyB,MAAAiW,cAAA,OAAK1V,UAAWD,KAAKE,IAAI,YACxBR,MAAAiW,cAAA,OAAK1V,UAAWD,KAAKE,IAAI,SACvBsE,EAAEgF,IAAIxJ,KAAKF,MAAMa,KAAK2Z,aAActa,KAAKoa,aAAaG,KAAKva,QAE7DN,MAAAiW,cAAA,OAAK1V,UAAWD,KAAKE,IAAI,UACvBsE,EAAEgF,IAAIxJ,KAAKF,MAAMa,KAAK6Z,cAAexa,KAAKoa,aAAaG,KAAKva,WAMnE,OAAAma,kBA3BA,CAAuC9E,aAAA1V,YAA1B5C,QAAAod,kgBCfb,IAAAV,kBAAAjc,oBAAA,GAEA,IAAAid,oBAAA,SAAA7a,QAAmFC,UAAA4a,oBAAA7a,QAAnF,SAAA6a,+EAEA,OAAAA,oBAFA,CAAmFhB,kBAAA9Q,iBAA7D5L,QAAA0d,4sBCJtB,IAAA/a,MAAAlC,oBAAA,GAEA,IAAAoV,aAAApV,oBAAA,GACA,IAAA8O,UAAA9O,oBAAA,GAGA,IAAAqJ,cAAArJ,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAA6X,aAAA7X,oBAAA,GAeA,IAAAkd,kBAAA,SAAA9a,QAAuCC,UAAA6a,kBAAA9a,QAgBtC,SAAA8a,kBAAY5a,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,mBAAoBF,QAAME,KA+BjCD,MAAA4a,eAAiB,SAACnU,MAAmB+M,OACpC,IACE/M,MAAMoU,WACN7a,MAAKD,MAAM6P,cAAcsJ,cAAclZ,MAAKD,MAAM4E,OACnD3E,MAAKD,MAAM4E,KAAKC,OAAO7C,OAAS,GAAK/B,MAAKD,MAAM6P,cAAckL,4BAC7D,CACD,IAAMxR,MAAQ,IAAIuJ,aAAAnO,WAAW1E,MAAKD,MAAM4E,KAAM3E,MAAKD,MAAM6P,cAAcmL,sBAAsBtU,QAC7F6C,MAAMhD,YAAY,MAClBtG,MAAKgb,cACLhb,MAAKD,MAAM4E,KAAKuP,SAAS5K,MAAOkK,OAChCxT,MAAKD,MAAMiY,WAAW1O,MAAO7C,SAqG/BzG,MAAAib,yCAA2C,SAACzH,OAE3C,IAAM0H,QAAUlb,MAAKmb,SAAS1R,IAAI,SAAA5I,MAAQ,OAAAA,KAAKua,mBAG/C,IAAIC,cACHH,QAAQI,OAAO,SAACC,cAAeC,cAAiB,OAAAD,cAAgBC,cAAc,IAC7EhI,OAASxT,MAAKD,MAAM4E,KAAKsO,OAAOlR,OAAS,IAG3C,IAAI0Z,UAAY,EAChB,MAAOA,UAAYzb,MAAKmb,SAASpZ,OAAQ,CACxC,GAAIsZ,cAAgBH,QAAQO,WAAa,EAAG,CAC3C,OACC5a,KAAMb,MAAKmb,SAASM,WACpBC,SAAUL,eAKZA,eAAiBH,QAAQO,WACzBA,cAIFzb,MAAA2b,uBAAyB,SAAClK,MAAO+B,OAChC,IAAKxT,MAAK4b,UAAUnK,MAAMxL,IAAK,CAE9B,OAGK,IAAAqE,GAAAtK,MAAAib,yCAAAzH,OAAE3S,KAAAyJ,GAAAzJ,KAAM6a,SAAApR,GAAAoR,SAEd,IAAMG,iBACLtR,MAAOvK,MAAK4b,UAAUnK,MAAMxL,IAAI6V,YAChCtR,OAAQxK,MAAK4b,UAAUnK,MAAMxL,IAAI8V,cAGlC,IAAMC,WAAanb,KAAKob,iBAAiBP,UAEzC,IAAMQ,kBACLpb,EAAGkb,WAAWlb,EAAI+a,gBAAgBtR,MAAQ,EAAIkH,MAAML,QACpDrQ,EAAGib,WAAWjb,EAAI8a,gBAAgBrR,OAAS,EAAIiH,MAAMJ,SAEtDrR,MAAK4b,UAAUnK,MAAMxL,IAAIkW,aACxB,QACA,wBAAwBD,iBAAiBpb,EAAC,OAAOob,iBAAiBnb,EAAC,SA1LpEf,MAAK4b,aACL5b,MAAKmb,YACLnb,MAAKwV,OACJtP,SAAU,OAGX,GAAInG,MAAM6P,cAAcwM,wBAAyB,CAChDpc,MAAKqc,YAAc,IAAIvV,cAAAwV,QAAYtc,MAAKD,MAAM6P,4BAIhD+K,kBAAAzb,UAAAqd,0BAAA,eAAAvc,MAAAC,KACCwE,EAAE+D,QAAQvI,KAAKF,MAAM4E,KAAKsO,OAAQ,SAACxB,MAAO+B,OACzCxT,MAAK2b,uBAAuBlK,MAAO+B,MAAQ,MAI7CmH,kBAAAzb,UAAAwX,mBAAA,WACC,GAAIzW,KAAKF,MAAM4E,KAAKsO,OAAOlR,OAAS,EAAG,CACtC1E,OAAOmf,sBAAsBvc,KAAKsc,0BAA0B/B,KAAKva,SAInE0a,kBAAAzb,UAAAud,kBAAA,WACC,GAAIxc,KAAKF,MAAM4E,KAAKsO,OAAOlR,OAAS,EAAG,CACtC1E,OAAOmf,sBAAsBvc,KAAKsc,0BAA0B/B,KAAKva,SAkBnE0a,kBAAAzb,UAAAiV,cAAA,SAAcuI,YAAd,IAAA1c,MAAAC,KACC,IAAIa,EAAIb,KAAKF,MAAM4E,KAAKC,OAAO8X,YAAY5b,EAC3C,IAAIC,EAAId,KAAKF,MAAM4E,KAAKC,OAAO8X,YAAY3b,EAE3C,OACCpB,MAAAiW,cAAA,KAAGmB,IAAK,SAAW9W,KAAKF,MAAM4E,KAAKC,OAAO8X,YAAYzW,IACrDtG,MAAAiW,cAAA,UACC+G,GAAI7b,EACJ8b,GAAI7b,EACJrC,EAAG,EACHwB,UACC,SACAD,KAAKE,IAAI,YACRF,KAAKF,MAAM4E,KAAKC,OAAO8X,YAAY5X,aAAe7E,KAAKE,IAAI,oBAAsB,MAGpFR,MAAAiW,cAAA,UACCmE,aAAc,WACb/Z,MAAK8Z,UAAW5T,SAAU,SAE3B2T,aAAc,WACb7Z,MAAK8Z,UAAW5T,SAAU,QAC1B2W,UACQ5c,KAAKF,MAAM4E,KAAKC,OAAO8X,YAAYzW,GAAE6W,cACjC7c,KAAKF,MAAM4E,KAAKsB,GAC7B0W,GAAI7b,EACJ8b,GAAI7b,EACJrC,EAAG,GACHqe,QAAS,EACT7c,UAAW,SAAWD,KAAKE,IAAI,eAMnCwa,kBAAAzb,UAAA8d,cAAA,SAAcvL,OAAd,IAAAzR,MAAAC,KACC,IAAMmX,OAASnX,KAAKF,MAAM6P,cAAcwH,OACxC,OACCzX,MAAAiW,cAAA,iBACCmB,IAAKtF,MAAMxL,GACX/F,UAAWD,KAAKE,IAAI,WACpBoK,MAAO6M,OAAO0E,YACdtR,OAAQ4M,OAAO2E,cAEfpc,MAAAiW,cAAA,OAAKqH,IAAK,SAAAA,KAAO,OAACjd,MAAK4b,UAAUnK,MAAMxL,IAAMgX,MAC3Chd,KAAKF,MAAM6P,cACVsN,mBAAmBzL,OACnB0L,oBAAoBld,KAAKF,MAAM6P,cAAe6B,UAMpDkJ,kBAAAzb,UAAAke,aAAA,SAAavc,KAAcJ,WAAiBwF,IAA5C,IAAAjG,MAAAC,KACC,IAAIF,MAAQE,KAAKF,MAEjB,IAAIsd,OAAS1d,MAAMoY,aACjBhY,MAAM6P,cAAc0N,kBAAkBrd,KAAKF,MAAM4E,MAA6B4Y,oBAC9Etd,KAAKF,MAAM4E,KACX1E,KACAA,KAAKuV,MAAMtP,UAAYjG,KAAKF,MAAM4E,KAAKG,aACvCjE,OAGAoc,IAAK,SAAAA,KAAO,OAAAA,KAAOjd,MAAKmb,SAASla,KAAKgc,QAIxC,IAAIO,IAAM7d,MAAMoY,aAAasF,OAAM7c,YAC/BC,YACHgd,cAAe,QACf1D,aAAc,WACb/Z,MAAK8Z,UAAW5T,SAAU,SAE3B2T,aAAc,WACb7Z,MAAK8Z,UAAW5T,SAAU,QAE3B+W,IAAK,KACLH,cAAe7c,KAAKF,MAAM4E,KAAK0B,QAC/BqX,cAAezd,KAAKuV,MAAMtP,SAAW,GAAM,EAC3CyX,YAAa,GACbC,cAAe,WACd,IAAK5d,MAAKD,MAAM6P,cAAcsJ,cAAclZ,MAAKD,MAAM4E,MAAO,CAC7D8B,MAAMoX,iBACN7d,MAAKD,MAAM4E,KAAKa,cAKnB,OACC7F,MAAAiW,cAAA,KAAGmB,IAAK,QAAU9Q,IAChBoX,OACAG,MA6DJ7C,kBAAAzb,UAAA4e,yBAAA,WACO,IAAAxT,GAAArK,KAAAF,MAAE6P,cAAAtF,GAAAsF,cAAejL,KAAA2F,GAAA3F,KAEvB,IAAKiL,cAAcwM,wBAAyB,CAC3C,OAAO,MAGR,GAAIzX,KAAKC,OAAO7C,SAAW,EAAG,CAC7B,OAAO,MAGR,GAAI4C,KAAKoO,aAAe,MAAQpO,KAAKqO,aAAe,KAAM,CACzD,OAAO,MAGR,OAAO,MAGR2H,kBAAAzb,UAAAyW,OAAA,eAAA3V,MAAAC,KACS,IAAA2P,cAAA3P,KAAAF,MAAA6P,cACR,IAAKA,cAAcyG,cAAe,CACjC,OAAO,KAIR,IAAIzR,OAAS3E,KAAKF,MAAM4E,KAAKC,OAC7B,IAAImZ,SAEJ,GAAI9d,KAAK6d,2BAA4B,CAEpC,IAAME,iBAAmB/d,KAAKoc,YAAYvM,oBAAoBrL,EAAEwZ,MAAMrZ,QAASH,EAAEkT,KAAK/S,SAEtF,IAAMqM,cAAgBrB,cAAcsO,mBAGpC,IAAMC,UAAYle,KAAKoc,YAAY9L,4BAA4BU,cAAe+M,kBAE9E,GAAIG,UAAW,CACN,IAAArN,MAAAqN,UAAArN,MAAOC,IAAAoN,UAAApN,IAAKH,YAAAuN,UAAAvN,YAAaC,UAAAsN,UAAAtN,UAGjC,IAAMuN,eAAiBne,KAAKoc,YAAYrL,qBACvCC,cACAH,MACAC,IACAH,YACAC,WAGDkN,MAAM9c,KAELhB,KAAKmd,aACJ7Q,UAAAvF,QAAQmB,oBAAoBiW,iBAE3BC,YAAa,SAAA5X,OACZzG,MAAK4a,eAAenU,MAAO,KAG7B,OAQJ,GAAIsX,MAAMhc,SAAW,EAAG,CACvB,GAAI6C,OAAO7C,SAAW,EAAG,CACxB,IAAIiG,aAAehG,KAAKO,IAAIqC,OAAO,GAAG9D,EAAI8D,OAAO,GAAG9D,GAAKkB,KAAKO,IAAIqC,OAAO,GAAG7D,EAAI6D,OAAO,GAAG7D,GAC1F,IAAIud,KAAOtW,aAAe,IAAM,IAIhC,IAAIuW,OAAS,GACb,GAAIvc,KAAKO,IAAIqC,OAAO,GAAG0Z,MAAQ1Z,OAAO,GAAG0Z,OAAS,GAAI,CACrDC,OAAS,EAGV,IAAIC,UAAY5Z,OAAO,GACvB,IAAI6Z,WAAa7Z,OAAO,GAIxB,GAAI4Z,UAAUF,MAAQG,WAAWH,MAAO,CACvCE,UAAY5Z,OAAO,GACnB6Z,WAAa7Z,OAAO,GAGrBmZ,MAAM9c,KACLhB,KAAKmd,aACJ7Q,UAAAvF,QAAQc,kBAAkB0W,UAAWC,WAAYxe,KAAKF,MAAM4E,KAAKmN,YAEhEuM,YAAa,SAAA5X,OACZzG,MAAK4a,eAAenU,MAAO,KAG7B,MAKF,GAAIxG,KAAKF,MAAM4E,KAAKqO,aAAe,KAAM,CACxC+K,MAAM9c,KAAKhB,KAAKkU,cAAc,SAEzB,sBAEG/Q,GACR2a,MAAM9c,KACLyd,OAAKtB,aACJ7Q,UAAAvF,QAAQW,iBAAiB/C,OAAOxB,GAAIwB,OAAOxB,EAAI,KAE9C0Z,cAAe4B,OAAK3e,MAAM4E,KAAKsB,GAC/B0Y,aAAcvb,EACdib,YAAa,SAAC5X,OACbzG,MAAK4a,eAAenU,MAAOrD,EAAI,KAGjCA,qBAXH,IAAK,IAAIA,EAAI,EAAGA,EAAIwB,OAAO7C,OAAS,EAAGqB,IAAG,SAAjCA,GAiBT,IAAK,IAAIzF,EAAI,EAAGA,EAAIiH,OAAO7C,OAAS,EAAGpE,IAAK,CAC3CogB,MAAM9c,KAAKhB,KAAKkU,cAAcxW,IAG/B,GAAIsC,KAAKF,MAAM4E,KAAKqO,aAAe,KAAM,CACxC+K,MAAM9c,KAAKhB,KAAKkU,cAAcvP,OAAO7C,OAAS,MAKjD9B,KAAKkb,YACL,OACCxb,MAAAiW,cAAA,IAAApV,YAAOP,KAAKM,YACVwd,MACAtZ,EAAEgF,IAAIxJ,KAAKF,MAAM4E,KAAKsO,OAAQ,SAAA2L,YAC9B,OAAO5e,MAAKgd,cAAc4B,gBAhWhBjE,kBAAAkE,cACbhN,MAAO,QACPtH,MAAO,EACP5F,KAAM,KACNU,OAAQ,KACRyZ,OAAQ,MACRlP,cAAe,MA+VjB,OAAA+K,kBAtWA,CAAuCrF,aAAA1V,YAA1B5C,QAAA2d,kgBCxBb,IAAAoE,mBAAAthB,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAAuhB,YAAAvhB,oBAAA,GACA,IAAA8O,UAAA9O,oBAAA,GAMA,IAAAwhB,iBAAA,SAAApf,QAAsCC,UAAAmf,iBAAApf,QAKrC,SAAAof,iBAAY/gB,KAA2B2T,OAA3B,GAAA3T,YAAA,GAAAA,KAAA,WAA2B,GAAA2T,aAAA,GAAAA,MAAA,iBAAvC,IAAA7R,MACCH,OAAA/B,KAAAmC,KAAM,YAAUA,KAChBD,MAAK9B,KAAOA,KACZ8B,MAAK6R,MAAQA,mBAGdoN,iBAAA/f,UAAAggB,UAAA,SAAUzN,OACT,OAAOxR,KAAK4J,QAAQ,IAAIkV,mBAAAvM,iBAAiB,KAAMjG,UAAAvF,QAAQC,MAAOwK,SAG/DwN,iBAAA/f,UAAAigB,WAAA,SAAW1N,OACV,OAAOxR,KAAK4J,QAAQ,IAAIkV,mBAAAvM,iBAAiB,MAAOjG,UAAAvF,QAAQC,MAAOwK,SAGhEwN,iBAAA/f,UAAAiG,YAAA,SAAYnG,OAAQqG,QACnBxF,OAAAX,UAAMiG,YAAWrH,KAAAmC,KAACjB,OAAQqG,QAC1BpF,KAAK/B,KAAOc,OAAOd,KACnB+B,KAAK4R,MAAQ7S,OAAO6S,OAGrBoN,iBAAA/f,UAAAoG,UAAA,WACC,OAAOb,EAAEc,MAAM1F,OAAAX,UAAMoG,UAASxH,KAAAmC,OAC7B/B,KAAM+B,KAAK/B,KACX2T,MAAO5R,KAAK4R,SAIdoN,iBAAA/f,UAAAqb,WAAA,WACC,OAAO9V,EAAEuU,OAAO/Y,KAAK+I,MAAO,SAAAoW,WAC3B,OAAOA,UAAU1M,MAInBuM,iBAAA/f,UAAAub,YAAA,WACC,OAAOhW,EAAEuU,OAAO/Y,KAAK+I,MAAO,SAAAoW,WAC3B,OAAQA,UAAU1M,MAGrB,OAAAuM,iBA3CA,CAAsCD,YAAAnW,WAAzB7L,QAAAiiB,ssBCVb,IAAAtf,MAAAlC,oBAAA,GAEA,IAAA6X,aAAA7X,oBAAA,GAMA,IAAA4hB,mBAAA,SAAAxf,QAAwCC,UAAAuf,mBAAAxf,QACvC,SAAAwf,mBAAYtf,cACXF,OAAA/B,KAAAmC,KAAM,oBAAqBF,QAAME,KAGlCof,mBAAAngB,UAAAyW,OAAA,WACC,OAAOhW,MAAAiW,cAAA,MAAApV,YAASP,KAAKM,YAAaN,KAAKF,MAAMqZ,MAAM3H,QAErD,OAAA4N,mBARA,CAAwC/J,aAAA1V,YAA3B5C,QAAAqiB,ogBCNb,IAAA3F,kBAAAjc,oBAAA,GAEA,IAAA6hB,qBAAA,SAAAzf,QAAsFC,UAAAwf,qBAAAzf,QAAtF,SAAAyf,gFAEA,OAAAA,qBAFA,CAAsF5F,kBAAA9Q,iBAAhE5L,QAAAsiB,wgBCJtB,IAAA3f,MAAAlC,oBAAA,GAEA,IAAA8hB,uBAAA9hB,oBAAA,IACA,IAAAkU,oBAAAlU,oBAAA,IACA,IAAA+hB,qBAAA/hB,oBAAA,IAKA,IAAAgiB,oBAAA,SAAA5f,QAAyCC,UAAA2f,oBAAA5f,QACxC,SAAA4f,6BACC5f,OAAA/B,KAAAmC,KAAM,YAAUA,KAGjBwf,oBAAAvgB,UAAAie,oBAAA,SAAoBvN,cAA8B6B,OACjD,OAAO9R,MAAAiW,cAAC4J,qBAAAH,oBAAmBjG,MAAO3H,SAGnCgO,oBAAAvgB,UAAA0K,eAAA,SAAe8V,eACd,OAAO,IAAI/N,oBAAAJ,mBAEb,OAAAkO,oBAZA,CAAyCF,uBAAAD,sBAA5BtiB,QAAAyiB,sgBCPb,IAAA/F,kBAAAjc,oBAAA,GAEA,IAAAkiB,oBAAA,SAAA9f,QAAmFC,UAAA6f,oBAAA9f,QAAnF,SAAA8f,+EAAuG,OAAAA,oBAAvG,CAAmFjG,kBAAA9Q,iBAA7D5L,QAAA2iB,sgBCJtB,IAAAZ,mBAAAthB,oBAAA,IACA,IAAAmiB,sBAAAniB,oBAAA,IAEA,IAAAoiB,mBAAA,SAAAhgB,QAAwCC,UAAA+f,mBAAAhgB,QACvC,SAAAggB,4BACChgB,OAAA/B,KAAAmC,KAAM,YAAUA,KAGjB4f,mBAAA3gB,UAAA0K,eAAA,SAAe8V,eACd,OAAO,IAAIX,mBAAAvM,iBAAiB,KAAM,YAEpC,OAAAqN,mBARA,CAAwCD,sBAAAD,qBAA3B3iB,QAAA6iB,0sBCHb,IAAA9Z,aAAAtI,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAAiU,YAAAjU,oBAAA,IACA,IAAAuhB,YAAAvhB,oBAAA,GACA,IAAA6U,YAAA7U,oBAAA,IAEA,IAAAoV,aAAApV,oBAAA,GAoBA,IAAAqiB,aAAA,SAAAjgB,QAAkCC,UAAAggB,aAAAjgB,QAYjC,SAAAigB,eAAA,IAAA9f,MACCH,OAAA/B,KAAAmC,OAAOA,KAEPD,MAAKwL,SACLxL,MAAK+f,SAEL/f,MAAKoR,QAAU,EACfpR,MAAKqR,QAAU,EACfrR,MAAKggB,KAAO,IACZhgB,MAAKigB,SAAW,MAChBjgB,MAAKkgB,SAAW,eAGjBJ,aAAA5gB,UAAAihB,YAAA,SAAYhU,MAAA,GAAAA,YAAA,GAAAA,KAAA,EACXlM,KAAKigB,SAAW/T,KAChBlM,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAAS4Z,YAAa,CACzB5Z,SAAS4Z,YAAW5f,YAAMiG,OAAO0F,KAAMA,YAK1C2T,aAAA5gB,UAAAmhB,gBAAA,SAAgBC,KACf,GAAIrgB,KAAKigB,WAAa,EAAG,CACxB,OAAOI,IAER,OAAOrgB,KAAKigB,SAAWle,KAAKqO,OAAOiQ,IAAMrgB,KAAKigB,SAAW,GAAKjgB,KAAKigB,WAGpEJ,aAAA5gB,UAAAqhB,mBAAA,SAAmBvhB,OAAa4Q,eAAhC,IAAA5P,MAAAC,KACCA,KAAKkF,YAAYnG,OAAQ4Q,eAEzB3P,KAAKmR,QAAUpS,OAAOoS,QACtBnR,KAAKoR,QAAUrS,OAAOqS,QACtBpR,KAAK+f,KAAOhhB,OAAOghB,KACnB/f,KAAKigB,SAAWlhB,OAAOkhB,SAGvBzb,EAAE+D,QAAQxJ,OAAO+gB,MAAO,SAACnf,MACxB,IAAI4f,OAAS5Q,cAAc6Q,eAAe7f,KAAKoF,MAAM4D,eAAehJ,MACpE4f,OAAOra,UAAUnG,OACjBwgB,OAAOrb,YAAYvE,KAAMgP,eACzB5P,MAAK0gB,QAAQF,UAId/b,EAAE+D,QAAQxJ,OAAOwM,MAAO,SAAC7G,MACxB,IAAIgc,OAAS/Q,cAAcgR,eAAejc,KAAKqB,MAAM4D,iBACrD+W,OAAOxa,UAAUnG,OACjB2gB,OAAOxb,YAAYR,KAAMiL,eACzB5P,MAAK+L,QAAQ4U,WAIfb,aAAA5gB,UAAA2hB,iBAAA,WACC,OAAOpc,EAAEc,MAAMtF,KAAKqF,aACnB8L,QAASnR,KAAKmR,QACdC,QAASpR,KAAKoR,QACd2O,KAAM/f,KAAK+f,KACXE,SAAUjgB,KAAKigB,SACf1U,MAAO/G,EAAEgF,IAAIxJ,KAAKuL,MAAO,SAAA7G,MACxB,OAAOA,KAAKW,cAEbya,MAAOtb,EAAEgF,IAAIxJ,KAAK8f,MAAO,SAAAnf,MACxB,OAAOA,KAAK0E,iBAKfwa,aAAA5gB,UAAA4hB,eAAA,SAAepJ,QAAA,GAAAA,cAAA,GAAAA,OAAA,KACdjT,EAAE+D,QAAQvI,KAAK6Y,mBAAoB,SAAAtR,SAClC,GAAIkQ,QAAUA,OAAOrR,UAAYmB,QAAQnB,QAAS,CACjD,OAEDmB,QAAQlB,YAAY,UAItBwZ,aAAA5gB,UAAA4Z,iBAAA,WAAiB,IAAAiI,eAAA,IAAAC,GAAA,EAAAA,GAAAC,UAAAlf,OAAAif,KAA4B,CAA5BD,QAAAC,IAAAC,UAAAD,IAChB,IAAKE,MAAMC,QAAQJ,SAAU,CAC5BA,SAAWA,SAEZ,IAAIK,SAGJA,MAAQA,MAAM5f,OACbiD,EAAE4c,QAAQphB,KAAK8f,MAAO,SAAAnf,MACrB,OAAOA,KAAKiE,yBAKduc,MAAQA,MAAM5f,OACbiD,EAAE4c,QAAQphB,KAAKuL,MAAO,SAAA7G,MACrB,OAAOA,KAAKE,yBAKduc,MAAQA,MAAM5f,OACbiD,EAAE4c,QAAQphB,KAAKuL,MAAO,SAAA7G,MACrB,OAAOF,EAAE4c,QAAQ1c,KAAKC,OAAQ,SAAA0E,OAC7B,OAAOA,MAAMzE,2BAKhBuc,MAAQ3c,EAAE6c,KAAKF,OAEf,GAAIL,QAAQhf,OAAS,EAAG,CACvBqf,MAAQ3c,EAAEuU,OAAOvU,EAAE6c,KAAKF,OAAQ,SAACnI,MAChC,GAAIxU,EAAE8c,SAASR,QAAS,SAAW9H,gBAAgB+F,YAAAnW,UAAW,CAC7D,OAAO,KAER,GAAIpE,EAAE8c,SAASR,QAAS,SAAW9H,gBAAgBvH,YAAAW,UAAW,CAC7D,OAAO,KAER,GAAI5N,EAAE8c,SAASR,QAAS,SAAW9H,gBAAgB3G,YAAAhH,UAAW,CAC7D,OAAO,KAER,GAAI7G,EAAE8c,SAASR,QAAS,UAAY9H,gBAAgBpG,aAAAnO,WAAY,CAC/D,OAAO,KAER,OAAO,QAIT,OAAO0c,OAGRtB,aAAA5gB,UAAAsiB,aAAA,SAAaxB,MACZ/f,KAAK+f,KAAOA,KAEZ/f,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASib,YAAa,CACzBjb,SAASib,YAAWjhB,YAAMiG,OAAOuZ,KAAMA,YAK1CF,aAAA5gB,UAAAwiB,UAAA,SAAUtQ,QAAiBC,SAC1BpR,KAAKmR,QAAUA,QACfnR,KAAKoR,QAAUA,QACfpR,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASmb,cAAe,CAC3Bnb,SAASmb,cAAanhB,YAAMiG,OAAO2K,QAASA,QAASC,QAASA,eAKjEyO,aAAA5gB,UAAA0iB,WAAA,SAAWxQ,SAAX,IAAApR,MAAAC,KACCA,KAAKmR,QAAUA,QACfnR,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASmb,cAAe,CAC3Bnb,SAASmb,cAAanhB,YAAMiG,OAAO2K,QAASA,QAASC,QAASrR,MAAKqR,eAItEyO,aAAA5gB,UAAA2iB,WAAA,SAAWxQ,SAAX,IAAArR,MAAAC,KACCA,KAAKoR,QAAUA,QAEfpR,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASmb,cAAe,CAC3Bnb,SAASmb,cAAanhB,YAAMiG,OAAO2K,QAASpR,MAAKoR,QAASC,QAASrR,MAAKqR,eAK3EyO,aAAA5gB,UAAA2X,WAAA,WACC,OAAO5W,KAAKoR,SAGbyO,aAAA5gB,UAAA0X,WAAA,WACC,OAAO3W,KAAKmR,SAGb0O,aAAA5gB,UAAA4X,aAAA,WACC,OAAO7W,KAAK+f,MAGbF,aAAA5gB,UAAAwM,QAAA,SAAQ9K,MACP,GAAIA,gBAAgBoe,YAAAnW,UAAW,CAC9B,OAAOjI,KAER,IAAKX,KAAK8f,MAAMnf,MAAO,CACtB,OAAO,KAER,OAAOX,KAAK8f,MAAMnf,OAGnBkf,aAAA5gB,UAAA+F,QAAA,SAAQN,MACP,GAAIA,gBAAgB+M,YAAAW,UAAW,CAC9B,OAAO1N,KAER,IAAK1E,KAAKuL,MAAM7G,MAAO,CACtB,OAAO,KAER,OAAO1E,KAAKuL,MAAM7G,OAGnBmb,aAAA5gB,UAAA4iB,OAAA,eAAA9hB,MAAAC,KAAO,IAAA8hB,cAAA,IAAAf,GAAA,EAAAA,GAAAC,UAAAlf,OAAAif,KAAsB,CAAtBe,OAAAf,IAAAC,UAAAD,IACNvc,EAAE+D,QAAQuZ,OAAQ,SAAA3I,OACjB,GAAIA,iBAAiB1H,YAAAW,UAAW,CAC/BrS,MAAK+L,QAAQqN,YACP,GAAIA,iBAAiB4F,YAAAnW,UAAW,CACtC7I,MAAK0gB,QAAQtH,UAGf,OAAO2I,QAGRjC,aAAA5gB,UAAA6M,QAAA,SAAQpH,MAAR,IAAA3E,MAAAC,KACC0E,KAAKsI,aACJtG,cAAe,WACd3G,MAAK8L,WAAWnH,SAGlB1E,KAAKuL,MAAM7G,KAAK0B,SAAW1B,KAC3B1E,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASwb,aAAc,CAC1Bxb,SAASwb,aAAYxhB,YAAMiG,OAAO9B,KAAMA,KAAMsd,UAAW,WAG3D,OAAOtd,MAGRmb,aAAA5gB,UAAAwhB,QAAA,SAAQ9f,MAAR,IAAAZ,MAAAC,KACCW,KAAKqM,aACJtG,cAAe,WACd3G,MAAKkiB,WAAWthB,SAGlBX,KAAK8f,MAAMnf,KAAKyF,SAAWzF,KAC3BX,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAAS2b,aAAc,CAC1B3b,SAAS2b,aAAY3hB,YAAMiG,OAAO7F,KAAMA,KAAMqhB,UAAW,WAG3D,OAAOrhB,MAGRkf,aAAA5gB,UAAA4M,WAAA,SAAWnH,MACVA,KAAO1E,KAAKgF,QAAQN,aACb1E,KAAKuL,MAAM7G,KAAK0B,SACvBpG,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAASwb,aAAc,CAC1Bxb,SAASwb,aAAYxhB,YAAMiG,OAAO9B,KAAMA,KAAmBsd,UAAW,aAKzEnC,aAAA5gB,UAAAgjB,WAAA,SAAWthB,MACVA,KAAOX,KAAKyL,QAAQ9K,aACbX,KAAK8f,MAAMnf,KAAKyF,SACvBpG,KAAKsG,iBAAiB,SAACC,SAAUC,OAChC,GAAID,SAAS2b,aAAc,CAC1B3b,SAAS2b,aAAY3hB,YAAMiG,OAAO7F,KAAMA,KAAmBqhB,UAAW,aAKzEnC,aAAA5gB,UAAAmK,SAAA,WACC,OAAOpJ,KAAKuL,OAGbsU,aAAA5gB,UAAAsX,SAAA,WACC,OAAOvW,KAAK8f,OAEd,OAAAD,aAxRA,CAAkC/Z,aAAAa,YAArB5J,QAAA8iB,gOCvBbsC,SAAA3kB,oBAAA,IACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,IACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAGA2kB,SAAA3kB,oBAAA,IACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,IACA2kB,SAAA3kB,oBAAA,IACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,IAEA2kB,SAAA3kB,oBAAA,KACA2kB,SAAA3kB,oBAAA,yqBCpDA,IAAAkC,MAAAlC,oBAAA,GAEA,IAAAgH,EAAAhH,oBAAA,GACA,IAAA4kB,kBAAA5kB,oBAAA,IACA,IAAA6kB,kBAAA7kB,oBAAA,IACA,IAAA8O,UAAA9O,oBAAA,GAEA,IAAA8kB,mBAAA9kB,oBAAA,IACA,IAAA+kB,kBAAA/kB,oBAAA,IACA,IAAAglB,kBAAAhlB,oBAAA,IACA,IAAAuhB,YAAAvhB,oBAAA,GACA,IAAAoV,aAAApV,oBAAA,GACA,IAAA6U,YAAA7U,oBAAA,IAKA,IAAA6X,aAAA7X,oBAAA,GA+BA,IAAAilB,cAAA,SAAA7iB,QAAmCC,UAAA4iB,cAAA7iB,QAclC,SAAA6iB,cAAY3iB,OAAZ,IAAAC,MACCH,OAAA/B,KAAAmC,KAAM,cAAeF,QAAME,KAH5BD,MAAA2iB,eAA4D,KAI3D3iB,MAAK4iB,YAAc5iB,MAAK4iB,YAAYpI,KAAKxa,OACzCA,MAAK6iB,UAAY7iB,MAAK6iB,UAAUrI,KAAKxa,OACrCA,MAAKwV,OACJsN,OAAQ,KACRC,SAAU,MACVC,cAAe,MACfC,eAAgB,KAChBC,sBAAuB,KACvBzb,SAAU,mBAIZib,cAAAxjB,UAAAikB,qBAAA,WACCljB,KAAKF,MAAM6P,cAAc5C,eAAe/M,KAAKuV,MAAM0N,uBACnDjjB,KAAKF,MAAM6P,cAAcwT,UAAU,MACnC/lB,OAAOgmB,oBAAoB,QAASpjB,KAAK0iB,gBACzCtlB,OAAOgmB,oBAAoB,UAAWpjB,KAAK4iB,WAC3CxlB,OAAOgmB,oBAAoB,YAAapjB,KAAK2iB,cAG9CF,cAAAxjB,UAAAokB,0BAAA,SAA0BC,WAA1B,IAAAvjB,MAAAC,KACC,GAAIA,KAAKF,MAAM6P,gBAAkB2T,UAAU3T,cAAe,CACzD3P,KAAKF,MAAM6P,cAAc5C,eAAe/M,KAAKuV,MAAM0N,uBACnD,IAAMA,sBAAwBK,UAAU3T,cAAc3C,aACrDuW,cAAe,WAAM,OAAAxjB,MAAKgb,iBAE3B/a,KAAK6Z,UAAWoJ,sBAAqBA,0BAIvCR,cAAAxjB,UAAAukB,oBAAA,SAAoBF,WACnB,GAAItjB,KAAKF,MAAM6P,cAAc0G,aAAarQ,KAAOsd,UAAU3T,cAAc0G,aAAarQ,GAAI,CACzFhG,KAAK6Z,UAAWkJ,cAAe,QAC/BO,UAAU3T,cAAc0G,aAAa2J,SAAW,KAEjD,IAAKsD,UAAU3T,cAAc0G,aAAa2J,SAAU,CACnDhgB,KAAK6Z,UAAWkJ,cAAe,QAC/BO,UAAU3T,cAAc0G,aAAa2J,SAAW,OAIlDyC,cAAAxjB,UAAAwX,mBAAA,WACC,IAAKzW,KAAKuV,MAAMwN,cAAe,CAC9B/iB,KAAK6Z,UACJkJ,cAAe,SAKlBN,cAAAxjB,UAAAud,kBAAA,eAAAzc,MAAAC,KACCA,KAAK0iB,eAAiB1iB,KAAKyjB,QAAQlJ,KAAKva,MAGxCA,KAAK6Z,UACJrS,SAAUA,SACVub,cAAe,KACfE,sBAAuBjjB,KAAKF,MAAM6P,cAAc3C,aAC/CuW,cAAe,WACdxjB,MAAKgb,mBAKR3d,OAAOsmB,iBAAiB,QAAS1jB,KAAK0iB,eAAgB,OAGtD,GAAI,KAAiC,CACpCtlB,OAAOumB,UAOTlB,cAAAxjB,UAAA2kB,gBAAA,SAAgBpd,OACf,IAAI0M,OAAS1M,MAAM0M,OACnB,IAAImD,aAAerW,KAAKF,MAAM6P,cAAc0G,aAG5C,IAAI9O,QAAU+E,UAAAvF,QAAQH,QAAQsM,OAAQ,oBACtC,GAAI3L,QAAS,CACZ,IAAIsc,YAAcvX,UAAAvF,QAAQH,QAAQsM,OAAQ,sBAC1C,OACCiG,MAAO9C,aACL5K,QAAQoY,YAAYC,aAAa,gBACjC7Z,QAAQ1C,QAAQuc,aAAa,cAC/Bvc,QAASA,SAKXA,QAAU+E,UAAAvF,QAAQH,QAAQsM,OAAQ,mBAClC,GAAI3L,QAAS,CACZ,OACC4R,MAAO9C,aACLrR,QAAQuC,QAAQuc,aAAa,gBAC7BpQ,cAAcnM,QAAQuc,aAAa,YACrCvc,QAASA,SAKXA,QAAU+E,UAAAvF,QAAQH,QAAQsM,OAAQ,iBAClC,GAAI3L,QAAS,CACZ,OACC4R,MAAO9C,aAAarR,QAAQuC,QAAQuc,aAAa,gBACjDvc,QAASA,SAKXA,QAAU+E,UAAAvF,QAAQH,QAAQsM,OAAQ,sBAClC,GAAI3L,QAAS,CACZ,OACC4R,MAAO9C,aAAa5K,QAAQlE,QAAQuc,aAAa,gBACjDvc,QAASA,SAIX,OAAO,MAGRkb,cAAAxjB,UAAA8kB,WAAA,WACC,GAAI/jB,KAAKuV,MAAMsN,QAAU7iB,KAAKF,MAAMkkB,kBAAmB,CACtDhkB,KAAKF,MAAMkkB,kBAAkBhkB,KAAKuV,MAAMsN,UAI1CJ,cAAAxjB,UAAAglB,iBAAA,SAAiBC,iBAChB,GAAIlkB,KAAKF,MAAMqkB,sBAAwBD,gBAAiB,CACvDlkB,KAAKF,MAAMqkB,oBAAoBnkB,KAAKuV,MAAMsN,QAE3C7iB,KAAK6Z,UAAWgJ,OAAQ,QAGzBJ,cAAAxjB,UAAAmlB,kBAAA,SAAkBvB,QACjB,IAAIhJ,SAAW,KACf,GAAI7Z,KAAKF,MAAMukB,oBAAqB,CACnCxK,SAAW7Z,KAAKF,MAAMukB,oBAAoBxB,QAE3C,GAAIhJ,SAAU,CACb7Z,KAAK6Z,UAAWgJ,OAAQA,WAI1BJ,cAAAxjB,UAAA0jB,YAAA,SAAYnc,OAAZ,IAAAzG,MAAAC,KACC,IAAI2P,cAAgB3P,KAAKF,MAAM6P,cAC/B,IAAI0G,aAAe1G,cAAc2G,kBAEjC,GAAItW,KAAKuV,MAAMsN,kBAAkBL,kBAAAvK,gBAAiB,CACjD,IAAIqM,SAAW3U,cAAc4U,iBAAiB/d,MAAMge,QAAShe,MAAMie,SAEnEjgB,EAAE+D,QAAQ8N,aAAaE,WAAY,SAAA5V,MAClC,GAAKZ,MAAKwV,MAAMsN,OAA2BtK,gBAAgB5X,KAAKE,EAAGF,KAAKG,EAAGuV,cAAe,CACzF1V,KAAK0F,YAAY,SAInB7B,EAAE+D,QAAQ8N,aAAajN,WAAY,SAAA1E,MAClC,IAAIggB,YAAc,KAClBlgB,EAAE+D,QAAQ7D,KAAKC,OAAQ,SAAA0E,OACtB,GAAKtJ,MAAKwV,MAAMsN,OAA2BtK,gBAAgBlP,MAAMxI,EAAGwI,MAAMvI,EAAGuV,cAAe,CAC3FhN,MAAMhD,YAAY,UACZ,CACNqe,YAAc,SAIhB,GAAIA,YAAa,CAChBhgB,KAAK2B,YAAY,SAInBrG,KAAKuV,MAAMsN,OAAO3K,QAAUoM,SAASzjB,EACrCb,KAAKuV,MAAMsN,OAAO1K,QAAUmM,SAASxjB,EAErCd,KAAK+jB,aACL/jB,KAAK6Z,UAAWgJ,OAAQ7iB,KAAKuV,MAAMsN,SACnC,YACM,GAAI7iB,KAAKuV,MAAMsN,kBAAkBN,kBAAA7J,gBAAiB,CACxD,IAAIiM,UAAUne,MAAMge,QAAUxkB,KAAKuV,MAAMsN,OAAO7X,OAChD,IAAI4Z,UAAUpe,MAAMie,QAAUzkB,KAAKuV,MAAMsN,OAAO5X,OAChD,IAAI4Z,aAAaxO,aAAaQ,eAAiB,IAE/CrS,EAAE+D,QAAQvI,KAAKuV,MAAMsN,OAAO3J,gBAAiB,SAAAC,OAE5C,GACCA,MAAMA,iBAAiB4F,YAAAnW,WACtBuQ,MAAMA,iBAAiBvG,aAAAnO,aAAe0U,MAAMA,MAAMrU,oBAClD,CACDqU,MAAMA,MAAMtY,EAAIwV,aAAa+J,gBAAgBjH,MAAMC,SAAWuL,UAAUE,cACxE1L,MAAMA,MAAMrY,EAAIuV,aAAa+J,gBAAgBjH,MAAME,SAAWuL,UAAUC,cAGxE,GAAI1L,MAAMA,iBAAiB4F,YAAAnW,UAAW,CACrCpE,EAAE+D,QAAQ4Q,MAAMA,MAAMjP,WAAY,SAAAf,MACjC,IAAMoO,WAAaxX,MAAKD,MAAM6P,cAAc6H,cAAcrO,MAC1DA,KAAKiD,aAAamL,cAIpB,GAAI5H,cAAcwM,wBAAyB,CAC1CxM,cAAcmV,+BAET,GAAI3L,MAAMA,iBAAiBvG,aAAAnO,WAAY,CAG7C0U,MAAMA,MAAMtY,EAAIsY,MAAMC,SAAW/C,aAAa+J,gBAAgBuE,UAAUE,cACxE1L,MAAMA,MAAMrY,EAAIqY,MAAME,SAAWhD,aAAa+J,gBAAgBwE,UAAUC,iBAI1E,GAAIlV,cAAcwM,wBAAyB,CAC1CxM,cAAcoV,wBAGf/kB,KAAK+jB,aACL,IAAK/jB,KAAKuV,MAAMuN,SAAU,CACzB9iB,KAAK6Z,UAAWiJ,SAAU,WACpB,CACN9iB,KAAK+a,oBAEA,GAAI/a,KAAKuV,MAAMsN,kBAAkBP,mBAAAhJ,iBAAkB,CAEzD,GAAItZ,KAAKF,MAAMklB,uBAAwB,CACtC3O,aAAaoL,UACZzhB,KAAKuV,MAAMsN,OAAOtJ,gBAAkB/S,MAAMge,QAAUxkB,KAAKuV,MAAMsN,OAAO7X,QACtEhL,KAAKuV,MAAMsN,OAAOrJ,gBAAkBhT,MAAMie,QAAUzkB,KAAKuV,MAAMsN,OAAO5X,SAEvEjL,KAAK+jB,aACL/jB,KAAK+a,iBAKR0H,cAAAxjB,UAAAwkB,QAAA,SAAQjd,OAAR,IAAAzG,MAAAC,KAEC,GAAIA,KAAKF,MAAMmlB,WAAWxR,QAAQjN,MAAM0e,YAAc,EAAG,CACxD1gB,EAAE+D,QAAQvI,KAAKF,MAAM6P,cAAc2G,kBAAkBuC,mBAAoB,SAAAtR,SAExE,IAAKxH,MAAKD,MAAM6P,cAAcsJ,cAAc1R,SAAU,CACrDA,QAAQhC,YAGVvF,KAAK+a,gBAIP0H,cAAAxjB,UAAA2jB,UAAA,SAAUpc,OAAV,IAAAzG,MAAAC,KACC,IAAI2P,cAAgB3P,KAAKF,MAAM6P,cAE/B,GAAI3P,KAAKuV,MAAMsN,kBAAkBN,kBAAA7J,gBAAiB,CACjD,IAAInR,QAAUvH,KAAK4jB,gBAAgBpd,OACnChC,EAAE+D,QAAQvI,KAAKuV,MAAMsN,OAAO3J,gBAAiB,SAAAC,OAE5C,KAAMA,MAAMA,iBAAiBvG,aAAAnO,YAAa,CACzC,OAED,GAAI8C,SAAWA,QAAQ4R,iBAAiB9G,YAAAhH,YAAcsE,cAAcsJ,cAAc1R,QAAQ4R,OAAQ,CACjG,IAAIzU,KAAOyU,MAAMA,MAAMnU,UACvB,GAAIN,KAAKqP,kBAAoB,KAAM,CAElC,GAAIrP,KAAKqP,kBAAoBxM,QAAQ4R,OAASzU,KAAKoP,kBAAoBvM,QAAQ4R,MAAO,CACrF,IAAMpG,WAAarO,KAAKqP,gBACxB,IAAIoR,QAAUzgB,KAAKqF,UACnBob,QAAQzS,cAAcnL,QAAQ4R,OAC9BgM,QAAQxS,cAAcI,YACtBrO,KAAKiO,cAAcpL,QAAQ4R,OAC3BpG,WAAWlH,WAAWnH,MACtBygB,QAAQ9Q,mBAAmB8Q,QAAQ9R,YAAY3O,KAAK8O,cAAc2F,MAAMA,SACxEzU,KAAK4P,kBAAkB6E,MAAMA,OAC7BxJ,cAAc2G,kBAAkBxK,QAAQqZ,cAElC,GAAIzgB,KAAKqP,kBAAoBxM,QAAQ4R,MAAO,CAClDzU,KAAK4P,kBAAkB6E,MAAMA,YACvB,GAAIzU,KAAKoP,kBAAoBvM,QAAQ4R,MAAO,CAClDzU,KAAK2P,mBAAmB8E,MAAMA,YAEzB,CACNzU,KAAKiO,cAAcpL,QAAQ4R,cAErBpZ,MAAKD,MAAM6P,cAAcyH,+BAA+B1S,KAAK0B,YAKtE,IAAKpG,KAAKF,MAAMslB,iBAAmBplB,KAAKuV,MAAMuN,SAAU,CACvDte,EAAE+D,QAAQvI,KAAKuV,MAAMsN,OAAO3J,gBAAiB,SAAAC,OAE5C,KAAMA,MAAMA,iBAAiBvG,aAAAnO,YAAa,CACzC,OAGD,IAAI4gB,cAA4BlM,MAAMA,MACtC,IAAIzU,KAAkB2gB,cAAcrgB,UACpC,GAAIN,KAAKoP,kBAAoB,MAAQpP,KAAKqP,kBAAoB,KAAM,CACnErP,KAAKa,YAMRf,EAAE+D,QAAQvI,KAAKuV,MAAMsN,OAAO3J,gBAAiB,SAAAC,OAE5C,KAAMA,MAAMA,iBAAiBvG,aAAAnO,YAAa,CACzC,OAGD,IAAIC,KAAkByU,MAAMA,MAAMnU,UAClC,IAAI8N,WAAwBpO,KAAKoP,gBACjC,IAAIf,WAAwBrO,KAAKqP,gBACjC,GAAIjB,aAAe,MAAQC,aAAe,KAAM,CAC/C,IAAKD,WAAWzG,cAAc0G,YAAa,CAE1CrO,KAAKa,cACC,GACNf,EAAE8gB,KACD9gB,EAAE2H,OAAO4G,WAAW3J,YACpB,SAACzL,GACA,OAAAA,IAAM+G,OAAS/G,EAAEmW,kBAAoBhB,YAAcnV,EAAEoW,kBAAoBjB,cAE1E,CAEDpO,KAAKa,aAKRoK,cAAc4V,uBACdvlB,KAAKikB,kBAAkBjkB,KAAKuV,MAAMuN,cAC5B,CACNnT,cAAc4V,uBACdvlB,KAAKikB,mBAENjkB,KAAKuV,MAAM/N,SAAS4b,oBAAoB,YAAapjB,KAAK2iB,aAC1D3iB,KAAKuV,MAAM/N,SAAS4b,oBAAoB,UAAWpjB,KAAK4iB,YAGzDH,cAAAxjB,UAAAumB,iBAAA,WACC,IAAI/M,WAAczY,KAAKuV,MAAMsN,OAA2BzK,mBACxD,OACC1Y,MAAAiW,cAAA,OACC1V,UAAWD,KAAKE,IAAI,cACpB2V,OACCC,IAAK2C,WAAW3C,IAChBC,KAAM0C,WAAW1C,KACjBzL,MAAOmO,WAAWnO,MAClBC,OAAQkO,WAAWlO,WAMvBkY,cAAAxjB,UAAAyW,OAAA,eAAA3V,MAAAC,KACC,IAAI2P,cAAgB3P,KAAKF,MAAM6P,cAC/BA,cAAc8V,0BAA0BzlB,KAAKF,MAAM4lB,wBACnD/V,cAAcgW,sBAAsB3lB,KAAKF,MAAM8lB,cAC/C,IAAIvP,aAAe1G,cAAc2G,kBAEjC,OACC5W,MAAAiW,cAAA,MAAApV,YACKP,KAAKM,YACT0c,IAAK,SAAAA,KACJ,GAAIA,IAAK,CACRjd,MAAKD,MAAM6P,cAAcwT,UAAUnG,OAGrC6I,QAAS,SAAArf,OACR,GAAIzG,MAAKD,MAAMgmB,gBAAiB,CAC/Btf,MAAMoX,iBACNpX,MAAMsG,kBACN,IAAMiZ,cAAgB1P,aAAaQ,eAAiB,IACpD,IAAImP,YAAcjmB,MAAKD,MAAMmmB,aAAezf,MAAM0f,OAAS1f,MAAM0f,OAEjE,GAAI1f,MAAM2f,SAAWH,YAAc,IAAM,EAAG,CAK3CA,aAAe,MACT,CACNA,aAAe,GAEhB,GAAI3P,aAAaQ,eAAiBmP,YAAc,GAAI,CACnD3P,aAAakL,aAAalL,aAAaQ,eAAiBmP,aAGzD,IAAMI,WAAa/P,aAAaQ,eAAiB,IAEjD,IAAMwP,aAAe7f,MAAM8f,cAAcC,wBACzC,IAAMC,YAAcH,aAAa/b,MACjC,IAAMmc,aAAeJ,aAAa9b,OAElC,IAAMmc,UAAYF,YAAcJ,WAAaI,YAAcT,cAC3D,IAAMY,WAAaF,aAAeL,WAAaK,aAAeV,cAE9D,IAAMvB,QAAUhe,MAAMge,QAAU6B,aAAatQ,KAC7C,IAAM0O,QAAUje,MAAMie,QAAU4B,aAAavQ,IAG7C,IAAM8Q,SAAWpC,QAAUnO,aAAaM,cAAgBoP,cAAgBS,YACxE,IAAMK,SAAWpC,QAAUpO,aAAaO,cAAgBmP,cAAgBU,aAExEpQ,aAAaoL,UACZpL,aAAaM,aAAe+P,UAAYE,QACxCvQ,aAAaO,aAAe+P,WAAaE,SAG1ClX,cAAciJ,0BACd7Y,MAAKgb,gBAGPqD,YAAa,SAAA5X,OACZzG,MAAK8Z,SAAQtZ,YAAMR,MAAKwV,OAAOuN,SAAU,SAEzCnT,cAAc4V,uBACd,IAAIpM,MAAQpZ,MAAK6jB,gBAAgBpd,OAEjC,GAAI2S,QAAU,KAAM,CAEnB,GAAI3S,MAAMoU,SAAU,CACnB,IAAI0J,SAAW3U,cAAc4U,iBAAiB/d,MAAMge,QAAShe,MAAMie,SACnE1kB,MAAKqkB,kBAAkB,IAAI5B,kBAAAvK,gBAAgBqM,SAASzjB,EAAGyjB,SAASxjB,QAC1D,CAENuV,aAAawK,iBACb9gB,MAAKqkB,kBAAkB,IAAI9B,mBAAAhJ,iBAAiB9S,MAAMge,QAAShe,MAAMie,QAASpO,qBAErE,GAAI8C,MAAMA,iBAAiB9G,YAAAhH,UAAW,CAE5C,IAAKtL,MAAKD,MAAM6P,cAAcsJ,cAAcE,MAAMA,OAAQ,CACzD,IAAImL,SAAW3U,cAAcmL,sBAAsBtU,OACnD,IAAIsM,WAAaqG,MAAMA,MACvB,IAAIzU,KAAOoO,WAAW/G,kBACtBrH,KAAKgO,cAAcI,YAEnB,GAAIpO,KAAM,CACTA,KAAK6P,qBACL,GAAI7P,KAAKoP,kBAAoBhB,WAAY,CACxCpO,KAAKgO,cAAcI,YAEpBpO,KAAKiO,cAAc,MAEnBjO,KAAKiP,gBAAgBlO,eAAe6e,UACpC5f,KAAKkP,eAAenO,eAAe6e,UAEnCjO,aAAawK,iBACbnc,KAAKkP,eAAevN,YAAY,MAChCgQ,aAAavK,QAAQpH,MAErB3E,MAAKqkB,kBACJ,IAAI7B,kBAAA7J,gBAAgBlS,MAAMge,QAAShe,MAAMie,QAAS9U,qBAG9C,CACN0G,aAAawK,sBAER,CAEN,IAAKra,MAAMoU,WAAazB,MAAMA,MAAMtU,aAAc,CACjDwR,aAAawK,iBAEd1H,MAAMA,MAAM9S,YAAY,MAExBtG,MAAKqkB,kBAAkB,IAAI7B,kBAAA7J,gBAAgBlS,MAAMge,QAAShe,MAAMie,QAAS9U,gBAE1E5P,MAAKwV,MAAM/N,SAASkc,iBAAiB,YAAa3jB,MAAK4iB,aACvD5iB,MAAKwV,MAAM/N,SAASkc,iBAAiB,UAAW3jB,MAAK6iB,cAGrD5iB,KAAKuV,MAAMwN,eACXrjB,MAAAiW,cAACyM,kBAAAlL,iBACAvH,cAAeA,cACfoI,WAAY,SAAC1O,MAAmB7C,OAC/BzG,MAAKwV,MAAM/N,SAASkc,iBAAiB,YAAa3jB,MAAK4iB,aACvD5iB,MAAKwV,MAAM/N,SAASkc,iBAAiB,UAAW3jB,MAAK6iB,WACrDpc,MAAMsG,kBACNuJ,aAAawK,eAAexX,OAC5BtJ,MAAK8Z,UACJgJ,OAAQ,IAAIN,kBAAA7J,gBAAgBlS,MAAMge,QAAShe,MAAMie,QAAS9U,oBAK9DjQ,MAAAiW,cAAC0M,kBAAAnM,iBAAgBvG,cAAeA,gBAC/B3P,KAAKuV,MAAMsN,kBAAkBL,kBAAAvK,iBAAmBjY,KAAKwlB,qBApf3C/C,cAAA7D,cACbjP,cAAe,KACfyV,gBAAiB,KACjBJ,uBAAwB,KACxBc,gBAAiB,KACjBG,YAAa,MACbP,uBAAwBoB,SACxBlB,aAAc,MACdX,YAAa,GAAI,IAgfnB,OAAAxC,cAzfA,CAAmCpN,aAAA1V,YAAtB5C,QAAA0lB,0fChDb,IAAAsE,mBAAAvpB,oBAAA,IACA,IAAAkC,MAAAlC,oBAAA,GACA,IAAAwpB,oBAAAxpB,oBAAA,IAEA,IAAAypB,sBAAAzpB,oBAAA,IAIA,IAAA0pB,mBAAA,SAAAtnB,QAAwCC,UAAAqnB,mBAAAtnB,QACvC,SAAAsnB,4BACCtnB,OAAA/B,KAAAmC,KAAM,YAAUA,KAGjBknB,mBAAAjoB,UAAAie,oBAAA,SAAoBvN,cAA8BhP,MACjD,OAAOjB,MAAMiW,cAAcqR,oBAAA7M,mBAC1BxZ,KAAMA,KACNgP,cAAeA,iBAIjBuX,mBAAAjoB,UAAA0K,eAAA,SAAe8V,eACd,OAAO,IAAIsH,mBAAA/H,kBAEb,OAAAkI,mBAfA,CAAwCD,sBAAAvN,qBAA3B3c,QAAAmqB,ogBCRb,IAAAxnB,MAAAlC,oBAAA,GACA,IAAA2pB,oBAAA3pB,oBAAA,IAEA,IAAA4pB,sBAAA5pB,oBAAA,IACA,IAAA8U,mBAAA9U,oBAAA,IAKA,IAAA6pB,mBAAA,SAAAznB,QAAwCC,UAAAwnB,mBAAAznB,QACvC,SAAAynB,4BACCznB,OAAA/B,KAAAmC,KAAM,YAAUA,KAGjBqnB,mBAAApoB,UAAAie,oBAAA,SAAoBvN,cAA8BjL,MACjD,OAAOhF,MAAMiW,cAAcwR,oBAAAzM,mBAC1BhW,KAAMA,KACNiL,cAAeA,iBAIjB0X,mBAAApoB,UAAA0K,eAAA,SAAe8V,eACd,OAAO,IAAInN,mBAAAX,kBAGZ0V,mBAAApoB,UAAAqe,oBAAA,SAAoBnE,MAAyBmO,OAA2BrhB,SAAmBrF,MAC1F,OACClB,MAAAiW,cAAA,QACC1V,UAAWgG,SAAWqhB,OAAOpnB,IAAI,mBAAqB,GACtDwd,YAAavE,MAAM7O,MACnBid,OAAQpO,MAAMvH,MACd5T,EAAG4C,QAIP,OAAAymB,mBA1BA,CAAwCD,sBAAA3M,qBAA3B1d,QAAAsqB,ogBCTb,IAAAvhB,aAAAtI,oBAAA,IACA,IAAAgqB,eAAAhqB,oBAAA,IACA,IAAAgH,EAAAhH,oBAAA,GAEA,IAAAuhB,YAAAvhB,oBAAA,GACA,IAAAoV,aAAApV,oBAAA,GAOA,IAAAiqB,OAAAjqB,oBAAA,IACA,IAAAqJ,cAAArJ,oBAAA,IACA,IAAAkqB,qBAAAlqB,oBAAA,IAEA,IAAAmqB,sBAAAnqB,oBAAA,IACA,IAAA8O,UAAA9O,oBAAA,GAmBA,IAAAoqB,cAAA,SAAAhoB,QAAmCC,UAAA+nB,cAAAhoB,QAqBlC,SAAAgoB,gBAAA,IAAA7nB,MACCH,OAAA/B,KAAAmC,OAAOA,KAPRD,MAAA8nB,gBACA9nB,MAAAiR,iBAEAjR,MAAA+nB,kBAA4B,EAC5B/nB,MAAAgoB,kBAA4B,EA4Z5BhoB,MAAAioB,0BAA4B,WAM3B,IAAMC,eAAiBzjB,EAAE2H,OAAOpM,MAAKsW,aAAayJ,OAAOtW,IAAI,SAAAwP,MAAQ,OACpEnY,EAAGmY,KAAKnY,EACRyJ,MAAO0O,KAAK1O,MACZxJ,EAAGkY,KAAKlY,EACRyJ,OAAQyO,KAAKzO,UAGd,IAAM2d,SAAW1jB,EAAE2H,OAAOpM,MAAKsW,aAAa9K,OAC5C,IAAM4c,eAAiB3jB,EAAE4c,QAAQ8G,SAAS1e,IAAI,SAAA9E,MAAQ,OAACA,KAAKoO,WAAYpO,KAAKqO,eAC3EgG,OAAO,SAAA5P,MAAQ,OAAAA,OAAS,OACxBK,IAAI,SAAAwP,MAAQ,OACZnY,EAAGmY,KAAKnY,EACRyJ,MAAO0O,KAAK1O,MACZxJ,EAAGkY,KAAKlY,EACRyJ,OAAQyO,KAAKzO,UAEf,IAAM6d,gBAAkB5jB,EAAE4c,QAAQ8G,SAAS1e,IAAI,SAAA9E,MAAQ,OAAAA,KAAKC,UAAS6E,IAAI,SAAAwP,MAAQ,OAEhFnY,EAAGmY,KAAKnY,EACRyJ,MAAO,EACPxJ,EAAGkY,KAAKlY,EACRyJ,OAAQ,KAGT,IAAM4M,OAASpX,MAAKoX,OACpB,IAAMkR,KACLtmB,KAAKqO,MACJrO,KAAKumB,IAAI9jB,EAAE+jB,MAAM/jB,EAAEjD,OAAO0mB,eAAgBE,eAAgBC,iBAAkB,SAAApP,MAAQ,OAAAA,KAAKnY,IAAGA,EAAG,GAC9FgG,cAAAwB,wBACExB,cAAAwB,uBACL,IAAMmgB,YAAchkB,EAAEikB,MACrBjkB,EAAEjD,OAAO0mB,eAAgBE,eAAgBC,iBACzC,SAAApP,MAAQ,OAAAA,KAAKnY,EAAImY,KAAK1O,QAEvB,IAAMoe,KAAO3mB,KAAK+I,IAAI0d,YAAY3nB,EAAI2nB,YAAYle,MAAO6M,OAAO0E,aAEhE,IAAM8M,KACL5mB,KAAKqO,MACJrO,KAAKumB,IAAI9jB,EAAE+jB,MAAM/jB,EAAEjD,OAAO0mB,eAAgBE,eAAgBC,iBAAkB,SAAApP,MAAQ,OAAAA,KAAKlY,IAAGA,EAAG,GAC9F+F,cAAAwB,wBACExB,cAAAwB,uBACL,IAAMugB,YAAcpkB,EAAEikB,MACrBjkB,EAAEjD,OAAO0mB,eAAgBE,eAAgBC,iBACzC,SAAApP,MAAQ,OAAAA,KAAKlY,EAAIkY,KAAKzO,SAEvB,IAAMse,KAAO9mB,KAAK+I,IAAI8d,YAAY9nB,EAAI8nB,YAAYre,OAAQ4M,OAAO2E,cAEjE,OACCxR,MAAOvI,KAAK+mB,KAAK/mB,KAAKO,IAAI+lB,MAAQK,MAClCZ,kBAAmB/lB,KAAKO,IAAI+lB,MAAQxhB,cAAAwB,uBAAyB,EAC7DkC,OAAQxI,KAAK+mB,KAAK/mB,KAAKO,IAAIqmB,MAAQE,MACnCd,kBAAmBhmB,KAAKO,IAAIqmB,MAAQ9hB,cAAAwB,uBAAyB,IAO/DtI,MAAAgpB,UAAY,SAAC/Y,QACZxL,EAAE2H,OAAOpM,MAAKsW,aAAayJ,OAAOvX,QAAQ,SAAA5H,MACzC,IAAMiN,OAAS7L,KAAKqO,MAAMzP,KAAKE,EAAIgG,cAAAwB,wBACnC,IAAMyF,KAAO/L,KAAK+mB,MAAMnoB,KAAKE,EAAIF,KAAK2J,OAASzD,cAAAwB,wBAC/C,IAAMwF,OAAS9L,KAAKqO,MAAMzP,KAAKG,EAAI+F,cAAAwB,wBACnC,IAAM0F,KAAOhM,KAAK+mB,MAAMnoB,KAAKG,EAAIH,KAAK4J,QAAU1D,cAAAwB,wBAEhD,IAAK,IAAIxH,EAAI+M,OAAS,EAAG/M,GAAKiN,KAAO,EAAGjN,IAAK,CAC5C,IAAK,IAAIC,EAAI+M,OAAS,EAAG/M,EAAIiN,KAAO,EAAGjN,IAAK,CAC3Cf,MAAKipB,gBAAgBhZ,OAAQjQ,MAAKoQ,kBAAkBtP,GAAId,MAAKsQ,kBAAkBvP,SASnFf,MAAAkpB,UAAY,SAACjZ,QACZ,IAAMkZ,YAAc1kB,EAAE4c,QACrB5c,EAAE2H,OAAOpM,MAAKsW,aAAa9K,OAAO/B,IAAI,SAAA9E,MAAQ,SAAGnD,OAAOmD,KAAKoO,WAAYpO,KAAKqO,eAE/EmW,YAAYnQ,OAAO,SAAA5P,MAAQ,OAAAA,OAAS,OAAMZ,QAAQ,SAAAY,MACjD,IAAMyE,OAAS7L,KAAKqO,MAAMjH,KAAKtI,EAAIgG,cAAAwB,wBACnC,IAAMyF,KAAO/L,KAAK+mB,MAAM3f,KAAKtI,EAAIsI,KAAKmB,OAASzD,cAAAwB,wBAC/C,IAAMwF,OAAS9L,KAAKqO,MAAMjH,KAAKrI,EAAI+F,cAAAwB,wBACnC,IAAM0F,KAAOhM,KAAK+mB,MAAM3f,KAAKrI,EAAIqI,KAAKoB,QAAU1D,cAAAwB,wBAEhD,IAAK,IAAIxH,EAAI+M,OAAS,EAAG/M,GAAKiN,KAAO,EAAGjN,IAAK,CAC5C,IAAK,IAAIC,EAAI+M,OAAS,EAAG/M,EAAIiN,KAAO,EAAGjN,IAAK,CAC3Cf,MAAKipB,gBAAgBhZ,OAAQjQ,MAAKoQ,kBAAkBtP,GAAId,MAAKsQ,kBAAkBvP,SAMnFf,MAAAipB,gBAAkB,SAAChZ,OAAoBnP,EAAWC,GACjD,GAAIkP,OAAOlP,KAAO4P,WAAaV,OAAOlP,GAAGD,KAAO6P,UAAW,CAC1DV,OAAOlP,GAAGD,GAAK,IA9fhBd,MAAKsW,aAAe,IAAImR,eAAA3H,aACxB9f,MAAKopB,iBACLppB,MAAKqpB,iBACLrpB,MAAKspB,iBACLtpB,MAAKupB,kBACLvpB,MAAKoX,OAAS,KACdpX,MAAKwpB,iBAAmB,KACxBxpB,MAAKqX,kCAEL,GAAI9K,UAAAvF,QAAQE,QAAS,CACpBqF,UAAAvF,QAAQG,YAAc,EAGtB,GAAI9J,OAAQ,CACVA,OAAe,oBAAsB2C,oBAKzC6nB,cAAA3oB,UAAAuqB,wBAAA,WACCxpB,KAAKypB,oBAAoB,IAAIhC,OAAAP,oBAC7BlnB,KAAK0pB,oBAAoB,IAAIjC,OAAAJ,oBAC7BrnB,KAAK2pB,oBAAoB,IAAIjC,qBAAA9H,oBAC7B5f,KAAK4pB,qBAAqB,IAAIjC,sBAAAnI,sBAG/BoI,cAAA3oB,UAAAskB,cAAA,WACCvjB,KAAKsG,iBAAiB,SAAAC,UACrB,GAAIA,SAASgd,cAAe,CAC3Bhd,SAASgd,oBAKZqE,cAAA3oB,UAAAsmB,qBAAA,WACCvlB,KAAKupB,iBAAmB,MAGzB3B,cAAA3oB,UAAA2Z,sBAAA,SAAsBrP,UAAtB,IAAAxJ,MAAAC,KACCA,KAAKupB,oBACLhgB,SAAShB,QAAQ,SAAAsE,QAEhB,GAAIA,kBAAkBkS,YAAAnW,UAAW,CAChCpE,EAAE+D,QAAQsE,OAAO3C,WAAY,SAAAf,MAC5B3E,EAAE+D,QAAQY,KAAKC,WAAY,SAAA1E,MAC1B3E,MAAKwpB,iBAAiB7kB,KAAK0B,SAAW,SAKzC,GAAIyG,kBAAkB+F,aAAAnO,WAAY,CACjC1E,MAAKwpB,iBAAiB1c,OAAO7H,UAAUoB,SAAW,KAGnDrG,MAAKwpB,iBAAiB1c,OAAOzG,SAAW,QAQ1CwhB,cAAA3oB,UAAAga,cAAA,SAAcE,OAEb,GAAInZ,KAAKqW,aAAazQ,WAAY,CACjC,OAAO,KAGR,OAAOuT,MAAMvT,YAGdgiB,cAAA3oB,UAAA4qB,yBAAA,WACC7pB,KAAKoW,cAAgB,MACrBpW,KAAKoX,mCAGNwQ,cAAA3oB,UAAAwW,iBAAA,SAAiBqU,WAEhB,GAAI9pB,KAAKupB,mBAAqB,KAAM,CACnC,OAAO,KAGR,OAAOvpB,KAAKupB,iBAAiBO,UAAU1jB,WAAasK,WAGrDkX,cAAA3oB,UAAAkkB,UAAA,SAAUhM,QACTnX,KAAKmX,OAASA,QAGfyQ,cAAA3oB,UAAA8qB,gBAAA,SAAgB5Q,OACfnZ,KAAKqW,aAAe8C,MACpBnZ,KAAK6pB,4BAGNjC,cAAA3oB,UAAAqX,gBAAA,WACC,OAAOtW,KAAKqW;wCAKbuR;cAAA3oB,UAAA+qB,iBAAA,WACC,OAAOhqB,KAAKmpB,eAGbvB,cAAA3oB,UAAAgrB,iBAAA,WACC,OAAOjqB,KAAKopB,eAGbxB,cAAA3oB,UAAAirB,kBAAA,WACC,OAAOlqB,KAAKspB,gBAGb1B,cAAA3oB,UAAA2qB,qBAAA,SAAqB9sB,SACpBkD,KAAKspB,eAAexsB,QAAQqJ,WAAarJ,QACzCkD,KAAKsG,iBAAiB,SAAAC,UACrB,GAAIA,SAAS4jB,sBAAuB,CACnC5jB,SAAS4jB,4BAKZvC,cAAA3oB,UAAA0qB,oBAAA,SAAoB7sB,SACnBkD,KAAKqpB,cAAcvsB,QAAQqJ,WAAarJ,QACxCkD,KAAKsG,iBAAiB,SAAAC,UACrB,GAAIA,SAAS6jB,qBAAsB,CAClC7jB,SAAS6jB,2BAKZxC,cAAA3oB,UAAAwqB,oBAAA,SAAoB3sB,SACnBkD,KAAKmpB,cAAcrsB,QAAQqJ,WAAarJ,QACxCkD,KAAKsG,iBAAiB,SAAAC,UACrB,GAAIA,SAAS8jB,qBAAsB,CAClC9jB,SAAS8jB,2BAKZzC,cAAA3oB,UAAAyqB,oBAAA,SAAoB5sB,SACnBkD,KAAKopB,cAActsB,QAAQqJ,WAAarJ,QACxCkD,KAAKsG,iBAAiB,SAAAC,UACrB,GAAIA,SAAS+jB,qBAAsB,CAClC/jB,SAAS+jB,2BAKZ1C,cAAA3oB,UAAAyK,eAAA,SAAe3D,MACd,GAAI/F,KAAKqpB,cAActjB,MAAO,CAC7B,OAAO/F,KAAKqpB,cAActjB,MAE3B,MAAM,IAAI8R,MAAM,0CAA0C9R,KAAI,MAG/D6hB,cAAA3oB,UAAAuhB,eAAA,SAAeza,MACd,GAAI/F,KAAKmpB,cAAcpjB,MAAO,CAC7B,OAAO/F,KAAKmpB,cAAcpjB,MAE3B,MAAM,IAAI8R,MAAM,0CAA0C9R,KAAI,MAG/D6hB,cAAA3oB,UAAA0hB,eAAA,SAAe5a,MACd,GAAI/F,KAAKopB,cAAcrjB,MAAO,CAC7B,OAAO/F,KAAKopB,cAAcrjB,MAE3B,MAAM,IAAI8R,MAAM,0CAA0C9R,KAAI,MAG/D6hB,cAAA3oB,UAAAgU,gBAAA,SAAgBlN,MACf,GAAI/F,KAAKspB,eAAevjB,MAAO,CAC9B,OAAO/F,KAAKspB,eAAevjB,MAE5B,MAAM,IAAI8R,MAAM,2CAA2C9R,KAAI,MAGhE6hB,cAAA3oB,UAAAsrB,kBAAA,SAAkB5pB,MACjB,OAAOX,KAAKwgB,eAAe7f,KAAKwF,YAGjCyhB,cAAA3oB,UAAAoe,kBAAA,SAAkB3Y,MACjB,OAAO1E,KAAK2gB,eAAejc,KAAKyB,YAGjCyhB,cAAA3oB,UAAAge,mBAAA,SAAmBzL,OAClB,OAAOxR,KAAKiT,gBAAgBzB,MAAMrL,YAGnCyhB,cAAA3oB,UAAA2Y,sBAAA,SAAsBlT,MACrB,IAAI8lB,YAAcxqB,KAAKqd,kBAAkB3Y,MACzC,IAAK8lB,YAAa,CACjB,MAAM,IAAI3S,MAAM,sCAAwCnT,KAAKyB,WAE9D,OAAOqkB,YAAYtN,oBAAoBld,KAAM0E,OAG9CkjB,cAAA3oB,UAAA8X,sBAAA,SAAsBpW,MACrB,IAAI8pB,YAAczqB,KAAKuqB,kBAAkB5pB,MACzC,IAAK8pB,YAAa,CACjB,MAAM,IAAI5S,MAAM,wCAA0ClX,KAAKwF,WAEhE,OAAOskB,YAAYvN,oBAAoBld,KAAMW,OAG9CinB,cAAA3oB,UAAA6b,sBAAA,SAAsBtU,OACrB,IAAI6C,MAAQrJ,KAAKukB,iBAAiB/d,MAAMge,QAAShe,MAAMie,SACvD,OACC5jB,GAAIwI,MAAMxI,EAAIb,KAAKqW,aAAaM,eAAiB3W,KAAKqW,aAAaQ,eAAiB,KACpF/V,GAAIuI,MAAMvI,EAAId,KAAKqW,aAAaO,eAAiB5W,KAAKqW,aAAaQ,eAAiB,OAItF+Q,cAAA3oB,UAAAslB,iBAAA,SAAiB1jB,EAAGC,GACnB,IAAI4pB,WAAa1qB,KAAKmX,OAAOoP,wBAC7B,OAAS1lB,EAAGA,EAAI6pB,WAAW3U,KAAMjV,EAAGA,EAAI4pB,WAAW5U,MAGpD8R,cAAA3oB,UAAA0rB,eAAA,SAAehqB,MACd,IAAMR,SAAWH,KAAKmX,OAAOyT,cAAc,sBAAsBjqB,KAAKyF,QAAO,MAC7E,GAAIjG,WAAa,KAAM,CACtB,MAAM,IAAI0X,MAAM,0CAA4ClX,KAAKyF,QAAU,KAE5E,OAAOjG,UAGRynB,cAAA3oB,UAAA4rB,mBAAA,SAAmB1hB,MAClB,IAAIhJ,SAAWH,KAAKmX,OAAOyT,cAC1B,oBAAoBzhB,KAAKuC,UAAS,mBAAmBvC,KAAKlE,YAAYmB,QAAO,MAE9E,GAAIjG,WAAa,KAAM,CACtB,MAAM,IAAI0X,MACT,+CACC1O,KAAKlE,YAAYmB,QACjB,gBACA+C,KAAKuC,UACL,KAGH,OAAOvL,UAGRynB,cAAA3oB,UAAAqY,cAAA,SAAcnO,MACb,IAAI2hB,cAAgB9qB,KAAK6qB,mBAAmB1hB,MAC5C,IAAI4hB,WAAaD,cAAcvE,wBAE/B,IAAIyE,IAAMhrB,KAAKukB,iBAAiBwG,WAAWhV,KAAMgV,WAAWjV,KAE5D,OACCjV,EACCiqB,cAAcjP,YAAc,GAC3BmP,IAAInqB,EAAIb,KAAKqW,aAAaM,eAAiB3W,KAAKqW,aAAaQ,eAAiB,KAChF/V,EACCgqB,cAAchP,aAAe,GAC5BkP,IAAIlqB,EAAId,KAAKqW,aAAaO,eAAiB5W,KAAKqW,aAAaQ,eAAiB,OAOlF+Q,cAAA3oB,UAAAuY,cAAA,SACCrO,MAOA,IAAM2hB,cAAgB9qB,KAAK6qB,mBAAmB1hB,MAC9C,IAAM4hB,WAAaD,cAAcvE,wBACjC,IAAMmE,WAAa1qB,KAAKmX,OAAOoP,wBAE/B,OACC1lB,GACEkqB,WAAWlqB,EAAIb,KAAKqW,aAAaM,eAAiB3W,KAAKqW,aAAaQ,eAAiB,KACtF6T,WAAW3U,KACZjV,GACEiqB,WAAWjqB,EAAId,KAAKqW,aAAaO,eAAiB5W,KAAKqW,aAAaQ,eAAiB,KACtF6T,WAAW5U,IACZxL,MAAOygB,WAAWzgB,MAClBC,OAAQwgB,WAAWxgB,SAQrBqd,cAAA3oB,UAAAuX,kBAAA,SAAkB7V,MACjB,IAAKX,KAAKmX,OAAQ,CACjB,OACC7M,MAAO,EACPC,OAAQ,GAIV,IAAMsZ,YAAc7jB,KAAK2qB,eAAehqB,MACxC,IAAMsqB,SAAWpH,YAAY0C,wBAE7B,OACCjc,MAAO2gB,SAAS3gB,MAChBC,OAAQ0gB,SAAS1gB,SAInBqd,cAAA3oB,UAAA4b,0BAAA,WACC,OAAO7a,KAAK0lB,wBAGbkC,cAAA3oB,UAAAwmB,0BAAA,SAA0B3a,KACzB9K,KAAK0lB,uBAAyB5a,KAG/B8c,cAAA3oB,UAAAkd,sBAAA,WACC,QAASnc,KAAK4lB,cAEfgC,cAAA3oB,UAAA0mB,sBAAA,SAAsBuF,QACrBlrB,KAAK4lB,aAAesF,QAiBrBtD,cAAA3oB,UAAAgR,gBAAA,WACC,GAAIjQ,KAAK6nB,aAAa/lB,SAAW,EAAG,CACnC9B,KAAK+kB,wBAGN,OAAO/kB,KAAK6nB,cAEbD,cAAA3oB,UAAA8lB,sBAAA,WACO,IAAA1a,GAAArK,KAAAgoB,4BACLmD,YAAA9gB,GAAAC,MACAwd,kBAAAzd,GAAAyd,kBACAsD,aAAA/gB,GAAAE,OACAwd,kBAAA1d,GAAA0d,kBAGD/nB,KAAK8nB,kBAAoBA,kBACzB9nB,KAAK+nB,kBAAoBA,kBAEzB,IAAMsD,YAActpB,KAAK+mB,KAAKqC,YAActkB,cAAAwB,wBAC5C,IAAMijB,aAAevpB,KAAK+mB,KAAKsC,aAAevkB,cAAAwB,wBAE9CrI,KAAK6nB,aAAerjB,EAAE+mB,MAAM,EAAGD,cAAc9hB,IAAI,WAChD,OAAO,IAAIyX,MAAMoK,aAAaG,KAAK,MAkBrC5D,cAAA3oB,UAAAgf,iBAAA,WACC,GAAIje,KAAKgR,cAAclP,SAAW,EAAG,CACpC9B,KAAK8kB,yBAGN,OAAO9kB,KAAKgR,eAEb4W,cAAA3oB,UAAA6lB,uBAAA,WACC,IAAM9U,OAASxL,EAAEinB,UAAUzrB,KAAKiQ,mBAGhCjQ,KAAK+oB,UAAU/Y,QAEfhQ,KAAKipB,UAAUjZ,QAEfhQ,KAAKgR,cAAgBhB,QAQtB4X,cAAA3oB,UAAAkR,kBAAA,SAAkBtP,EAAWI,SAAA,GAAAA,eAAA,GAAAA,QAAA,MAC5B,OAAOJ,EAAIb,KAAK8nB,mBAAqB7mB,SAAW,EAAI,IAErD2mB,cAAA3oB,UAAAoR,kBAAA,SAAkBvP,EAAWG,SAAA,GAAAA,eAAA,GAAAA,QAAA,MAC5B,OAAOH,EAAId,KAAK+nB,mBAAqB9mB,SAAW,EAAI,IAiHrD2mB,cAAA3oB,UAAAysB,UAAA,WACC,IAAM9E,QAAU5mB,KAAKmX,OAAOqP,YAAcxmB,KAAKmX,OAAOwU,YACtD,IAAM9E,QAAU7mB,KAAKmX,OAAOsP,aAAezmB,KAAKmX,OAAOyU,aACvD,IAAMxF,WAAaQ,QAAUC,QAAUD,QAAUC,QAEjD7mB,KAAKqW,aAAakL,aAAavhB,KAAKqW,aAAaQ,eAAiBuP,YAClEpmB,KAAKqW,aAAaoL,UAAU,EAAG,GAC/BzhB,KAAKujB,iBAEP,OAAAqE,cAliBA,CAAmC9hB,aAAAa,YAAtB5J,QAAA6qB,uFClCbxpB,OAAAC,eAAAtB,QAAA,cACA2B,MAAA,OAGA,IAAAmtB,eAAA,WAAmC,SAAAC,cAAAC,IAAAruB,GAAiC,IAAAsuB,QAAe,IAAAC,GAAA,KAAe,IAAAC,GAAA,MAAgB,IAAAC,GAAAzb,UAAoB,IAAM,QAAAqQ,GAAAgL,IAAAK,OAAAC,YAAAC,KAA0CL,IAAAK,GAAAvL,GAAAwL,QAAAC,MAA+BP,GAAA,MAAaD,KAAAhrB,KAAAsrB,GAAA5tB,OAAqB,GAAAhB,GAAAsuB,KAAAlqB,SAAApE,EAAA,OAAuC,MAAAgF,KAAcwpB,GAAA,KAAWC,GAAAzpB,IAAY,QAAU,IAAM,IAAAupB,IAAAlL,GAAA,UAAAA,GAAA,YAA2C,QAAU,GAAAmL,GAAA,MAAAC,IAAsB,OAAAH,KAAe,gBAAAD,IAAAruB,GAA2B,GAAAujB,MAAAC,QAAA6K,KAAA,CAA0B,OAAAA,SAAc,GAAAK,OAAAC,YAAAjuB,OAAA2tB,KAAA,CAA2C,OAAAD,cAAAC,IAAAruB,OAAgC,CAAO,UAAA+uB,UAAA,0DAAlkB,GAEA,IAAAnoB,GAAA,SAAAA,GAAAzD,GACA,OAAAA,KAGA,IAAA6rB,iBAAA,SAAAA,iBAAAC,KAAAC,OACA,IAAAC,MAAAhB,eAAAc,KAAA,GAEA,IAAAG,GAAAD,MAAA,GACA,IAAAE,GAAAF,MAAA,GAEA,IAAAG,OAAAnB,eAAAe,MAAA,GAEA,IAAAK,GAAAD,OAAA,GACA,IAAAE,GAAAF,OAAA,GACA,OAAAjrB,KAAAC,KAAAsC,GAAAwoB,GAAAG,IAAA3oB,GAAAyoB,GAAAG,MAGA,IAAAC,mBAAA,SAAAA,mBAAAzrB,EAAAuM,GACA,IAAA9O,EAAAutB,iBAAAhrB,EAAAuM,GAEA,OAAA9O,GAAA,EAAA2nB,SAAAxiB,GAAAnF,IAAA,EAAA4C,KAAAO,IAAAZ,EAAA,GAAAuM,EAAA,MAGA,IAAAmf,aAAA,SAAAA,aAAA1rB,EAAAC,EAAA5D,GACA,IAAAC,GAAA0D,EAAA,GAAA3D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,IAEA,GAAAC,GAAA,SAAA8oB,mBAEA,IAAAuG,MAAA3rB,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,QAAA4D,EAAA,GAAA5D,EAAA,MAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,QAAA2D,EAAA,GAAA3D,EAAA,KAAAC,EACA,IAAAsvB,MAAA3rB,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,KAAA4D,EAAA,GAAA5D,EAAA,QAAA2D,EAAA,GAAA3D,EAAA,MAAA2D,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,KAAA2D,EAAA,GAAA3D,EAAA,QAAA4D,EAAA,GAAA5D,EAAA,KAAAC,EACA,OAAAqvB,GAAAC,KAGA,IAAAC,eAAA,SAAAA,eAAAC,GAAAC,GAAAC,GACA,GAAAF,GAAA,KAAAC,GAAA,WAAAD,GAAA,GAAAC,GAAA,OAAAD,GAAA,GAAAC,GAAA,OAEA,IAAAE,IAAAH,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAE,EAAAD,GAAA,GAAAC,EAAA3rB,KAAAC,MAAAwrB,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAC,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAD,GAAA,GAAAC,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAD,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAE,EAAAD,GAAA,GAAAC,UAAAF,GAAA,GAAAC,GAAA,IACA,IAAAG,IAAAJ,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAE,EAAAD,GAAA,GAAAC,EAAA3rB,KAAAC,MAAAwrB,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAC,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAD,GAAA,GAAAC,GAAA,GAAAA,GAAA,GAAAA,GAAA,KAAAD,GAAA,GAAAC,GAAA,GAAAD,GAAA,GAAAE,EAAAD,GAAA,GAAAC,UAAAF,GAAA,GAAAC,GAAA,IAEA,OAAAE,GAAAC,IAAAD,GAAAC,QAAAD,KAGA,IAAAE,iBAAA,SAAAA,iBAAAC,GAAAC,IACA,IAAAC,OAAAhN,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,MAAAsQ,UAAA,GAEA,IAAApf,GAAAmsB,GAAAE,GAAA,GAAAH,GAAAG,GAAA,GACA,IAAApsB,GAAAksB,GAAAE,GAAA,GAAAH,GAAAG,GAAA,GAEA,GAAAH,GAAAhwB,GAAAgpB,SAAA,OAAAgH,GAAAI,IAAAH,GAAAjwB,EAAA8D,GAAAC,KAAAmsB,QAAAD,GAAAI,IAAA,GAAAvsB,IAAAosB,OACA,GAAAD,GAAAjwB,GAAAgpB,SAAA,OAAAiH,GAAAG,IAAAJ,GAAAhwB,EAAA8D,GAAAC,MAAAmsB,QAAAF,GAAAK,IAAA,GAAAvsB,KAAAosB,OAEA,IAAAI,IAAAL,GAAAI,IAAA,GAAAL,GAAAK,IAAA,GAAAJ,GAAAI,IAAA,GAAAL,GAAAK,IAAA,GAEA,GAAAC,MAAA,eAEA,IAAAC,GAAAxsB,GAAAksB,GAAAI,IAAA,GAAAvsB,GAAAmsB,GAAAI,IAAA,IAAAC,IACA,IAAA/mB,GAAAxF,GAAAisB,GAAAK,IAAA,GAAAvsB,GAAAksB,GAAAK,IAAA,IAAAC,IAEA,OAAAC,IAAAL,QAAA3mB,GAAA2mB,QAAAK,GAAAL,QAAA3mB,IAAA2mB,QAGA,IAAAM,gBAAA,SAAAA,gBAAA3pB,OAAAqL,QACA,OAAArL,OAAA6E,IAAA,SAAAH,OACA,OACAxI,EAAAwI,MAAAxI,EAAAmP,OAAA,GAAA3G,MAAAvI,EAAAkP,OAAA,GAAAA,OAAA,GACAlP,EAAAuI,MAAAxI,EAAAmP,OAAA,GAAA3G,MAAAvI,EAAAkP,OAAA,GAAAA,OAAA,OAKA,IAAAue,iBAAA,SAAAA,iBAAAC,GAAAC,GAAA3B,GAAAhvB,GACA,IAAA4wB,MAAA3sB,KAAA4sB,GAAA,IACA,IAAAC,QAAA,MAEA,IAAA7wB,EAAAgE,KAAA8sB,IAAA/B,GAAA4B,OACAtvB,EAAA2C,KAAA+sB,IAAAhC,GAAA4B,OACA,IAAAK,IAAAP,IAAA1wB,EAAA,GAAAC,EAAAD,EAAA,GAAAsB,GAAAovB,IAAA1wB,EAAA,GAAAC,EAAAD,EAAA,GAAAsB,GAAAqvB,KAAA3wB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAC,GAAA0wB,KAAA3wB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAC,IAEA,IAAAixB,EAAAD,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,GACAE,EAAAF,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAEA,IAAAG,IAAAH,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,OAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,GAAAA,GAAA,KAEA,IAAAI,IAAAH,EAAAC,GAAA,EAEA,GAAAC,EAAAN,QAAAO,GAAA,CACA,OACAX,GAAAzsB,KAAAC,KAAAmtB,IACAV,GAAA1sB,KAAAC,KAAAmtB,IACArC,GAAA,EACAsC,aAAA,OAIA,IAAAC,EAAAN,GAAA,GAAAA,GAAA,GAAAA,GAAA,GAAAA,GAAA,GACAG,EAAAntB,KAAAC,KAAAktB,GAEA,IAAAI,GAAAH,GAAAD,EAAA,EACAK,GAAAJ,GAAAD,EAAA,EAEA,IAAAM,MAAA9e,UACA+e,MAAA/e,UACAgf,MAAAhf,UACA8e,MAAAztB,KAAAO,IAAA+sB,GAAAT,SAAA7sB,KAAAO,IAAAgtB,GAAAL,GAAAL,QAAA,GAAA7sB,KAAA4tB,KAAA5tB,KAAAO,IAAA+sB,GAAAttB,KAAAO,IAAAgtB,GAAAL,IAAAK,GAAAN,GAAAK,KAAAC,GAAAL,IAAA,IAAAltB,KAAA4sB,GAEA,GAAAa,OAAA,GACAC,MAAA1tB,KAAAC,KAAAstB,IACAI,MAAA3tB,KAAAC,KAAAutB,QACG,CACHC,OAAA,GACAC,MAAA1tB,KAAAC,KAAAutB,IACAG,MAAA3tB,KAAAC,KAAAstB,IAGA,OACAd,GAAAiB,MACAhB,GAAAiB,MACA5C,GAAA0C,MACAJ,aAAAK,MAAAb,QAAAc,aAAAd,QAAAa,QAIA1yB,QAAA,YAAsB2vB,kCAAAS,sCAAAC,0BACtBG,8BAAAM,kCAAAS,gCAAAC,mCACAvxB,OAAAD,gBAAA,sEClIAqB,OAAAC,eAAAtB,QAAA,cACA2B,MAAA,OAGA,IAAAmtB,eAAA,WAAmC,SAAAC,cAAAC,IAAAruB,GAAiC,IAAAsuB,QAAe,IAAAC,GAAA,KAAe,IAAAC,GAAA,MAAgB,IAAAC,GAAAzb,UAAoB,IAAM,QAAAqQ,GAAAgL,IAAAK,OAAAC,YAAAC,KAA0CL,IAAAK,GAAAvL,GAAAwL,QAAAC,MAA+BP,GAAA,MAAaD,KAAAhrB,KAAAsrB,GAAA5tB,OAAqB,GAAAhB,GAAAsuB,KAAAlqB,SAAApE,EAAA,OAAuC,MAAAgF,KAAcwpB,GAAA,KAAWC,GAAAzpB,IAAY,QAAU,IAAM,IAAAupB,IAAAlL,GAAA,UAAAA,GAAA,YAA2C,QAAU,GAAAmL,GAAA,MAAAC,IAAsB,OAAAH,KAAe,gBAAAD,IAAAruB,GAA2B,GAAAujB,MAAAC,QAAA6K,KAAA,CAA0B,OAAAA,SAAc,GAAAK,OAAAC,YAAAjuB,OAAA2tB,KAAA,CAA2C,OAAAD,cAAAC,IAAAruB,OAAgC,CAAO,UAAA+uB,UAAA,0DAAlkB,GAEA,IAAAmD,MAAApyB,oBAAA,IAEA,IAAAsJ,KAAA,SAAAA,KAAA+oB,MACA,IAAAC,cAAAD,SAEA,IAAA7uB,KAAA,SAAAA,KAAA+qB,IAAAgE,IACA,IAAAC,KAAAjE,IAAAzjB,MAAA,EAAAyjB,IAAAjqB,QACAkuB,KAAAhvB,KAAA+uB,IACA,OAAAC,MAGA,IAAAC,eAAA,SAAAA,eAAAtD,KAAAC,OACA,IAAAC,MAAAhB,eAAAc,KAAA,GAEA,IAAAuD,GAAArD,MAAA,GACA,IAAAsD,GAAAtD,MAAA,GAEA,IAAAG,OAAAnB,eAAAe,MAAA,GAEA,IAAAwD,GAAApD,OAAA,GACA,IAAAqD,GAAArD,OAAA,GACA,OAAAkD,KAAAE,IAAAD,KAAAE,IAGA,IAAAC,UAAA,SAAAA,UAAAC,OAAAC,MACA,IAAA7yB,EAAA4yB,OAAAzuB,OACA,MAAAyuB,OAAAE,OAAA9yB,EAAA,UACAA,IAAA,EAEA,GAAA4yB,OAAAE,OAAA9yB,EAAA,UACAA,IAAA,EAEA,OAAA4yB,OAAAG,OAAA,EAAA/yB,IAGA,IAAAgzB,MAAA,SAAAA,MAAAC,OAAAC,QACA,IAAAC,IAAAF,OAAAG,QAAAF,QACA,OAAAP,UAAAQ,MAGA,IAAAE,kBAAA,SAAAA,kBAAAC,OACA,IAAAC,QAAAD,MAAAC,QACA,IAAAC,OAAAF,MAAAE,OAEA,IAAAC,QAAAD,OAAA3nB,IAAA,SAAA6nB,OACA,OAAAV,MAAAU,MAAA,KAEA,OAAAH,QAAA,IAAAE,QAAAE,KAAA,MAGA,IAAAjoB,MAAA,SAAAA,MAAAkoB,MAAAC,MACA,IAAAN,QAAAK,MAAAL,QACA,IAAAC,OAAAI,MAAAJ,OAEA,OAAAD,SACA,QACA,OAAAC,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAK,KAAA,IACA,QACA,OAAAA,KAAA,GAAAL,OAAA,IACA,QACA,YACA,QACA,OAAAA,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAA,OAAA,IACA,QACA,OAAAA,OAAA,GAAAA,OAAA,MAIA,IAAAM,gBAAA,SAAAA,gBAAAC,YAAA1hB,OAAAwhB,MACA,IAAAryB,EAAAuyB,YAAAP,OAEA,IAAAQ,aACAC,EAAA,SAAAA,EAAAF,YAAA1hB,OAAAwhB,MACA,IAAAK,MAAoBhxB,EAAA2wB,KAAA,GAAA1wB,EAAA3B,EAAA,KACpB,IAAA2yB,QAAA,EAAAlC,MAAAtB,iBAAAuD,IAAA7hB,QACA,GAAA8hB,OAAA,GAAAjxB,KAAA,EAAA+uB,MAAAtB,mBAAyDztB,EAAA2wB,KAAA,GAAA1wB,EAAA0wB,KAAA,MAAyB,GAAA3wB,EAAA,CAClF,OACAqwB,QAAA,IACAC,QAAAW,OAAA,GAAAhxB,QAES,CACT,OACAowB,QAAA,IACAC,QAAAW,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,MAIAixB,EAAA,SAAAA,EAAAL,YAAA1hB,OAAAwhB,MACA,IAAAK,MAAoBhxB,EAAA1B,EAAA,GAAA2B,EAAA0wB,KAAA,KACpB,IAAAM,QAAA,EAAAlC,MAAAtB,iBAAAuD,IAAA7hB,QACA,GAAA8hB,OAAA,GAAAhxB,KAAA,EAAA8uB,MAAAtB,mBAAyDztB,EAAA2wB,KAAA,GAAA1wB,EAAA0wB,KAAA,MAAyB,GAAA1wB,EAAA,CAClF,OACAowB,QAAA,IACAC,QAAAW,OAAA,GAAAjxB,QAES,CACT,OACAqwB,QAAA,IACAC,QAAAW,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,MAIAkxB,EAAA,SAAAA,EAAAN,YAAA1hB,OAAAwhB,MAEA,IAAA/yB,GAAA,EAAAmxB,MAAArB,kBAAApvB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA6Q,QAEA,IAAAiiB,UAAA9yB,EAAA,GACA,GAAA6Q,OAAA,GAAAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,MACAiiB,oBAAA,QAIA,IAAAJ,MAAoBhxB,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,KACpB,IAAA2yB,QAAA,EAAAlC,MAAAtB,iBAAAuD,IAAA7hB,QAEA,GAAAvR,EAAA2wB,aAAA,CACA,OACA8B,QAAA,IACAC,QAAAW,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,QAES,CACT,OACAowB,QAAA,IACAC,QAAA1yB,EAAA+vB,GAAA/vB,EAAAgwB,GAAAhwB,EAAAquB,GAAA3tB,EAAA,GAAA8yB,UAAAH,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,MAIAoxB,EAAA,SAAAA,EAAAR,YAAA1hB,OAAAwhB,MACA,IAAAK,MAAoBhxB,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,KAAsB0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,KAAsB0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,KAChE,IAAA2yB,QAAA,EAAAlC,MAAAtB,iBAAAuD,IAAA7hB,QACA,OACAkhB,QAAA,IACAC,QAAAW,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,EAAAgxB,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,EAAAgxB,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,KAGAqxB,EAAA,SAAAA,EAAAT,YAAA1hB,OAAAwhB,MACA,OACAN,QAAA,IACAC,YAGA9U,QAAA,SAAA+V,SAAAV,YAAA1hB,OAAAwhB,MACA,IAAAK,MAAoBhxB,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,KACpB,IAAA2yB,QAAA,EAAAlC,MAAAtB,iBAAAuD,IAAA7hB,QACA,IAAAqiB,UAAAX,YAAAP,OAAA7oB,MAAA,EAAAopB,YAAAP,OAAArvB,QACAuwB,UAAAje,OAAA,IAAA0d,OAAA,GAAAjxB,EAAAixB,OAAA,GAAAhxB,GACA,OACAowB,QAAAQ,YAAAR,QACAC,OAAAkB,aAKA,GAAAV,YAAAD,YAAAR,SAAA,CACA,OAAAS,YAAAD,YAAAR,SAAAQ,YAAA1hB,OAAAwhB,UACK,CACL,OAAAG,YAAA,WAAAD,YAAA1hB,OAAAwhB,QAIA,IAAAc,UAAA,SAAAA,UAAAC,KAAAtkB,GACA,gBAAAvM,GACA,IAAA8wB,YAAA9wB,IAAA,SAAA6wB,KAAA/oB,IAAA,SAAAipB,GACA,OAAA/wB,EAAA+wB,KACOzR,UACP,OAAA/S,EAAAykB,MAAA,KAAAF,QAIA,IAAAG,KAAA,SAAAA,KAAAjB,aACA,OAAA5qB,KAAA9F,KAAA8uB,cAAA4B,eAGA,OACAtpB,OAAAkqB,WAAA,kBAAAzxB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAAtwB,EAAAC,OAGA2H,OAAA6pB,WAAA,kBAAAzxB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAAtwB,EAAAC,OAGA8xB,QAAAN,WAAA,cAAAzxB,GACA,OAAA8xB,MACAzB,QAAA,IACAC,QAAAtwB,OAGAgyB,QAAAP,WAAA,cAAAxxB,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAArwB,OAGAgyB,UAAA,SAAAA,YACA,OAAAH,MACAzB,QAAA,IACAC,aAGA4B,QAAAT,WAAA,sCAAAlwB,GAAAC,GAAA2wB,GAAAC,GAAApyB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAA/uB,GAAAC,GAAA2wB,GAAAC,GAAApyB,EAAAC,OAGAoyB,cAAAZ,WAAA,4BAAAU,GAAAC,GAAApyB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAA6B,GAAAC,GAAApyB,EAAAC,OAGAqyB,SAAAb,WAAA,4BAAAlwB,GAAAC,GAAAxB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAA/uB,GAAAC,GAAAxB,EAAAC,OAGAsyB,eAAAd,WAAA,kBAAAzxB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAAtwB,EAAAC,OAGAuyB,IAAAf,WAAA,8DAAA9D,GAAAC,GAAA6E,KAAAC,aAAAtB,UAAApxB,EAAAC,GACA,OAAA6xB,MACAzB,QAAA,IACAC,QAAA3C,GAAAC,GAAA6E,KAAAC,aAAAtB,UAAApxB,EAAAC,OAGA0yB,UAAAlB,WAAA,sBACA,IAAA1wB,GAAAof,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GACA,IAAAnf,GAAAmf,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GAEA,GAAApf,KAAA,GAAAA,KAAA,GACA,IAAA6xB,KAAA,WACA,IAAAjC,MAAA,KACA,IAAAxhB,QAAA,QAAApO,GAAAC,IACA,IAAA6xB,gBAAA5D,cAAAtmB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAEA,OACAkI,EAAAP,KAAA4sB,kBATA,GAaA,UAAAD,OAAA,gBAAAA,KAAApsB,MACO,CACP,OAAAP,KAAAgpB,kBAGA6D,OAAArB,WAAA,4BAAAsB,OACA,IAAApF,GAAAxN,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GACA,IAAAyN,GAAAzN,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GAEA,GAAA4S,QAAA,GACA,IAAAC,MAAA,WACA,IAAArC,KAAA9gB,UACA,IAAAV,OAAAU,UACA,IAAAgjB,gBAAA5D,cAEA,GAAAtB,KAAA,GAAAC,KAAA,GACA+C,MAAA,KACAxhB,QAAA,SAAAwe,IAAAC,IACAiF,gCAAAlqB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAIA,IAAA20B,IAAAF,MAAA7xB,KAAA4sB,GAAA,IACA,IAAAE,IAAA9sB,KAAA8sB,IAAAiF,KACA,IAAAhF,IAAA/sB,KAAA+sB,IAAAgF,KAEAtC,MAAA,KACAxhB,QAAA6e,IAAAC,SAAAD,IAAA,KACA6E,gCAAAlqB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAGA,GAAAqvB,KAAA,GAAAC,KAAA,GACA+C,MAAA,KACAxhB,QAAA,QAAAwe,GAAAC,IACAiF,gCAAAlqB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAIA,OACAkI,EAAAP,KAAA4sB,kBAtCA,GA0CA,UAAAG,QAAA,gBAAAA,MAAAxsB,MACO,CACP,OAAAP,KAAAgpB,kBAGAiE,MAAAzB,WAAA,sBACA,IAAA9vB,GAAAwe,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GACA,IAAAve,GAAAue,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAAlO,GAAAwe,UAAA,GACA,kBACA,GAAAxe,KAAA,GAAAC,KAAA,GACA,IAAAuxB,MAAA,WACA,IAAAxC,MAAA,KACA,IAAAxhB,QAAAxN,GAAA,IAAAC,GAAA,KACA,IAAAixB,gBAAA5D,cAAAtmB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAEA,OACAkI,EAAAP,KAAA4sB,kBATA,GAaA,UAAAM,QAAA,gBAAAA,MAAA3sB,MACS,CACT,OAAAP,KAAAgpB,gBAjBA,KAqBAmE,OAAA3B,WAAA,oBACA,IAAAsB,MAAA5S,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GAEA,GAAA4S,QAAA,GACA,IAAAM,MAAA,WACA,IAAA1C,MAAA,KACA,IAAAxhB,QAAA,IAAAjO,KAAAoyB,IAAAP,MAAA7xB,KAAA4sB,GAAA,YACA,IAAA+E,gBAAA5D,cAAAtmB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAEA,OACAkI,EAAAP,KAAA4sB,kBATA,GAaA,UAAAQ,QAAA,gBAAAA,MAAA7sB,MACO,CACP,OAAAP,KAAAgpB,kBAGAsE,OAAA9B,WAAA,oBACA,IAAAsB,MAAA5S,UAAAlf,QAAA,GAAAkf,UAAA,KAAAtQ,UAAA,EAAAsQ,UAAA,GAEA,GAAA4S,QAAA,GACA,IAAAS,MAAA,WACA,IAAA7C,MAAA,KACA,IAAAxhB,QAAA,EAAAjO,KAAAoyB,IAAAP,MAAA7xB,KAAA4sB,GAAA,cACA,IAAA+E,gBAAA5D,cAAAtmB,IAAA,SAAAkoB,aACA,IAAAvyB,EAAAsyB,gBAAAC,YAAA1hB,OAAAwhB,MACAA,KAAAnoB,MAAAqoB,YAAAF,MACA,OAAAryB,IAEA,OACAkI,EAAAP,KAAA4sB,kBATA,GAaA,UAAAW,QAAA,gBAAAA,MAAAhtB,MACO,CACP,OAAAP,KAAAgpB,kBAGApnB,MAAA,SAAAA,QACA,OAAAonB,cAAAtmB,IAAAwnB,mBAAAM,KAAA,MAEAhqB,SAAA,SAAAA,WACA,OAAAoJ,UAAAhI,SAEA/D,OAAA,SAAAA,SACA,IAAAspB,MACA,IAAAuD,MAAA,KACA,IAAA8C,0BAAA,KACA,IAAAC,kBAAA,MACA,IAAAC,eAAA9jB,UAEA,IACA,QAAA+jB,UAAA3E,cAAA1D,OAAAC,YAAAqI,QAAqEJ,2BAAAI,MAAAD,UAAAlI,QAAAC,MAAgE8H,0BAAA,MACrI,IAAA5C,YAAAgD,MAAAh2B,MAEA,IAAAS,EAAAkK,MAAAqoB,YAAAF,MACAA,KAAAryB,EACA,GAAAA,EAAA,CACA8uB,GAAAjtB,KAAA7B,KAGO,MAAAuD,KACP6xB,kBAAA,KACAC,eAAA9xB,IACO,QACP,IACA,IAAA4xB,2BAAAG,UAAA,WACAA,UAAA,aAES,QACT,GAAAF,kBAAA,CACA,MAAAC,iBAKA,OAAAvG,IAEA0G,aAAA,SAAAA,eACA,OAAA7E,cAAAxnB,MAAA,EAAAwnB,cAAAhuB,SAEA8yB,QAAA,SAAAA,QAAAh0B,MACA,IAAAqtB,GAAAjuB,KAAA2E,SACA,IAAA+S,KAAAuW,MAAAnsB,OAAA,GACA,IAAAkc,MAAApd,KAAA+D,SAAA,GACA,IAAA+uB,gBAAAhjB,UACA,GAAAof,4BAAAhuB,OAAA,GAAAovB,UAAA,KACAwC,gBAAA9yB,KAAA+zB,eAAArsB,MAAA,GACA,IAAA2nB,eAAAvY,KAAAsG,OAAA,CACA0V,gBAAAmB,SACA3D,QAAA,IACAC,OAAAnT,aAGO,CACP0V,gBAAA9yB,KAAA+zB,eAEA,OAAA7tB,KAAA9G,KAAA20B,eAAApzB,OAAAmyB,qBAKA32B,QAAA,sBACA,OAAA+J,QAGA9J,OAAAD,gBAAA,yDC5cA,IAAAwQ,oBAAA/P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAMA,SAAAs3B,qCAAAtnB,KACAD,oBAAA1P,KAAAmC,KAAAwN,KAGAsnB,qCAAA71B,UAAA,IAAAsO,oBACAunB,qCAAA71B,UAAA81B,YAAAD,qCASAA,qCAAA71B,UAAAkQ,MAAA,SAAAtO,EAAAC,EAAAkD,GAAAC,IACA,IAAAZ,KAAArD,KAAAqD,KACAzB,GAAAf,EAAAmD,GAAAnC,GAAAf,EAAAmD,GAEA,IAAAZ,KAAAO,aAAA/C,EAAAC,GAAA,CACA,YAGA,GAAAd,KAAA0N,qBAAA,MACArK,KAAA8K,UAAAtN,EAAAC,GAAAk0B,OAAA,KAGA,GAAA3xB,KAAA8K,UAAAtN,EAAAC,KAAAd,KAAAoO,QAAA,CACA,OAAAvN,EAAAC,GAKA,GAAAc,KAAA,GAAAC,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,IACAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA,OAAAhB,EAAAC,GAGA,GAAAd,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAD,EAAAC,IAAAd,KAAAmP,MAAAtO,EAAAC,EAAAe,GAAAhB,EAAAC,GAAA,CACA,OAAAD,EAAAC,QAIA,CACA,GAAAc,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA,OAAAD,EAAAC,QAGA,CACA,GAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,IACAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA,OAAAD,EAAAC,KAOA,GAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA,OAAA7B,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAe,GAAAhB,EAAAC,OACK,CACL,cAUAg0B,qCAAA71B,UAAAiQ,eAAA,SAAAvO,MACA,IAAAI,OAAAJ,KAAAI,OACAF,EAAAF,KAAAE,EAAAC,EAAAH,KAAAG,EACAuC,KAAArD,KAAAqD,KACAW,GAAAC,GAAAgxB,GAAAC,GAAAtzB,GAAAC,GACA8M,aAAAwmB,cAAAC,aAAA13B,EAAAC,EAGA,GAAAoD,OAAA,CACAiD,GAAAjD,OAAAF,EACAoD,GAAAlD,OAAAD,EAEAc,IAAAf,EAAAmD,IAAAjC,KAAA+I,IAAA/I,KAAAO,IAAAzB,EAAAmD,IAAA,GACAnC,IAAAf,EAAAmD,IAAAlC,KAAA+I,IAAA/I,KAAAO,IAAAxB,EAAAmD,IAAA,GAGA,GAAArC,KAAA,GAAAC,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,KAEA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,KAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,KAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,UAIA,CACA,GAAAD,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,KACA,IAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,WAIA,CACA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,IACA,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,IAEA,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,YAOA,CACAq0B,cAAA9xB,KAAA4R,aAAAtU,KAAAtB,iBAAAG,qBACA,IAAA9B,EAAA,EAAAC,EAAAw3B,cAAArzB,OAA6CpE,EAAAC,IAAOD,EAAA,CACpD03B,aAAAD,cAAAz3B,GACAiR,UAAA3N,MAAAo0B,aAAAv0B,EAAAu0B,aAAAt0B,KAIA,OAAA6N,WAGA3R,OAAAD,QAAA+3B,mFCvJA,IAAAvnB,oBAAA/P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAMA,SAAA63B,+BAAA7nB,KACAD,oBAAA1P,KAAAmC,KAAAwN,KAGA6nB,+BAAAp2B,UAAA,IAAAsO,oBACA8nB,+BAAAp2B,UAAA81B,YAAAM,+BASAA,+BAAAp2B,UAAAkQ,MAAA,SAAAtO,EAAAC,EAAAkD,GAAAC,IACA,IAAAZ,KAAArD,KAAAqD,KACAzB,GAAAf,EAAAmD,GAAAnC,GAAAf,EAAAmD,GAEA,IAAAZ,KAAAO,aAAA/C,EAAAC,GAAA,CACA,YAGA,GAAAd,KAAA0N,qBAAA,MACArK,KAAA8K,UAAAtN,EAAAC,GAAAk0B,OAAA,KAGA,GAAA3xB,KAAA8K,UAAAtN,EAAAC,KAAAd,KAAAoO,QAAA,CACA,OAAAvN,EAAAC,GAKA,GAAAc,KAAA,GAAAC,KAAA,GAMA,GAAA7B,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAD,EAAAC,IAAAd,KAAAmP,MAAAtO,EAAAC,EAAAe,GAAAhB,EAAAC,GAAA,CACA,OAAAD,EAAAC,QAIA,CACA,GAAAc,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAC,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,IACAuC,KAAAO,aAAA/C,EAAAC,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,IACA,OAAAD,EAAAC,SAGA,GAAAe,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,KAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,KACAwB,KAAAO,aAAA/C,EAAA,EAAAC,KAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,IAAA,CACA,OAAAhB,EAAAC,KAWA,GAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA,OAAA7B,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAe,GAAAhB,EAAAC,OACK,CACL,cAUAu0B,+BAAAp2B,UAAAiQ,eAAA,SAAAvO,MACA,IAAAI,OAAAJ,KAAAI,OACAF,EAAAF,KAAAE,EAAAC,EAAAH,KAAAG,EACAuC,KAAArD,KAAAqD,KACAW,GAAAC,GAAAgxB,GAAAC,GAAAtzB,GAAAC,GACA8M,aAAAwmB,cAAAC,aAAA13B,EAAAC,EAGA,GAAAoD,OAAA,CACAiD,GAAAjD,OAAAF,EACAoD,GAAAlD,OAAAD,EAEAc,IAAAf,EAAAmD,IAAAjC,KAAA+I,IAAA/I,KAAAO,IAAAzB,EAAAmD,IAAA,GACAnC,IAAAf,EAAAmD,IAAAlC,KAAA+I,IAAA/I,KAAAO,IAAAxB,EAAAmD,IAAA,GAGA,GAAArC,KAAA,GAAAC,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,KAEA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,KAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,UAIA,CACA,IAAAyzB,eACA,GAAA1zB,KAAA,GACA0zB,eAAAjyB,KAAAO,aAAA/C,EAAAe,GAAAd,GACA,IAAAy0B,cAAAlyB,KAAAO,aAAA/C,EAAAC,EAAA,GACA,IAAA00B,iBAAAnyB,KAAAO,aAAA/C,EAAAC,EAAA,GAEA,GAAAw0B,eAAA,CACA3mB,UAAA3N,MAAAH,EAAAe,GAAAd,IACA,GAAAy0B,cAAA,CACA5mB,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,IAEA,GAAA00B,iBAAA,CACA7mB,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,KAGA,GAAAy0B,cAAA,CACA5mB,UAAA3N,MAAAH,EAAAC,EAAA,IAEA,GAAA00B,iBAAA,CACA7mB,UAAA3N,MAAAH,EAAAC,EAAA,UAGA,GAAAe,KAAA,GACAyzB,eAAAjyB,KAAAO,aAAA/C,EAAAC,EAAAe,IACA,IAAA4zB,gBAAApyB,KAAAO,aAAA/C,EAAA,EAAAC,GACA,IAAA40B,eAAAryB,KAAAO,aAAA/C,EAAA,EAAAC,GAEA,GAAAw0B,eAAA,CACA3mB,UAAA3N,MAAAH,EAAAC,EAAAe,KACA,GAAA4zB,gBAAA,CACA9mB,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,KAEA,GAAA6zB,eAAA,CACA/mB,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,MAGA,GAAA4zB,gBAAA,CACA9mB,UAAA3N,MAAAH,EAAA,EAAAC,IAEA,GAAA40B,eAAA,CACA/mB,UAAA3N,MAAAH,EAAA,EAAAC,WAMA,CACAq0B,cAAA9xB,KAAA4R,aAAAtU,KAAAtB,iBAAAI,qBACA,IAAA/B,EAAA,EAAAC,EAAAw3B,cAAArzB,OAA6CpE,EAAAC,IAAOD,EAAA,CACpD03B,aAAAD,cAAAz3B,GACAiR,UAAA3N,MAAAo0B,aAAAv0B,EAAAu0B,aAAAt0B,KAIA,OAAA6N,WAGA3R,OAAAD,QAAAs4B,6EC1KA,IAAA9nB,oBAAA/P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAMA,SAAAm4B,wBAAAnoB,KACAD,oBAAA1P,KAAAmC,KAAAwN,KAGAmoB,wBAAA12B,UAAA,IAAAsO,oBACAooB,wBAAA12B,UAAA81B,YAAAY,wBASAA,wBAAA12B,UAAAkQ,MAAA,SAAAtO,EAAAC,EAAAkD,GAAAC,IACA,IAAAZ,KAAArD,KAAAqD,KACAzB,GAAAf,EAAAmD,GAAAnC,GAAAf,EAAAmD,GAEA,IAAAZ,KAAAO,aAAA/C,EAAAC,GAAA,CACA,YAGA,GAAAd,KAAA0N,qBAAA,MACArK,KAAA8K,UAAAtN,EAAAC,GAAAk0B,OAAA,KAGA,GAAA3xB,KAAA8K,UAAAtN,EAAAC,KAAAd,KAAAoO,QAAA,CACA,OAAAvN,EAAAC,GAKA,GAAAc,KAAA,GAAAC,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,IACAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA,OAAAhB,EAAAC,GAGA,GAAAd,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAD,EAAAC,IAAAd,KAAAmP,MAAAtO,EAAAC,EAAAe,GAAAhB,EAAAC,GAAA,CACA,OAAAD,EAAAC,QAIA,CACA,GAAAc,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA,OAAAD,EAAAC,QAGA,CACA,GAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,IACAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,MAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA,OAAAD,EAAAC,KAKA,OAAAd,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAe,GAAAhB,EAAAC,IASA60B,wBAAA12B,UAAAiQ,eAAA,SAAAvO,MACA,IAAAI,OAAAJ,KAAAI,OACAF,EAAAF,KAAAE,EAAAC,EAAAH,KAAAG,EACAuC,KAAArD,KAAAqD,KACAW,GAAAC,GAAAgxB,GAAAC,GAAAtzB,GAAAC,GACA8M,aAAAwmB,cAAAC,aAAA13B,EAAAC,EAGA,GAAAoD,OAAA,CACAiD,GAAAjD,OAAAF,EACAoD,GAAAlD,OAAAD,EAEAc,IAAAf,EAAAmD,IAAAjC,KAAA+I,IAAA/I,KAAAO,IAAAzB,EAAAmD,IAAA,GACAnC,IAAAf,EAAAmD,IAAAlC,KAAA+I,IAAA/I,KAAAO,IAAAxB,EAAAmD,IAAA,GAGA,GAAArC,KAAA,GAAAC,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,KAEA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAe,GAAAd,EAAAe,UAIA,CACA,GAAAD,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,KAEA,IAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,EAAAe,UAGA,CACA,GAAAwB,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,IAEA,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,IAEA,IAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,EAAA,WAMA,CACAq0B,cAAA9xB,KAAA4R,aAAAtU,KAAAtB,iBAAAC,QACA,IAAA5B,EAAA,EAAAC,EAAAw3B,cAAArzB,OAA6CpE,EAAAC,IAAOD,EAAA,CACpD03B,aAAAD,cAAAz3B,GACAiR,UAAA3N,MAAAo0B,aAAAv0B,EAAAu0B,aAAAt0B,KAIA,OAAA6N,WAGA3R,OAAAD,QAAA44B,sECjJA,IAAApoB,oBAAA/P,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAMA,SAAAo4B,uBAAApoB,KACAD,oBAAA1P,KAAAmC,KAAAwN,KAGAooB,uBAAA32B,UAAA,IAAAsO,oBACAqoB,uBAAA32B,UAAA81B,YAAAa,uBASAA,uBAAA32B,UAAAkQ,MAAA,SAAAtO,EAAAC,EAAAkD,GAAAC,IACA,IAAAZ,KAAArD,KAAAqD,KACAzB,GAAAf,EAAAmD,GAAAnC,GAAAf,EAAAmD,GAEA,IAAAZ,KAAAO,aAAA/C,EAAAC,GAAA,CACA,YAGA,GAAAd,KAAA0N,qBAAA,MACArK,KAAA8K,UAAAtN,EAAAC,GAAAk0B,OAAA,KAGA,GAAA3xB,KAAA8K,UAAAtN,EAAAC,KAAAd,KAAAoO,QAAA,CACA,OAAAvN,EAAAC,GAGA,GAAAc,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAC,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,IACAuC,KAAAO,aAAA/C,EAAAC,EAAA,KAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,EAAA,IACA,OAAAD,EAAAC,SAGA,GAAAe,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,KAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,KACAwB,KAAAO,aAAA/C,EAAA,EAAAC,KAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,EAAAe,IAAA,CACA,OAAAhB,EAAAC,GAGA,GAAAd,KAAAmP,MAAAtO,EAAA,EAAAC,EAAAD,EAAAC,IAAAd,KAAAmP,MAAAtO,EAAA,EAAAC,EAAAD,EAAAC,GAAA,CACA,OAAAD,EAAAC,QAGA,CACA,UAAA+W,MAAA,sDAGA,OAAA7X,KAAAmP,MAAAtO,EAAAe,GAAAd,EAAAe,GAAAhB,EAAAC,IASA80B,uBAAA32B,UAAAiQ,eAAA,SAAAvO,MACA,IAAAI,OAAAJ,KAAAI,OACAF,EAAAF,KAAAE,EAAAC,EAAAH,KAAAG,EACAuC,KAAArD,KAAAqD,KACAW,GAAAC,GAAAgxB,GAAAC,GAAAtzB,GAAAC,GACA8M,aAAAwmB,cAAAC,aAAA13B,EAAAC,EAGA,GAAAoD,OAAA,CACAiD,GAAAjD,OAAAF,EACAoD,GAAAlD,OAAAD,EAEAc,IAAAf,EAAAmD,IAAAjC,KAAA+I,IAAA/I,KAAAO,IAAAzB,EAAAmD,IAAA,GACAnC,IAAAf,EAAAmD,IAAAlC,KAAA+I,IAAA/I,KAAAO,IAAAxB,EAAAmD,IAAA,GAEA,GAAArC,KAAA,GACA,GAAAyB,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAC,EAAA,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,MAAAH,EAAAC,EAAA,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAe,GAAAd,GAAA,CACA6N,UAAA3N,MAAAH,EAAAe,GAAAd,UAGA,GAAAe,KAAA,GACA,GAAAwB,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,IAEA,GAAAuC,KAAAO,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,MAAAH,EAAA,EAAAC,IAEA,GAAAuC,KAAAO,aAAA/C,EAAAC,EAAAe,IAAA,CACA8M,UAAA3N,MAAAH,EAAAC,EAAAe,WAKA,CACAszB,cAAA9xB,KAAA4R,aAAAtU,KAAAtB,iBAAAE,OACA,IAAA7B,EAAA,EAAAC,EAAAw3B,cAAArzB,OAA6CpE,EAAAC,IAAOD,EAAA,CACpD03B,aAAAD,cAAAz3B,GACAiR,UAAA3N,MAAAo0B,aAAAv0B,EAAAu0B,aAAAt0B,KAIA,OAAA6N,WAGA3R,OAAAD,QAAA64B,qECpHA,IAAAv2B,iBAAA7B,oBAAA,GACA,IAAAo4B,uBAAAp4B,oBAAA,IACA,IAAAm4B,wBAAAn4B,oBAAA,IACA,IAAA63B,+BAAA73B,oBAAA,IACA,IAAAs3B,qCAAAt3B,oBAAA,IAUA,SAAAgS,gBAAAhC,KACAA,YACA,GAAAA,IAAAiC,mBAAApQ,iBAAAE,MAAA,CACA,WAAAq2B,uBAAApoB,UACK,GAAAA,IAAAiC,mBAAApQ,iBAAAC,OAAA,CACL,WAAAq2B,wBAAAnoB,UACK,GAAAA,IAAAiC,mBAAApQ,iBAAAI,oBAAA,CACL,WAAA41B,+BAAA7nB,SACK,CACL,WAAAsnB,qCAAAtnB,MAIAxQ,OAAAD,QAAAyS,8DC9BA,IAAAnC,KAAA7P,oBAAA,GACA,IAAA8P,UAAA9P,oBAAA,IACA,IAAA2X,KAAA3X,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GA8BA,SAAAq4B,cAAAroB,KACAA,YACAxN,KAAAyU,cAAAjH,IAAAiH,cACAzU,KAAA0U,iBAAAlH,IAAAkH,iBACA1U,KAAAyP,iBAAAjC,IAAAiC,iBACAzP,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,UACAxK,KAAA2U,OAAAnH,IAAAmH,QAAA,EACA3U,KAAA81B,eAAAtoB,IAAAsoB,gBAAA,MACA91B,KAAA+1B,UAAAvoB,IAAAuoB,WAAAjP,SAEA,IAAA9mB,KAAAyP,iBAAA,CACA,IAAAzP,KAAAyU,cAAA,CACAzU,KAAAyP,iBAAApQ,iBAAAE,UACS,CACT,GAAAS,KAAA0U,iBAAA,CACA1U,KAAAyP,iBAAApQ,iBAAAI,wBACa,CACbO,KAAAyP,iBAAApQ,iBAAAG,sBAOA,GAAAQ,KAAAyP,mBAAApQ,iBAAAE,MAAA,CACAS,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA9C,cACK,CACLxK,KAAAyN,UAAAD,IAAAC,WAAAH,UAAA5C,QAWAmrB,cAAA52B,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MAEA,IAAA2yB,aAAA,EAGA,IAAAC,WAAA,IAAA9qB,MAAAC,UAGA,IAAAgE,EAAA,SAAA1N,EAAAC,GACA,OAAA3B,KAAAyN,UAAA1L,KAAAO,IAAAX,EAAAd,EAAAa,EAAAb,GAAAkB,KAAAO,IAAAX,EAAAb,EAAAY,EAAAZ,KACKyZ,KAAAva,MAGL,IAAAk2B,KAAA,SAAAx0B,EAAAC,GACA,OAAAD,EAAAb,IAAAc,EAAAd,GAAAa,EAAAZ,IAAAa,EAAAb,EAAA,EAAAiB,KAAA6I,OAeA,IAAAurB,OAAA,SAAAx1B,KAAA0N,EAAA+nB,OAAAC,MAAAC,OACAN,eAGA,GAAAh2B,KAAA+1B,UAAA,IACA,IAAA5qB,MAAAC,UAAA6qB,UAAAj2B,KAAA+1B,UAAA,KAEA,OAAAjP,SAGA,IAAA7Y,EAAAI,EAAAe,EAAAzO,KAAAmQ,KAAA9Q,KAAA2U,OAGA,GAAA1G,EAAAmoB,OAAA,CACA,OAAAnoB,EAGA,GAAAtN,MAAAmQ,IAAA,CACAulB,MAAAC,QAAA31B,KAAAE,EAAAF,KAAAG,GACA,OAAAH,KAGA,IAAA2nB,IAAAiO,EAAA9D,EAAA+D,UAEA,IAAAC,WAAApzB,KAAA4R,aAAAtU,KAAAX,KAAAyP,kBAUA,IAAAgjB,EAAA,EAAAnK,IAAAxB,SAAmC0P,UAAAC,WAAAhE,KAA2BA,EAAA,CAE9D,GAAAzyB,KAAA81B,eAAA,CAGAU,UAAAE,YAAAF,UAAAE,YAAA,KAEA,GAAAF,UAAAxB,SAAA,MACAwB,UAAAxB,OAAA,MAIAuB,EAAAJ,OAAAK,UAAAnoB,EAAA6nB,KAAAv1B,KAAA61B,WAAAJ,OAAAC,MAAAC,MAAA,GAEA,GAAAC,aAAAphB,KAAA,CACAkhB,MAAAC,QAAA31B,KAAAE,EAAAF,KAAAG,GAIA,OAAAy1B,EAIA,GAAAv2B,KAAA81B,kBAAAU,UAAAE,cAAA,GACAF,UAAAxB,OAAA,MAGA,GAAAuB,EAAAjO,IAAA,CACAA,IAAAiO,GAIA,OAAAjO,KAEK/N,KAAAva,MAGL,IAAA6Q,MAAAxN,KAAA8K,UAAAP,OAAAC,QACA,IAAAiD,IAAAzN,KAAA8K,UAAAL,KAAAC,MAIA,IAAA4oB,OAAAvnB,EAAAyB,MAAAC,KAEA,IAAA3N,EAAAkzB,MAAAE,EAGA,IAAApzB,EAAA,EAAe,OAAMA,EAAA,CAErBkzB,SAGAE,EAAAJ,OAAAtlB,MAAA,EAAA8lB,OAAAN,MAAA,GAGA,GAAAE,IAAAzP,SAAA,CACA,SAKA,GAAAyP,aAAAphB,KAAA,CACA,OAAAkhB,MAKAM,OAAAJ,EAIA,UAGAv5B,OAAAD,QAAA84B,4DChNA,IAAArhB,cAAAhX,oBAAA,IAaA,SAAAo5B,iBAAAppB,KACAgH,cAAA3W,KAAAmC,KAAAwN,KACAxN,KAAAyN,UAAA,SAAA7L,GAAAC,IACA,UAIA+0B,iBAAA33B,UAAA,IAAAuV,cACAoiB,iBAAA33B,UAAA81B,YAAA6B,iBAEA55B,OAAAD,QAAA65B,+DCvBA,IAAAvpB,KAAA7P,oBAAA,GACA,IAAA6B,iBAAA7B,oBAAA,GAYA,SAAAq5B,qBAAArpB,KACAA,YACAxN,KAAAyU,cAAAjH,IAAAiH,cACAzU,KAAA0U,iBAAAlH,IAAAkH,iBACA1U,KAAAyP,iBAAAjC,IAAAiC,iBAEA,IAAAzP,KAAAyP,iBAAA,CACA,IAAAzP,KAAAyU,cAAA,CACAzU,KAAAyP,iBAAApQ,iBAAAE,UACS,CACT,GAAAS,KAAA0U,iBAAA,CACA1U,KAAAyP,iBAAApQ,iBAAAI,wBACa,CACbO,KAAAyP,iBAAApQ,iBAAAG,uBAYAq3B,qBAAA53B,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MACA,IAAA6K,UAAA7K,KAAA8K,UAAAP,OAAAC,QACAO,QAAA/K,KAAA8K,UAAAL,KAAAC,MACA8G,iBAAAC,eACAnG,UAAAC,SAAAjO,KACA8O,iBAAAzP,KAAAyP,iBACAsF,SAAA,EAAAC,OAAA,EACAtX,EAAAC,EAGAkX,cAAA7T,KAAAkN,WACAA,UAAAI,OAAA,KACAJ,UAAAgf,GAAAnY,SAEAD,YAAA9T,KAAAoN,SACAA,QAAAE,OAAA,KACAF,QAAA8e,GAAAlY,OAGA,MAAAH,cAAA/S,QAAAgT,YAAAhT,OAAA,CAIAnB,KAAAkU,cAAAiiB,QACAn2B,KAAA8N,OAAA,KAEAE,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAEA,GAAAkR,SAAAH,OAAA,CACA,SAEA,GAAAG,SAAAN,OAAA,CAGA,GAAAM,SAAAse,KAAAlY,OAAA,CACA,OAAA3H,KAAAnM,YAAAP,KAAAiO,UAEA,SAEAiG,cAAA7T,KAAA4N,UACAA,SAAA7N,OAAAJ,KACAiO,SAAAN,OAAA,KACAM,SAAAse,GAAAnY,SAKApU,KAAAmU,YAAAgiB,QACAn2B,KAAA8N,OAAA,KAEAE,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAEA,GAAAkR,SAAAH,OAAA,CACA,SAEA,GAAAG,SAAAN,OAAA,CACA,GAAAM,SAAAse,KAAAnY,SAAA,CACA,OAAA1H,KAAAnM,YAAA0N,SAAAjO,MAEA,SAEAmU,YAAA9T,KAAA4N,UACAA,SAAA7N,OAAAJ,KACAiO,SAAAN,OAAA,KACAM,SAAAse,GAAAlY,QAKA,UAGAhY,OAAAD,QAAA85B,mEClHA,IAAAriB,cAAAhX,oBAAA,IAeA,SAAAu5B,kBAAAvpB,KACAgH,cAAA3W,KAAAmC,KAAAwN,KAEA,IAAAwpB,KAAAh3B,KAAAyN,UACAzN,KAAAyN,UAAA,SAAA7L,GAAAC,IACA,OAAAm1B,KAAAp1B,GAAAC,IAAA,KAIAk1B,kBAAA93B,UAAA,IAAAuV,cACAuiB,kBAAA93B,UAAA81B,YAAAgC,kBAEA/5B,OAAAD,QAAAg6B,gEC3BA,IAAA7hB,YAAA1X,oBAAA,IAaA,SAAAy5B,eAAAzpB,KACA0H,YAAArX,KAAAmC,KAAAwN,KACAxN,KAAAyN,UAAA,SAAA7L,GAAAC,IACA,UAIAo1B,eAAAh4B,UAAA,IAAAiW,YACA+hB,eAAAh4B,UAAA81B,YAAAkC,eAEAj6B,OAAAD,QAAAk6B,6DCvBA,IAAA5pB,KAAA7P,oBAAA,GACA,IAAA6B,iBAAA7B,oBAAA,GAYA,SAAA05B,mBAAA1pB,KACAA,YACAxN,KAAAyU,cAAAjH,IAAAiH,cACAzU,KAAA0U,iBAAAlH,IAAAkH,iBACA1U,KAAAyP,iBAAAjC,IAAAiC,iBAEA,IAAAzP,KAAAyP,iBAAA,CACA,IAAAzP,KAAAyU,cAAA,CACAzU,KAAAyP,iBAAApQ,iBAAAE,UACS,CACT,GAAAS,KAAA0U,iBAAA,CACA1U,KAAAyP,iBAAApQ,iBAAAI,wBACa,CACbO,KAAAyP,iBAAApQ,iBAAAG,uBAWA03B,mBAAAj4B,UAAA0O,SAAA,SAAAC,OAAAC,OAAAC,KAAAC,KAAA1K,MACA,IAAA2K,YACAyB,iBAAAzP,KAAAyP,iBACAvB,UAAA7K,KAAA8K,UAAAP,OAAAC,QACAO,QAAA/K,KAAA8K,UAAAL,KAAAC,MACAY,UAAAC,SAAAjO,KAAAjD,EAAAC,EAGAqQ,SAAAhN,KAAAkN,WACAA,UAAAI,OAAA,KAGA,MAAAN,SAAAlM,OAAA,CAEAnB,KAAAqN,SAAA8oB,QACAn2B,KAAA8N,OAAA,KAGA,GAAA9N,OAAAyN,QAAA,CACA,OAAAf,KAAA3M,UAAA0N,SAGAO,UAAAtL,KAAA4R,aAAAtU,KAAA8O,kBACA,IAAA/R,EAAA,EAAAC,EAAAgR,UAAA7M,OAAyCpE,EAAAC,IAAOD,EAAA,CAChDkR,SAAAD,UAAAjR,GAGA,GAAAkR,SAAAH,QAAAG,SAAAN,OAAA,CACA,SAGAN,SAAAhN,KAAA4N,UACAA,SAAAN,OAAA,KACAM,SAAA7N,OAAAJ,MAKA,UAGA3D,OAAAD,QAAAm6B,iEC9EA,IAAAhiB,YAAA1X,oBAAA,IAeA,SAAA25B,gBAAA3pB,KACA0H,YAAArX,KAAAmC,KAAAwN,KAEA,IAAAwpB,KAAAh3B,KAAAyN,UACAzN,KAAAyN,UAAA,SAAA7L,GAAAC,IACA,OAAAm1B,KAAAp1B,GAAAC,IAAA,KAIAs1B,gBAAAl4B,UAAA,IAAAiW,YACAiiB,gBAAAl4B,UAAA81B,YAAAoC,gBAEAn6B,OAAAD,QAAAo6B,8DC3BA,IAAAhiB,KAAA3X,oBAAA,IACA,IAAA6B,iBAAA7B,oBAAA,GAUA,SAAA0S,KAAAknB,gBAAA7sB,OAAAyF,QACA,IAAA1F,MAEA,UAAA8sB,kBAAA,UACA9sB,MAAA8sB,oBACK,CACL7sB,OAAA6sB,gBAAAt1B,OACAwI,MAAA8sB,gBAAA,GAAAt1B,OACAkO,OAAAonB,gBAOAp3B,KAAAsK,YAKAtK,KAAAuK,cAKAvK,KAAA8f,MAAA9f,KAAAq3B,YAAA/sB,MAAAC,OAAAyF,QAYAE,KAAAjR,UAAAo4B,YAAA,SAAA/sB,MAAAC,OAAAyF,QACA,IAAAtS,EAAAyF,EACA2c,MAAA,IAAAmB,MAAA1W,QAEA,IAAA7M,EAAA,EAAeA,EAAA6M,SAAY7M,EAAA,CAC3BoiB,MAAApiB,GAAA,IAAAujB,MAAA3W,OACA,IAAAnH,EAAA,EAAmBA,EAAAmH,QAAWnH,EAAA,CAC9B2c,MAAApiB,GAAAyF,GAAA,IAAAgS,KAAAhS,EAAAzF,IAKA,GAAAsS,SAAAU,UAAA,CACA,OAAAoP,MAGA,GAAA9P,OAAAlO,SAAAyI,QAAAyF,OAAA,GAAAlO,SAAAwI,MAAA,CACA,UAAAuN,MAAA,4BAGA,IAAAna,EAAA,EAAeA,EAAA6M,SAAY7M,EAAA,CAC3B,IAAAyF,EAAA,EAAmBA,EAAAmH,QAAWnH,EAAA,CAC9B,GAAA6M,OAAAtS,GAAAyF,GAAA,CAGA2c,MAAApiB,GAAAyF,GAAAiS,SAAA,QAKA,OAAA0K,OAIA5P,KAAAjR,UAAAkP,UAAA,SAAAtN,EAAAC,GACA,OAAAd,KAAA8f,MAAAhf,GAAAD,IAWAqP,KAAAjR,UAAA2E,aAAA,SAAA/C,EAAAC,GACA,OAAAd,KAAAs3B,SAAAz2B,EAAAC,IAAAd,KAAA8f,MAAAhf,GAAAD,GAAAuU,UAaAlF,KAAAjR,UAAAq4B,SAAA,SAAAz2B,EAAAC,GACA,OAAAD,GAAA,GAAAA,EAAAb,KAAAsK,QAAAxJ,GAAA,GAAAA,EAAAd,KAAAuK,SAWA2F,KAAAjR,UAAAs4B,cAAA,SAAA12B,EAAAC,EAAAsU,UACApV,KAAA8f,MAAAhf,GAAAD,GAAAuU,mBAsBAlF,KAAAjR,UAAAgW,aAAA,SAAAtU,KAAA8O,kBACA,IAAA5O,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA6N,aACA6oB,GAAA,MAAAC,GAAA,MACA9J,GAAA,MAAA+J,GAAA,MACA9J,GAAA,MAAA+J,GAAA,MACAC,GAAA,MAAAC,GAAA,MACA/X,MAAA9f,KAAA8f,MAGA,GAAA9f,KAAA4D,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,IACA22B,GAAA,KAGA,GAAAx3B,KAAA4D,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,KAAA8e,MAAAhf,GAAAD,EAAA,IACA8sB,GAAA,KAGA,GAAA3tB,KAAA4D,aAAA/C,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,IACA+sB,GAAA,KAGA,GAAA5tB,KAAA4D,aAAA/C,EAAA,EAAAC,GAAA,CACA6N,UAAA3N,KAAA8e,MAAAhf,GAAAD,EAAA,IACA+2B,GAAA,KAGA,GAAAnoB,mBAAApQ,iBAAAE,MAAA,CACA,OAAAoP,UAGA,GAAAc,mBAAApQ,iBAAAI,oBAAA,CACAg4B,GAAAG,IAAAJ,GACAE,GAAAF,IAAA7J,GACAgK,GAAAhK,IAAAC,GACAiK,GAAAjK,IAAAgK,QACK,GAAAnoB,mBAAApQ,iBAAAG,oBAAA,CACLi4B,GAAAG,IAAAJ,GACAE,GAAAF,IAAA7J,GACAgK,GAAAhK,IAAAC,GACAiK,GAAAjK,IAAAgK,QACK,GAAAnoB,mBAAApQ,iBAAAC,OAAA,CACLm4B,GAAA,KACAC,GAAA,KACAC,GAAA,KACAE,GAAA,SACK,CACL,UAAAhgB,MAAA,uCAIA,GAAA4f,IAAAz3B,KAAA4D,aAAA/C,EAAA,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,EAAA,IAGA,GAAA62B,IAAA13B,KAAA4D,aAAA/C,EAAA,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,EAAA,IAGA,GAAA82B,IAAA33B,KAAA4D,aAAA/C,EAAA,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,EAAA,IAGA,GAAAg3B,IAAA73B,KAAA4D,aAAA/C,EAAA,EAAAC,EAAA,IACA6N,UAAA3N,KAAA8e,MAAAhf,EAAA,GAAAD,EAAA,IAGA,OAAA8N,WAQAuB,KAAAjR,UAAA8K,MAAA,WACA,IAAArM,EAAAyF,EAEAmH,MAAAtK,KAAAsK,MACAC,OAAAvK,KAAAuK,OACAutB,UAAA93B,KAAA8f,MAEAiY,QAAA,IAAA7nB,KAAA5F,MAAAC,QACAytB,SAAA,IAAA/W,MAAA1W,QAEA,IAAA7M,EAAA,EAAeA,EAAA6M,SAAY7M,EAAA,CAC3Bs6B,SAAAt6B,GAAA,IAAAujB,MAAA3W,OACA,IAAAnH,EAAA,EAAmBA,EAAAmH,QAAWnH,EAAA,CAC9B60B,SAAAt6B,GAAAyF,GAAA,IAAAgS,KAAAhS,EAAAzF,EAAAo6B,UAAAp6B,GAAAyF,GAAAiS,WAIA2iB,QAAAjY,MAAAkY,SAEA,OAAAD,SAGA/6B,OAAAD,QAAAmT,+BCpPAlT,OAAAD,QAAA,SAAAC,QACA,IAAAA,OAAAi7B,gBAAA,CACAj7B,OAAAk7B,UAAA,aACAl7B,OAAA8gB,SAEA,IAAA9gB,OAAAgZ,SAAAhZ,OAAAgZ,YACA5X,OAAAC,eAAArB,OAAA,UACAuB,WAAA,KACAC,IAAA,WACA,OAAAxB,OAAAW,KAGAS,OAAAC,eAAArB,OAAA,MACAuB,WAAA,KACAC,IAAA,WACA,OAAAxB,OAAAU,KAGAV,OAAAi7B,gBAAA,EAEA,OAAAj7B,uDCpBA,SAAAA,SACA,WACA,IAAAoQ,KAAA+qB,WAAA/nB,MAAAgoB,QAAAC,QAAAC,SAAAC,YAAAC,YAAAC,OAAAnQ,IAAAoQ,SAAAC,UAAAtpB,WAAAupB,UAAAC,QAEAzoB,MAAArO,KAAAqO,MAAAkY,IAAAvmB,KAAAumB,IAOA6P,WAAA,SAAAt3B,EAAAC,GACA,GAAAD,EAAAC,EAAA,CACA,SAEA,GAAAD,EAAAC,EAAA,CACA,SAEA,UAaA23B,OAAA,SAAA/2B,EAAAb,EAAAi4B,GAAAC,GAAAnkB,KACA,IAAAokB,IACA,GAAAF,IAAA,MACAA,GAAA,EAEA,GAAAlkB,KAAA,MACAA,IAAAujB,WAEA,GAAAW,GAAA,GACA,UAAAjhB,MAAA,2BAEA,GAAAkhB,IAAA,MACAA,GAAAr3B,EAAAI,OAEA,MAAAg3B,GAAAC,GAAA,CACAC,IAAA5oB,OAAA0oB,GAAAC,IAAA,GACA,GAAAnkB,IAAA/T,EAAAa,EAAAs3B,MAAA,GACAD,GAAAC,QACO,CACPF,GAAAE,IAAA,GAGA,SAAA5kB,OAAAse,MAAAhxB,GAAAo3B,UAAAv3B,OAAAV,OAQAy3B,SAAA,SAAAW,MAAAjgB,KAAApE,KACA,GAAAA,KAAA,MACAA,IAAAujB,WAEAc,MAAAj4B,KAAAgY,MACA,OAAA4f,UAAAK,MAAA,EAAAA,MAAAn3B,OAAA,EAAA8S,MAQAyjB,QAAA,SAAAY,MAAArkB,KACA,IAAAskB,QAAAC,WACA,GAAAvkB,KAAA,MACAA,IAAAujB,WAEAe,QAAAD,MAAAzqB,MACA,GAAAyqB,MAAAn3B,OAAA,CACAq3B,WAAAF,MAAA,GACAA,MAAA,GAAAC,QACAL,QAAAI,MAAA,EAAArkB,SACK,CACLukB,WAAAD,QAEA,OAAAC,YAeAX,YAAA,SAAAS,MAAAjgB,KAAApE,KACA,IAAAukB,WACA,GAAAvkB,KAAA,MACAA,IAAAujB,WAEAgB,WAAAF,MAAA,GACAA,MAAA,GAAAjgB,KACA6f,QAAAI,MAAA,EAAArkB,KACA,OAAAukB,YAQAZ,YAAA,SAAAU,MAAAjgB,KAAApE,KACA,IAAA+X,KACA,GAAA/X,KAAA,MACAA,IAAAujB,WAEA,GAAAc,MAAAn3B,QAAA8S,IAAAqkB,MAAA,GAAAjgB,MAAA,GACA2T,MAAAsM,MAAA,GAAAjgB,WAAA2T,KAAA,GAAAsM,MAAA,GAAAtM,KAAA,GACAkM,QAAAI,MAAA,EAAArkB,KAEA,OAAAoE,MAQAof,QAAA,SAAAa,MAAArkB,KACA,IAAAlX,EAAAqjB,GAAAqY,GAAAC,KAAA1M,KAAA2M,MAAAC,SAAAC,UACA,GAAA5kB,KAAA,MACAA,IAAAujB,WAEAmB,MAAA,WACAE,aACA,QAAAJ,GAAA,EAAAzM,KAAAvc,MAAA6oB,MAAAn3B,OAAA,GAAsD,GAAA6qB,KAAAyM,GAAAzM,KAAAyM,GAAAzM,KAAmC,GAAAA,KAAAyM,UAAA,CAA0BI,UAAAx4B,KAAAo4B,IACnH,OAAAI,WACK9G,MAAA1yB,MAAAiB,UACLs4B,YACA,IAAAxY,GAAA,EAAAsY,KAAAC,MAAAx3B,OAAqCif,GAAAsY,KAAWtY,KAAA,CAChDrjB,EAAA47B,MAAAvY,IACAwY,SAAAv4B,KAAA63B,QAAAI,MAAAv7B,EAAAkX,MAEA,OAAA2kB,UASAlqB,WAAA,SAAA4pB,MAAAjgB,KAAApE,KACA,IAAAyL,IACA,GAAAzL,KAAA,MACAA,IAAAujB,WAEA9X,IAAA4Y,MAAAxlB,QAAAuF,MACA,GAAAqH,OAAA,GACA,OAEAuY,UAAAK,MAAA,EAAA5Y,IAAAzL,KACA,OAAAikB,QAAAI,MAAA5Y,IAAAzL,MAQA8jB,SAAA,SAAAO,MAAAt6B,EAAAiW,KACA,IAAA6kB,KAAAC,OAAA3Y,GAAAsY,KAAA1M,KACA,GAAA/X,KAAA,MACAA,IAAAujB,WAEAuB,OAAAT,MAAA3wB,MAAA,EAAA3J,GACA,IAAA+6B,OAAA53B,OAAA,CACA,OAAA43B,OAEAtB,QAAAsB,OAAA9kB,KACA+X,KAAAsM,MAAA3wB,MAAA3J,GACA,IAAAoiB,GAAA,EAAAsY,KAAA1M,KAAA7qB,OAAoCif,GAAAsY,KAAWtY,KAAA,CAC/C0Y,KAAA9M,KAAA5L,IACAwX,YAAAmB,OAAAD,KAAA7kB,KAEA,OAAA8kB,OAAAC,KAAA/kB,KAAA3T,WAQA03B,UAAA,SAAAM,MAAAt6B,EAAAiW,KACA,IAAA6kB,KAAA/7B,EAAAk8B,IAAAF,OAAA3Y,GAAAqY,GAAAC,KAAA1M,KAAA2M,MAAAC,SACA,GAAA3kB,KAAA,MACAA,IAAAujB,WAEA,GAAAx5B,EAAA,IAAAs6B,MAAAn3B,OAAA,CACA43B,OAAAT,MAAA3wB,MAAA,EAAA3J,GAAAg7B,KAAA/kB,KACA,IAAA8kB,OAAA53B,OAAA,CACA,OAAA43B,OAEAE,IAAAF,cAAA53B,OAAA,GACA6qB,KAAAsM,MAAA3wB,MAAA3J,GACA,IAAAoiB,GAAA,EAAAsY,KAAA1M,KAAA7qB,OAAsCif,GAAAsY,KAAWtY,KAAA,CACjD0Y,KAAA9M,KAAA5L,IACA,GAAAnM,IAAA6kB,KAAAG,KAAA,GACAnB,OAAAiB,OAAAD,KAAA,OAAA7kB,KACA8kB,OAAAlrB,MACAorB,IAAAF,cAAA53B,OAAA,IAGA,OAAA43B,OAEAtB,QAAAa,MAAArkB,KACA2kB,YACA,IAAA77B,EAAA07B,GAAA,EAAAE,MAAAhR,IAAA3pB,EAAAs6B,MAAAn3B,QAAkD,GAAAw3B,MAAAF,GAAAE,MAAAF,GAAAE,MAAsC57B,EAAA,GAAA47B,QAAAF,QAAA,CACxFG,SAAAv4B,KAAAq3B,QAAAY,MAAArkB,MAEA,OAAA2kB,UAGAX,UAAA,SAAAK,MAAAY,SAAAxZ,IAAAzL,KACA,IAAAklB,QAAA/4B,OAAAg5B,UACA,GAAAnlB,KAAA,MACAA,IAAAujB,WAEA2B,QAAAb,MAAA5Y,KACA,MAAAA,IAAAwZ,SAAA,CACAE,UAAA1Z,IAAA,KACAtf,OAAAk4B,MAAAc,WACA,GAAAnlB,IAAAklB,QAAA/4B,QAAA,GACAk4B,MAAA5Y,KAAAtf,OACAsf,IAAA0Z,UACA,SAEA,MAEA,OAAAd,MAAA5Y,KAAAyZ,SAGAjB,QAAA,SAAAI,MAAA5Y,IAAAzL,KACA,IAAAolB,SAAAC,OAAAH,QAAAI,SAAAL,SACA,GAAAjlB,KAAA,MACAA,IAAAujB,WAEA8B,OAAAhB,MAAAn3B,OACA+3B,SAAAxZ,IACAyZ,QAAAb,MAAA5Y,KACA2Z,SAAA,EAAA3Z,IAAA,EACA,MAAA2Z,SAAAC,OAAA,CACAC,SAAAF,SAAA,EACA,GAAAE,SAAAD,UAAArlB,IAAAqkB,MAAAe,UAAAf,MAAAiB,WAAA,IACAF,SAAAE,SAEAjB,MAAA5Y,KAAA4Y,MAAAe,UACA3Z,IAAA2Z,SACAA,SAAA,EAAA3Z,IAAA,EAEA4Y,MAAA5Y,KAAAyZ,QACA,OAAAlB,UAAAK,MAAAY,SAAAxZ,IAAAzL,MAGAxH,KAAA,WACAA,KAAApM,KAAAs3B,SAEAlrB,KAAAoB,IAAA6pB,QAEAjrB,KAAAjG,QAAAqxB,YAEAprB,KAAA+sB,QAAA5B,YAEAnrB,KAAAgrB,gBAEAhrB,KAAAiC,sBAEAjC,KAAAsrB,kBAEAtrB,KAAAurB,oBAEA,SAAAvrB,KAAAwH,KACA5U,KAAA4U,SAAA,KAAAA,IAAAujB,WACAn4B,KAAA8f,SAGA1S,KAAAnO,UAAA+B,KAAA,SAAAH,GACA,OAAAy3B,SAAAt4B,KAAA8f,MAAAjf,EAAAb,KAAA4U,MAGAxH,KAAAnO,UAAAuP,IAAA,WACA,OAAA6pB,QAAAr4B,KAAA8f,MAAA9f,KAAA4U,MAGAxH,KAAAnO,UAAAm7B,KAAA,WACA,OAAAp6B,KAAA8f,MAAA,IAGA1S,KAAAnO,UAAAo7B,SAAA,SAAAx5B,GACA,OAAAb,KAAA8f,MAAArM,QAAA5S,MAAA,GAGAuM,KAAAnO,UAAAkI,QAAA,SAAAtG,GACA,OAAA23B,YAAAx4B,KAAA8f,MAAAjf,EAAAb,KAAA4U,MAGAxH,KAAAnO,UAAAk7B,QAAA,SAAAt5B,GACA,OAAA03B,YAAAv4B,KAAA8f,MAAAjf,EAAAb,KAAA4U,MAGAxH,KAAAnO,UAAAm5B,QAAA,WACA,OAAAA,QAAAp4B,KAAA8f,MAAA9f,KAAA4U,MAGAxH,KAAAnO,UAAAoQ,WAAA,SAAAxO,GACA,OAAAwO,WAAArP,KAAA8f,MAAAjf,EAAAb,KAAA4U,MAGAxH,KAAAnO,UAAAq7B,MAAA,WACA,OAAAt6B,KAAA8f,UAGA1S,KAAAnO,UAAAsP,MAAA,WACA,OAAAvO,KAAA8f,MAAAhe,SAAA,GAGAsL,KAAAnO,UAAAiN,KAAA,WACA,OAAAlM,KAAA8f,MAAAhe,QAGAsL,KAAAnO,UAAA8K,MAAA,WACA,IAAAwwB,KACAA,KAAA,IAAAntB,KACAmtB,KAAAza,MAAA9f,KAAA8f,MAAAxX,MAAA,GACA,OAAAiyB,MAGAntB,KAAAnO,UAAAu7B,QAAA,WACA,OAAAx6B,KAAA8f,MAAAxX,MAAA,IAGA8E,KAAAnO,UAAAw7B,OAAArtB,KAAAnO,UAAA+B,KAEAoM,KAAAnO,UAAA6W,IAAA1I,KAAAnO,UAAAm7B,KAEAhtB,KAAAnO,UAAAy7B,MAAAttB,KAAAnO,UAAAm7B,KAEAhtB,KAAAnO,UAAA07B,IAAAvtB,KAAAnO,UAAAo7B,SAEAjtB,KAAAnO,UAAA+wB,KAAA5iB,KAAAnO,UAAA8K,MAEA,OAAAqD,KAvFA,GA2FA,UAAApQ,SAAA,aAAAA,SAAA,KAAAA,OAAAD,aAAA,GACAC,OAAAD,QAAAqQ,SACG,CACHhQ,OAAAgQ,aAGCvP,KAAAmC,iGChXDhD,OAAAD,SACAqQ,KAAA5P,oBAAA,IACA2X,KAAA3X,oBAAA,IACA0S,KAAA1S,oBAAA,IACA6P,KAAA7P,oBAAA,GACA6B,iBAAA7B,oBAAA,GACA8P,UAAA9P,oBAAA,IACA0X,YAAA1X,oBAAA,IACA25B,gBAAA35B,oBAAA,IACA05B,mBAAA15B,oBAAA,IACAy5B,eAAAz5B,oBAAA,IACAgX,cAAAhX,oBAAA,IACAu5B,kBAAAv5B,oBAAA,IACAq5B,qBAAAr5B,oBAAA,IACAo5B,iBAAAp5B,oBAAA,IACAq4B,cAAAr4B,oBAAA,IACAgS,gBAAAhS,oBAAA,mDChBAR,OAAAD,QAAAS,oBAAA,8BCKA,IAAAo9B,MAAAC,QAAA57B,UAMA,IAAA67B,OAAAF,MAAAG,iBACAH,MAAAI,uBACAJ,MAAAK,oBACAL,MAAAM,mBACAN,MAAAO,iBAMAn+B,OAAAD,QAAAq+B,MAWA,SAAAA,MAAArL,GAAA5vB,UACA,GAAA26B,OAAA,OAAAA,OAAAj9B,KAAAkyB,GAAA5vB,UACA,IAAA2f,MAAAiQ,GAAAvkB,WAAA6vB,iBAAAl7B,UACA,QAAAzC,EAAA,EAAiBA,EAAAoiB,MAAAhe,SAAkBpE,EAAA,CACnC,GAAAoiB,MAAApiB,IAAAqyB,GAAA,YAEA,4DCtCA,IAAAuL,QAAA99B,oBAAA,IAEAR,OAAAD,QAAA,SAAAwK,QAAApH,SAAAo7B,aACA,IAAAx6B,OAAAw6B,YAAAh0B,gBAAAiE,WAEA,MAAAzK,iBAAAyG,SAAA,CACA,GAAA8zB,QAAAv6B,OAAAZ,UAAA,OAAAY,OACAA,cAAAyK","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"storm-react-diagrams\"] = factory(require(\"lodash\"), require(\"react\"));\n\telse\n\t\troot[\"storm-react-diagrams\"] = factory(root[\"_\"], root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 45);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;","import * as React from \"react\";\nimport * as _ from \"lodash\";\n\nexport interface BaseWidgetProps {\n\t/**\n\t * Override the base class name\n\t */\n\tbaseClass?: string;\n\t/**\n\t * append additional classes\n\t */\n\tclassName?: string;\n\n\t/**\n\t * Additional props to add\n\t */\n\textraProps?: any;\n}\n\nexport class BaseWidget<P extends BaseWidgetProps = BaseWidgetProps, S = any> extends React.Component<P, S> {\n\tclassName: string;\n\n\tconstructor(name: string, props: P) {\n\t\tsuper(props);\n\t\tthis.className = name;\n\t}\n\n\tbem(selector: string): string {\n\t\treturn (this.props.baseClass || this.className) + selector + \" \";\n\t}\n\n\tgetClassName(): string {\n\t\treturn (\n\t\t\t(this.props.baseClass || this.className) + \" \" + (this.props.className ? this.props.className + \" \" : \"\")\n\t\t);\n\t}\n\n\tgetProps(): any {\n\t\treturn {\n\t\t\t...((this.props.extraProps as any) || {}),\n\t\t\tclassName: this.getClassName()\n\t\t};\n\t}\n}\n","/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PointModel extends BaseModel<LinkModel, BaseModelListener> {\n\tx: number;\n\ty: number;\n\n\tconstructor(link: LinkModel, points: { x: number; y: number }) {\n\t\tsuper();\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t\tthis.parent = link;\n\t}\n\n\tgetSelectedEntities() {\n\t\tif (super.isSelected() && !this.isConnectedToPort()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y\n\t\t});\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tupdateLocation(points: { x: number; y: number }) {\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t}\n\n\tgetX(): number {\n\t\treturn this.x;\n\t}\n\n\tgetY(): number {\n\t\treturn this.y;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import { BaseEntity, BaseListener } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport interface BaseModelListener extends BaseListener {\n\tselectionChanged?(event: BaseEvent<BaseModel> & { isSelected: boolean }): void;\n\n\tentityRemoved?(event: BaseEvent<BaseModel>): void;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class BaseModel<\n\tX extends BaseEntity = BaseEntity,\n\tT extends BaseModelListener = BaseModelListener\n> extends BaseEntity<T> {\n\ttype: string;\n\tselected: boolean;\n\tparent: X;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(id);\n\t\tthis.type = type;\n\t\tthis.selected = false;\n\t}\n\n\tpublic getParent(): X {\n\t\treturn this.parent;\n\t}\n\n\tpublic setParent(parent: X) {\n\t\tthis.parent = parent;\n\t}\n\n\tpublic getSelectedEntities(): BaseModel<any, T>[] {\n\t\tif (this.isSelected()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic deSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.type = ob.type;\n\t\tthis.selected = ob.selected;\n\t}\n\n\tpublic serialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\ttype: this.type,\n\t\t\tselected: this.selected\n\t\t});\n\t}\n\n\tpublic getType(): string {\n\t\treturn this.type;\n\t}\n\n\tpublic getID(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic isSelected(): boolean {\n\t\treturn this.selected;\n\t}\n\n\tpublic setSelected(selected: boolean = true) {\n\t\tthis.selected = selected;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.selectionChanged) {\n\t\t\t\tlistener.selectionChanged({ ...event, isSelected: selected });\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove() {\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.entityRemoved) {\n\t\t\t\tlistener.entityRemoved(event);\n\t\t\t}\n\t\t});\n\t}\n}\n","// tslint:disable no-bitwise\nimport closest = require(\"closest\");\nimport { PointModel } from \"./models/PointModel\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport * as Path from \"paths-js/path\";\n/**\n * @author Dylan Vorster\n */\nexport class Toolkit {\n\tstatic TESTING: boolean = false;\n\tstatic TESTING_UID = 0;\n\n\t/**\n\t * Generats a unique ID (thanks Stack overflow :3)\n\t * @returns {String}\n\t */\n\tpublic static UID(): string {\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID++;\n\t\t\treturn \"\" + Toolkit.TESTING_UID;\n\t\t}\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === \"x\" ? r : (r & 0x3) | 0x8;\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\t/**\n\t * Finds the closest element as a polyfill\n\t *\n\t * @param  {Element} element  [description]\n\t * @param  {string}  selector [description]\n\t */\n\tpublic static closest(element: Element, selector: string) {\n\t\tif (document.body.closest) {\n\t\t\treturn element.closest(selector);\n\t\t}\n\t\treturn closest(element, selector);\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.x},${firstPoint.y} L ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateCurvePath(firstPoint: PointModel, lastPoint: PointModel, curvy: number = 0): string {\n\t\tvar isHorizontal = Math.abs(firstPoint.x - lastPoint.x) > Math.abs(firstPoint.y - lastPoint.y);\n\t\tvar curvyX = isHorizontal ? curvy : 0;\n\t\tvar curvyY = isHorizontal ? 0 : curvy;\n\n\t\treturn `M${firstPoint.x},${firstPoint.y} C ${firstPoint.x + curvyX},${firstPoint.y + curvyY}\n    ${lastPoint.x - curvyX},${lastPoint.y - curvyY} ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateDynamicPath(pathCoords: number[][]) {\n\t\tlet path = Path();\n\t\tpath = path.moveto(pathCoords[0][0] * ROUTING_SCALING_FACTOR, pathCoords[0][1] * ROUTING_SCALING_FACTOR);\n\t\tpathCoords.slice(1).forEach(coords => {\n\t\t\tpath = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, coords[1] * ROUTING_SCALING_FACTOR);\n\t\t});\n\t\treturn path.print();\n\t}\n}\n","import { BaseModel } from \"../models/BaseModel\";\n\nexport abstract class AbstractFactory<T extends BaseModel> {\n\ttype: string;\n\n\tconstructor(name: string) {\n\t\tthis.type = name;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tabstract getNewInstance(initialConfig?: any): T;\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PortModel } from \"./PortModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport class NodeModel extends BaseModel<DiagramModel, BaseModelListener> {\n\tx: number;\n\ty: number;\n\textras: any;\n\tports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(nodeType: string = \"default\", id?: string) {\n\t\tsuper(nodeType, id);\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.extras = {};\n\t\tthis.ports = {};\n\t}\n\n\tsetPosition(x, y) {\n\t\t//store position\n\t\tlet oldX = this.x;\n\t\tlet oldY = this.y;\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlet point = link.getPointForPort(port);\n\t\t\t\tpoint.x = point.x + x - oldX;\n\t\t\t\tpoint.y = point.y + y - oldY;\n\t\t\t});\n\t\t});\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tgetSelectedEntities() {\n\t\tlet entities = super.getSelectedEntities();\n\n\t\t// add the points of each link that are selected here\n\t\tif (this.isSelected()) {\n\t\t\t_.forEach(this.ports, port => {\n\t\t\t\tentities = entities.concat(\n\t\t\t\t\t_.map(port.getLinks(), link => {\n\t\t\t\t\t\treturn link.getPointForPort(port);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn entities;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t\tthis.extras = ob.extras;\n\n\t\t//deserialize ports\n\t\t_.forEach(ob.ports, (port: any) => {\n\t\t\tlet portOb = engine.getPortFactory(port.type).getNewInstance();\n\t\t\tportOb.deSerialize(port, engine);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y,\n\t\t\textras: this.extras,\n\t\t\tports: _.map(this.ports, port => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, port => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].id === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.name]) {\n\t\t\tthis.ports[port.name].setParent(null);\n\t\t\tdelete this.ports[port.name];\n\t\t}\n\t}\n\n\taddPort<T extends PortModel>(port: T): T {\n\t\tport.setParent(this);\n\t\tthis.ports[port.name] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n","export class BaseAction {\n\tmouseX: number;\n\tmouseY: number;\n\tms: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tthis.mouseX = mouseX;\n\t\tthis.mouseY = mouseY;\n\t\tthis.ms = new Date().getTime();\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PortModel extends BaseModel<NodeModel, BaseModelListener> {\n\tname: string;\n\tlinks: { [id: string]: LinkModel };\n\tmaximumLinks: number;\n\n\t// calculated post rendering so routing can be done correctly\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n\n\tconstructor(name: string, type?: string, id?: string, maximumLinks?: number) {\n\t\tsuper(type, id);\n\t\tthis.name = name;\n\t\tthis.links = {};\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.name = ob.name;\n\t\tthis.maximumLinks = ob.maximumLinks;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tparentNode: this.parent.id,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.id;\n\t\t\t}),\n\t\t\tmaximumLinks: this.maximumLinks\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import { Toolkit } from \"./Toolkit\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"./DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport interface BaseEvent<T extends BaseEntity = any> {\n\tentity: BaseEntity<BaseListener>;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: string;\n}\n\nexport interface BaseListener<T extends BaseEntity = any> {\n\tlockChanged?(event: BaseEvent<T> & { locked: boolean }): void;\n}\n\nexport type BaseEntityType = \"node\" | \"link\" | \"port\" | \"point\";\n\nexport class BaseEntity<T extends BaseListener = BaseListener> {\n\tpublic listeners: { [s: string]: T };\n\tpublic id: string;\n\tpublic locked: boolean;\n\n\tconstructor(id?: string) {\n\t\tthis.listeners = {};\n\t\tthis.id = id || Toolkit.UID();\n\t\tthis.locked = false;\n\t}\n\n\tgetID() {\n\t\treturn this.id;\n\t}\n\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\n\t\t/*noop*/\n\t}\n\n\tclone(lookupTable: { [s: string]: any } = {}) {\n\t\t// try and use an existing clone first\n\t\tif (lookupTable[this.id]) {\n\t\t\treturn lookupTable[this.id];\n\t\t}\n\t\tlet clone = _.clone(this);\n\t\tclone.id = Toolkit.UID();\n\t\tclone.clearListeners();\n\t\tlookupTable[this.id] = clone;\n\n\t\tthis.doClone(lookupTable, clone);\n\t\treturn clone;\n\t}\n\n\tclearListeners() {\n\t\tthis.listeners = {};\n\t}\n\n\tpublic deSerialize(data: { [s: string]: any }, engine: DiagramEngine) {\n\t\tthis.id = data.id;\n\t}\n\n\tpublic serialize() {\n\t\treturn {\n\t\t\tid: this.id\n\t\t};\n\t}\n\n\tpublic iterateListeners(cb: (t: T, event: BaseEvent) => any) {\n\t\tlet event: BaseEvent = {\n\t\t\tid: Toolkit.UID(),\n\t\t\tfiring: true,\n\t\t\tentity: this,\n\t\t\tstopPropagation: () => {\n\t\t\t\tevent.firing = false;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i in this.listeners) {\n\t\t\tif (this.listeners.hasOwnProperty(i)) {\n\t\t\t\t// propagation stopped\n\t\t\t\tif (!event.firing) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcb(this.listeners[i], event);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic removeListener(listener: string) {\n\t\tif (this.listeners[listener]) {\n\t\t\tdelete this.listeners[listener];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addListener(listener: T): string {\n\t\tvar uid = Toolkit.UID();\n\t\tthis.listeners[uid] = listener;\n\t\treturn uid;\n\t}\n\n\tpublic isLocked(): boolean {\n\t\treturn this.locked;\n\t}\n\n\tpublic setLocked(locked: boolean = true) {\n\t\tthis.locked = locked;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.lockChanged) {\n\t\t\t\tlistener.lockChanged({ ...event, locked: locked });\n\t\t\t}\n\t\t});\n\t}\n}\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n","module.exports = require('./lib/heap');\n","import * as PF from \"pathfinding\";\nimport { DiagramEngine } from \"../main\";\n\n/*\nit can be very expensive to calculate routes when every single pixel on the canvas\nis individually represented. Using the factor below, we combine values in order\nto achieve the best trade-off between accuracy and performance.\n*/\nexport const ROUTING_SCALING_FACTOR = 5;\n\nconst pathFinderInstance = new PF.JumpPointFinder({\n\theuristic: PF.Heuristic.manhattan,\n\tdiagonalMovement: PF.DiagonalMovement.Never\n});\n\nexport default class PathFinding {\n\tinstance: any;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine) {\n\t\tthis.instance = pathFinderInstance;\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(\n\t\tfrom: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tto: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t): number[][] {\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\treturn pathFinderInstance.findPath(\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\n\t\t\tgrid\n\t\t);\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1]\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1]\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map(coords => [\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\n\t\t\t]);\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n","import { BaseModel } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class LabelModel extends BaseModel<LinkModel> {\n\toffsetX: number;\n\toffsetY: number;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(type, id);\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.offsetX = ob.offsetX;\n\t\tthis.offsetY = ob.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\toffsetX: this.offsetX,\n\t\t\toffsetY: this.offsetY\n\t\t});\n\t}\n}\n","import { LabelModel } from \"../../models/LabelModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\n\nexport class DefaultLabelModel extends LabelModel {\n\tlabel: string;\n\n\tconstructor() {\n\t\tsuper(\"default\");\n\t\tthis.offsetY = -23;\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.label = label;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.label = ob.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tlabel: this.label\n\t\t});\n\t}\n}\n","/**\n * @author Dylan Vorster\n */\nimport { LinkModel, LinkModelListener } from \"../../models/LinkModel\";\nimport { BaseEvent } from \"../../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLabelModel } from \"./DefaultLabelModel\";\nimport { LabelModel } from \"../../models/LabelModel\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelListener> {\n\twidth: number;\n\tcolor: string;\n\tcurvyness: number;\n\n\tconstructor(type: string = \"default\") {\n\t\tsuper(type);\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\n\t\tthis.width = 3;\n\t\tthis.curvyness = 50;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\twidth: this.width,\n\t\t\tcolor: this.color,\n\t\t\tcurvyness: this.curvyness\n\t\t});\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.color = ob.color;\n\t\tthis.width = ob.width;\n\t\tthis.curvyness = ob.curvyness;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.widthChanged) {\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.color = color;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.colorChanged) {\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\n\t\t\t}\n\t\t});\n\t}\n}\n","import * as _ from \"lodash\";\nimport { PortModel } from \"../../models/PortModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLinkModel } from \"./DefaultLinkModel\";\nimport { LinkModel } from \"../../models/LinkModel\";\n\nexport class DefaultPortModel extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: DefaultLinkModel };\n\n\tconstructor(isInput: boolean, name: string, label: string = null, id?: string) {\n\t\tsuper(name, \"default\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label\n\t\t});\n\t}\n\n\tlink(port: PortModel): LinkModel {\n\t\tlet link = this.createLinkModel();\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.in !== port.in;\n\t\t}\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PortModel } from \"./PortModel\";\nimport { PointModel } from \"./PointModel\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { LabelModel } from \"./LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport class LinkModel<T extends LinkModelListener = LinkModelListener> extends BaseModel<DiagramModel, T> {\n\tsourcePort: PortModel | null;\n\ttargetPort: PortModel | null;\n\tlabels: LabelModel[];\n\tpoints: PointModel[];\n\textras: {};\n\n\tconstructor(linkType: string = \"default\", id?: string) {\n\t\tsuper(linkType, id);\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\n\t\tthis.extras = {};\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.labels = [];\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.extras = ob.extras;\n\t\tthis.points = _.map(ob.points || [], (point: { x; y }) => {\n\t\t\tvar p = new PointModel(this, { x: point.x, y: point.y });\n\t\t\tp.deSerialize(point, engine);\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(ob.labels || [], (label: any) => {\n\t\t\tlet labelOb = engine.getLabelFactory(label.type).getNewInstance();\n\t\t\tlabelOb.deSerialize(label, engine);\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\tif (ob.target) {\n\t\t\tthis.setTargetPort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.target)\n\t\t\t\t\t.getPortFromID(ob.targetPort)\n\t\t\t);\n\t\t}\n\n\t\tif (ob.source) {\n\t\t\tthis.setSourcePort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.source)\n\t\t\t\t\t.getPortFromID(ob.sourcePort)\n\t\t\t);\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().id : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.id : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().id : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.id : null,\n\t\t\tpoints: _.map(this.points, point => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\textras: this.extras,\n\t\t\tlabels: _.map(this.labels, label => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].id === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.sourcePortChanged) {\n\t\t\t\tlistener.sourcePortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.targetPortChanged) {\n\t\t\t\tlistener.targetPortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tpoint(x: number, y: number): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y));\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, point => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel(this, { x: x, y: y });\n\t}\n}\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n","/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface NodeProps extends BaseWidgetProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class NodeWidget extends BaseWidget<NodeProps, NodeState> {\n\tconstructor(props: NodeProps) {\n\t\tsuper(\"srd-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.node);\n\t}\n\n\tgetClassName() {\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tdata-nodeid={this.props.node.id}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: this.props.node.y,\n\t\t\t\t\tleft: this.props.node.x\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport * as _ from \"lodash\";\nimport { NodeWidget } from \"../NodeWidget\";\nimport { NodeModel } from \"../../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\n\nexport interface NodeLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeLayerState {}\n\nexport class NodeLayerWidget extends BaseWidget<NodeLayerProps, NodeLayerState> {\n\tconstructor(props: NodeLayerProps) {\n\t\tsuper(\"srd-node-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\tupdateNodeDimensions = () => {\n\t\tif (!this.props.diagramEngine.nodesRendered) {\n\t\t\tconst diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\t\t_.map(diagramModel.getNodes(), node => {\n\t\t\t\tnode.updateDimensions(this.props.diagramEngine.getNodeDimensions(node));\n\t\t\t});\n\t\t}\n\t};\n\n\tcomponentDidUpdate() {\n\t\tthis.updateNodeDimensions();\n\t\tthis.props.diagramEngine.nodesRendered = true;\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{_.map(diagramModel.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\tNodeWidget,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdiagramEngine: this.props.diagramEngine,\n\t\t\t\t\t\t\tkey: node.id,\n\t\t\t\t\t\t\tnode: node\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.props.diagramEngine.generateWidgetForNode(node)\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface LinkProps extends BaseWidgetProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n\tchildren?: any;\n}\n\nexport interface LinkState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkWidget extends BaseWidget<LinkProps, LinkState> {\n\tconstructor(props: LinkProps) {\n\t\tsuper(\"srd-link\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.link);\n\t}\n\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { LinkWidget } from \"../LinkWidget\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\n\nexport interface LinkLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface LinkLayerState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkLayerWidget extends BaseWidget<LinkLayerProps, LinkLayerState> {\n\tconstructor(props: LinkLayerProps) {\n\t\tsuper(\"srd-link-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<svg\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{//only perform these actions when we have a diagram\n\t\t\t\tthis.props.diagramEngine.canvas &&\n\t\t\t\t\t_.map(diagramModel.getLinks(), link => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.props.diagramEngine.nodesRendered &&\n\t\t\t\t\t\t\t!this.props.diagramEngine.linksThatHaveInitiallyRendered[link.id]\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (link.sourcePort !== null) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.sourcePort);\n\t\t\t\t\t\t\t\t\tlink.points[0].updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.sourcePort);\n\t\t\t\t\t\t\t\t\tlink.sourcePort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (link.targetPort !== null) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.targetPort);\n\t\t\t\t\t\t\t\t\t_.last(link.points).updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.targetPort);\n\t\t\t\t\t\t\t\t\tlink.targetPort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//generate links\n\t\t\t\t\t\tvar generatedLink = this.props.diagramEngine.generateWidgetForLink(link);\n\t\t\t\t\t\tif (!generatedLink) {\n\t\t\t\t\t\t\tthrow new Error(`no link generated for type: ${link.getType()}`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<LinkWidget key={link.getID()} link={link} diagramEngine={this.props.diagramEngine}>\n\t\t\t\t\t\t\t\t{React.cloneElement(generatedLink, {\n\t\t\t\t\t\t\t\t\tpointAdded: this.props.pointAdded\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</LinkWidget>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</svg>\n\t\t);\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class SelectingAction extends BaseAction {\n\tmouseX2: number;\n\tmouseY2: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.mouseX2 = mouseX;\n\t\tthis.mouseY2 = mouseY;\n\t}\n\n\tgetBoxDimensions() {\n\t\treturn {\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\n\t\t};\n\t}\n\n\tcontainsElement(x: number, y: number, diagramModel: DiagramModel): boolean {\n\t\tvar z = diagramModel.getZoomLevel() / 100.0;\n\t\tlet dimensions = this.getBoxDimensions();\n\n\t\treturn (\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\n\t\t);\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { SelectionModel } from \"../models/SelectionModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class MoveItemsAction extends BaseAction {\n\tselectionModels: SelectionModel[];\n\tmoved: boolean;\n\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.moved = false;\n\t\tdiagramEngine.enableRepaintEntities(diagramEngine.getDiagramModel().getSelectedItems());\n\t\tvar selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\n\n\t\t//dont allow items which are locked to move\n\t\tselectedItems = selectedItems.filter(item => {\n\t\t\treturn !diagramEngine.isModelLocked(item);\n\t\t});\n\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\n\t\t\treturn {\n\t\t\t\tmodel: item,\n\t\t\t\tinitialX: item.x,\n\t\t\t\tinitialY: item.y\n\t\t\t};\n\t\t});\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class MoveCanvasAction extends BaseAction {\n\tinitialOffsetX: number;\n\tinitialOffsetY: number;\n\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\n\t}\n}\n","import { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, node: T): JSX.Element;\n}\n","import * as React from \"react\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface PortProps extends BaseWidgetProps {\n\tname: string;\n\tnode: NodeModel;\n}\n\nexport interface PortState {\n\tselected: boolean;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class PortWidget extends BaseWidget<PortProps, PortState> {\n\tconstructor(props: PortProps) {\n\t\tsuper(\"srd-port\", props);\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\tgetClassName() {\n\t\treturn \"port \" + super.getClassName() + (this.state.selected ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t}}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t}}\n\t\t\t\tdata-name={this.props.name}\n\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { PortWidget } from \"../../widgets/PortWidget\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n\tmodel: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-port\", props);\n\t}\n\n\tgetClassName() {\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--out\"));\n\t}\n\n\trender() {\n\t\tvar port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\tvar label = <div className=\"name\">{this.props.model.label}</div>;\n\n\t\treturn (\n\t\t\t<div {...this.getProps()}>\n\t\t\t\t{this.props.model.in ? port : label}\n\t\t\t\t{this.props.model.in ? label : port}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"./DefaultPortLabelWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n\tnode: DefaultNodeModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tgeneratePort(port) {\n\t\treturn <DefaultPortLabel model={port} key={port.id} />;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.bem(\"__out\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { LinkModel } from \"../models/LinkModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport PathFinding from \"../../routing/PathFinding\";\nimport * as _ from \"lodash\";\nimport { LabelModel } from \"../../models/LabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLinkProps extends BaseWidgetProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: DefaultLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n\tselected: boolean;\n}\n\nexport class DefaultLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\n\tpublic static defaultProps: DefaultLinkProps = {\n\t\tcolor: \"black\",\n\t\twidth: 3,\n\t\tlink: null,\n\t\tengine: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null\n\t};\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\trefPaths: SVGPathElement[];\n\n\tpathFinding: PathFinding; // only set when smart routing is active\n\n\tconstructor(props: DefaultLinkProps) {\n\t\tsuper(\"srd-default-link\", props);\n\n\t\tthis.refLabels = {};\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\n\t\t}\n\t}\n\n\tcalculateAllLabelPosition() {\n\t\t_.forEach(this.props.link.labels, (label, index) => {\n\t\t\tthis.calculateLabelPosition(label, index + 1);\n\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\taddPointToLink = (event: MouseEvent, index: number): void => {\n\t\tif (\n\t\t\t!event.shiftKey &&\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\n\t\t) {\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\n\t\t\tpoint.setSelected(true);\n\t\t\tthis.forceUpdate();\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.props.pointAdded(point, event);\n\t\t}\n\t};\n\n\tgeneratePoint(pointIndex: number): JSX.Element {\n\t\tlet x = this.props.link.points[pointIndex].x;\n\t\tlet y = this.props.link.points[pointIndex].y;\n\n\t\treturn (\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\n\t\t\t\t<circle\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\t\"point \" +\n\t\t\t\t\t\tthis.bem(\"__point\") +\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<circle\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\n\t\t\t\t\tdata-linkid={this.props.link.id}\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0}\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n\n\tgenerateLabel(label: LabelModel) {\n\t\tconst canvas = this.props.diagramEngine.canvas as HTMLElement;\n\t\treturn (\n\t\t\t<foreignObject\n\t\t\t\tkey={label.id}\n\t\t\t\tclassName={this.bem(\"__label\")}\n\t\t\t\twidth={canvas.offsetWidth}\n\t\t\t\theight={canvas.offsetHeight}\n\t\t\t>\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\n\t\t\t\t\t{this.props.diagramEngine\n\t\t\t\t\t\t.getFactoryForLabel(label)\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\n\t\t\t\t</div>\n\t\t\t</foreignObject>\n\t\t);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tvar props = this.props;\n\n\t\tvar Bottom = React.cloneElement(\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\n\t\t\t\tthis.props.link,\n\t\t\t\tthis,\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\n\t\t\t\tpath\n\t\t\t),\n\t\t\t{\n\t\t\t\tref: ref => ref && this.refPaths.push(ref)\n\t\t\t}\n\t\t);\n\n\t\tvar Top = React.cloneElement(Bottom, {\n\t\t\t...extraProps,\n\t\t\tstrokeLinecap: \"round\",\n\t\t\tonMouseLeave: () => {\n\t\t\t\tthis.setState({ selected: false });\n\t\t\t},\n\t\t\tonMouseEnter: () => {\n\t\t\t\tthis.setState({ selected: true });\n\t\t\t},\n\t\t\tref: null,\n\t\t\t\"data-linkid\": this.props.link.getID(),\n\t\t\tstrokeOpacity: this.state.selected ? 0.1 : 0,\n\t\t\tstrokeWidth: 20,\n\t\t\tonContextMenu: () => {\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(this.props.link)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tthis.props.link.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<g key={\"link-\" + id}>\n\t\t\t\t{Bottom}\n\t\t\t\t{Top}\n\t\t\t</g>\n\t\t);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: any; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst lengths = this.refPaths.map(path => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (this.props.link.labels.length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < this.refPaths.length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: this.refPaths[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = (label, index: number) => {\n\t\tif (!this.refLabels[label.id]) {\n\t\t\t// no label? nothing to do here\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\n\t\t\theight: this.refLabels[label.id].offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\n\t\t};\n\t\tthis.refLabels[label.id].setAttribute(\n\t\t\t\"style\",\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\n\t\t);\n\t};\n\n\t/**\n\t * Smart routing is only applicable when all conditions below are true:\n\t * - smart routing is set to true on the engine\n\t * - current link is between two nodes (not between a node and an empty point)\n\t * - no custom points exist along the line\n\t */\n\tisSmartRoutingApplicable(): boolean {\n\t\tconst { diagramEngine, link } = this.props;\n\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.points.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.sourcePort === null || link.targetPort === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tconst { diagramEngine } = this.props;\n\t\tif (!diagramEngine.nodesRendered) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.points;\n\t\tvar paths = [];\n\n\t\tif (this.isSmartRoutingApplicable()) {\n\t\t\t// first step: calculate a direct path between the points being linked\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t\t// so they can be used as origin and destination of the link to be created\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n\t\t\tif (smartLink) {\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\n\t\t\t\t\troutingMatrix,\n\t\t\t\t\tstart,\n\t\t\t\t\tend,\n\t\t\t\t\tpathToStart,\n\t\t\t\t\tpathToEnd\n\t\t\t\t);\n\n\t\t\t\tpaths.push(\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// true when smart routing was skipped or not enabled.\n\t\t// See @link{#isSmartRoutingApplicable()}.\n\t\tif (paths.length === 0) {\n\t\t\tif (points.length === 2) {\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\n\n\t\t\t\t//draw the smoothing\n\t\t\t\t//if the points are too close, just draw a straight line\n\t\t\t\tvar margin = 50;\n\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n\t\t\t\t\tmargin = 5;\n\t\t\t\t}\n\n\t\t\t\tvar pointLeft = points[0];\n\t\t\t\tvar pointRight = points[1];\n\n\t\t\t\t//some defensive programming to make sure the smoothing is\n\t\t\t\t//always in the right direction\n\t\t\t\tif (pointLeft[xOrY] > pointRight[xOrY]) {\n\t\t\t\t\tpointLeft = points[1];\n\t\t\t\t\tpointRight = points[0];\n\t\t\t\t}\n\n\t\t\t\tpaths.push(\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// draw the link as dangeling\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//draw the multiple anchors and complex line instead\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tpaths.push(\n\t\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\n\t\t\t\t\t\t\t\t\"data-point\": j,\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tj\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t//render the circles\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\n\t\t\t\t\tpaths.push(this.generatePoint(i));\n\t\t\t\t}\n\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.refPaths = [];\n\t\treturn (\n\t\t\t<g {...this.getProps()}>\n\t\t\t\t{paths}\n\t\t\t\t{_.map(this.props.link.labels, labelModel => {\n\t\t\t\t\treturn this.generateLabel(labelModel);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import { DefaultPortModel } from \"./DefaultPortModel\";\nimport * as _ from \"lodash\";\n\nimport { NodeModel } from \"../../models/NodeModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeModel extends NodeModel {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: DefaultPortModel };\n\n\tconstructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"default\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n\n\taddInPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(true, Toolkit.UID(), label));\n\t}\n\n\taddOutPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(false, Toolkit.UID(), label));\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n\tmodel: DefaultLabelModel;\n}\n\nexport class DefaultLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-label\", props);\n\t}\n\n\trender() {\n\t\treturn <div {...this.getProps()}>{this.props.model.label}</div>;\n\t}\n}\n","import { LabelModel } from \"../models/LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLabelFactory } from \"../../factories/AbstractLabelFactory\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: DefaultLabelModel): JSX.Element {\n\t\treturn <DefaultLabelWidget model={label} />;\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLabelModel {\n\t\treturn new DefaultLabelModel();\n\t}\n}\n","import { PortModel } from \"../models/PortModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractPortFactory } from \"../../factories/AbstractPortFactory\";\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\n\t\treturn new DefaultPortModel(true, \"unknown\");\n\t}\n}\n","import { BaseListener, BaseEntity, BaseEvent, BaseEntityType } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"./LinkModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { PortModel } from \"./PortModel\";\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PointModel } from \"./PointModel\";\n/**\n * @author Dylan Vorster\n *\n */\nexport interface DiagramListener extends BaseListener {\n\tnodesUpdated?(event: BaseEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEvent & { link: LinkModel; isCreated: boolean }): void;\n\n\toffsetUpdated?(event: BaseEvent<DiagramModel> & { offsetX: number; offsetY: number }): void;\n\n\tzoomUpdated?(event: BaseEvent<DiagramModel> & { zoom: number }): void;\n\n\tgridUpdated?(event: BaseEvent<DiagramModel> & { size: number }): void;\n}\n\n/**\n *\n */\nexport class DiagramModel extends BaseEntity<DiagramListener> {\n\t//models\n\tlinks: { [s: string]: LinkModel };\n\tnodes: { [s: string]: NodeModel };\n\n\t//control variables\n\toffsetX: number;\n\toffsetY: number;\n\tzoom: number;\n\trendered: boolean;\n\tgridSize: number;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.links = {};\n\t\tthis.nodes = {};\n\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t\tthis.zoom = 100;\n\t\tthis.rendered = false;\n\t\tthis.gridSize = 0;\n\t}\n\n\tsetGridSize(size: number = 0) {\n\t\tthis.gridSize = size;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.gridUpdated) {\n\t\t\t\tlistener.gridUpdated({ ...event, size: size });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetGridPosition(pos) {\n\t\tif (this.gridSize === 0) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn this.gridSize * Math.floor((pos + this.gridSize / 2) / this.gridSize);\n\t}\n\n\tdeSerializeDiagram(object: any, diagramEngine: DiagramEngine) {\n\t\tthis.deSerialize(object, diagramEngine);\n\n\t\tthis.offsetX = object.offsetX;\n\t\tthis.offsetY = object.offsetY;\n\t\tthis.zoom = object.zoom;\n\t\tthis.gridSize = object.gridSize;\n\n\t\t// deserialize nodes\n\t\t_.forEach(object.nodes, (node: any) => {\n\t\t\tlet nodeOb = diagramEngine.getNodeFactory(node.type).getNewInstance(node);\n\t\t\tnodeOb.setParent(this);\n\t\t\tnodeOb.deSerialize(node, diagramEngine);\n\t\t\tthis.addNode(nodeOb);\n\t\t});\n\n\t\t// deserialze links\n\t\t_.forEach(object.links, (link: any) => {\n\t\t\tlet linkOb = diagramEngine.getLinkFactory(link.type).getNewInstance();\n\t\t\tlinkOb.setParent(this);\n\t\t\tlinkOb.deSerialize(link, diagramEngine);\n\t\t\tthis.addLink(linkOb);\n\t\t});\n\t}\n\n\tserializeDiagram() {\n\t\treturn _.merge(this.serialize(), {\n\t\t\toffsetX: this.offsetX,\n\t\t\toffsetY: this.offsetY,\n\t\t\tzoom: this.zoom,\n\t\t\tgridSize: this.gridSize,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.serialize();\n\t\t\t}),\n\t\t\tnodes: _.map(this.nodes, node => {\n\t\t\t\treturn node.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tclearSelection(ignore: BaseModel<BaseEntity, BaseModelListener> | null = null) {\n\t\t_.forEach(this.getSelectedItems(), element => {\n\t\t\tif (ignore && ignore.getID() === element.getID()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telement.setSelected(false); //TODO dont fire the listener\n\t\t});\n\t}\n\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel<BaseEntity, BaseModelListener>[] {\n\t\tif (!Array.isArray(filters)) {\n\t\t\tfilters = [filters];\n\t\t}\n\t\tvar items = [];\n\n\t\t// run through nodes\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.nodes, node => {\n\t\t\t\treturn node.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t// find all the links\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn link.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t//find all points\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn _.flatMap(link.points, point => {\n\t\t\t\t\treturn point.getSelectedEntities();\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\titems = _.uniq(items);\n\n\t\tif (filters.length > 0) {\n\t\t\titems = _.filter(_.uniq(items), (item: BaseModel<any>) => {\n\t\t\t\tif (_.includes(filters, \"node\") && item instanceof NodeModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"link\") && item instanceof LinkModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"port\") && item instanceof PortModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"point\") && item instanceof PointModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tsetZoomLevel(zoom: number) {\n\t\tthis.zoom = zoom;\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.zoomUpdated) {\n\t\t\t\tlistener.zoomUpdated({ ...event, zoom: zoom });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetOffset(offsetX: number, offsetY: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.offsetY = offsetY;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetOffsetX(offsetX: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\tsetOffsetY(offsetY: number) {\n\t\tthis.offsetY = offsetY;\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: this.offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetOffsetY() {\n\t\treturn this.offsetY;\n\t}\n\n\tgetOffsetX() {\n\t\treturn this.offsetX;\n\t}\n\n\tgetZoomLevel() {\n\t\treturn this.zoom;\n\t}\n\n\tgetNode(node: string | NodeModel): NodeModel | null {\n\t\tif (node instanceof NodeModel) {\n\t\t\treturn node;\n\t\t}\n\t\tif (!this.nodes[node]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.nodes[node];\n\t}\n\n\tgetLink(link: string | LinkModel): LinkModel | null {\n\t\tif (link instanceof LinkModel) {\n\t\t\treturn link;\n\t\t}\n\t\tif (!this.links[link]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.links[link];\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tlink.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeLink(link);\n\t\t\t}\n\t\t});\n\t\tthis.links[link.getID()] = link;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tnode.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeNode(node);\n\t\t\t}\n\t\t});\n\t\tthis.nodes[node.getID()] = node;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel | string) {\n\t\tlink = this.getLink(link);\n\t\tdelete this.links[link.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link as LinkModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tremoveNode(node: NodeModel | string) {\n\t\tnode = this.getNode(node);\n\t\tdelete this.nodes[node.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node as NodeModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetLinks(): { [s: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tgetNodes(): { [s: string]: NodeModel } {\n\t\treturn this.nodes;\n\t}\n}\n","/**\n * @author Dylan Vorster\n */\n\nexport * from \"./Toolkit\";\nexport * from \"./BaseEntity\";\nexport * from \"./DiagramEngine\";\n\nexport * from \"./defaults/models/DefaultNodeModel\";\nexport * from \"./defaults/models/DefaultPortModel\";\nexport * from \"./defaults/models/DefaultLinkModel\";\nexport * from \"./defaults/models/DefaultLabelModel\";\n\nexport * from \"./defaults/factories/DefaultLinkFactory\";\nexport * from \"./defaults/factories/DefaultNodeFactory\";\nexport * from \"./defaults/factories/DefaultPortFactory\";\nexport * from \"./defaults/factories/DefaultLabelFactory\";\n\nexport * from \"./defaults/widgets/DefaultLinkWidget\";\nexport * from \"./defaults/widgets/DefaultLabelWidget\";\nexport * from \"./defaults/widgets/DefaultNodeWidget\";\nexport * from \"./defaults/widgets/DefaultPortLabelWidget\";\n\nexport * from \"./factories/AbstractFactory\";\nexport * from \"./factories/AbstractLabelFactory\";\nexport * from \"./factories/AbstractLinkFactory\";\nexport * from \"./factories/AbstractNodeFactory\";\nexport * from \"./factories/AbstractPortFactory\";\n\nexport * from \"./routing/PathFinding\";\n\nexport * from \"./actions/BaseAction\";\nexport * from \"./actions/MoveCanvasAction\";\nexport * from \"./actions/MoveItemsAction\";\nexport * from \"./actions/SelectingAction\";\n\nexport * from \"./models/SelectionModel\";\nexport * from \"./models/BaseModel\";\nexport * from \"./models/DiagramModel\";\nexport * from \"./models/LinkModel\";\nexport * from \"./models/NodeModel\";\nexport * from \"./models/PointModel\";\nexport * from \"./models/PortModel\";\nexport * from \"./models/LabelModel\";\n\nexport * from \"./widgets/DiagramWidget\";\nexport * from \"./widgets/LinkWidget\";\nexport * from \"./widgets/NodeWidget\";\nexport * from \"./widgets/PortWidget\";\nexport * from \"./widgets/BaseWidget\";\n\nexport * from \"./widgets/layers/LinkLayerWidget\";\nexport * from \"./widgets/layers/NodeLayerWidget\";\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport * as _ from \"lodash\";\nimport { LinkLayerWidget } from \"./layers/LinkLayerWidget\";\nimport { NodeLayerWidget } from \"./layers/NodeLayerWidget\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { MoveCanvasAction } from \"../actions/MoveCanvasAction\";\nimport { MoveItemsAction } from \"../actions/MoveItemsAction\";\nimport { SelectingAction } from \"../actions/SelectingAction\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { PortModel } from \"../models/PortModel\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { SelectionModel } from \"../models/SelectionModel\";\nimport { BaseModel, BaseModelListener } from \"../models/BaseModel\";\nimport { BaseEntity } from \"../BaseEntity\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface DiagramProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\n\tallowLooseLinks?: boolean;\n\tallowCanvasTranslation?: boolean;\n\tallowCanvasZoom?: boolean;\n\tinverseZoom?: boolean;\n\tmaxNumberPointsPerLink?: number;\n\tsmartRouting?: boolean;\n\n\tactionStartedFiring?: (action: BaseAction) => boolean;\n\tactionStillFiring?: (action: BaseAction) => void;\n\tactionStoppedFiring?: (action: BaseAction) => void;\n\n\tdeleteKeys?: number[];\n}\n\nexport interface DiagramState {\n\taction: BaseAction | null;\n\twasMoved: boolean;\n\trenderedNodes: boolean;\n\twindowListener: any;\n\tdiagramEngineListener: any;\n\tdocument: any;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiagramWidget extends BaseWidget<DiagramProps, DiagramState> {\n\tpublic static defaultProps: DiagramProps = {\n\t\tdiagramEngine: null,\n\t\tallowLooseLinks: true,\n\t\tallowCanvasTranslation: true,\n\t\tallowCanvasZoom: true,\n\t\tinverseZoom: false,\n\t\tmaxNumberPointsPerLink: Infinity, // backwards compatible default\n\t\tsmartRouting: false,\n\t\tdeleteKeys: [46, 8]\n\t};\n\n\tonKeyUpPointer: (this: Window, ev: KeyboardEvent) => void = null;\n\n\tconstructor(props: DiagramProps) {\n\t\tsuper(\"srd-diagram\", props);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.state = {\n\t\t\taction: null,\n\t\t\twasMoved: false,\n\t\t\trenderedNodes: false,\n\t\t\twindowListener: null,\n\t\t\tdiagramEngineListener: null,\n\t\t\tdocument: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\n\t\tthis.props.diagramEngine.setCanvas(null);\n\t\twindow.removeEventListener(\"keyup\", this.onKeyUpPointer);\n\t\twindow.removeEventListener(\"mouseUp\", this.onMouseUp);\n\t\twindow.removeEventListener(\"mouseMove\", this.onMouseMove);\n\t}\n\n\tcomponentWillReceiveProps(nextProps: DiagramProps) {\n\t\tif (this.props.diagramEngine !== nextProps.diagramEngine) {\n\t\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\n\t\t\tconst diagramEngineListener = nextProps.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => this.forceUpdate()\n\t\t\t});\n\t\t\tthis.setState({ diagramEngineListener });\n\t\t}\n\t}\n\n\tcomponentWillUpdate(nextProps: DiagramProps) {\n\t\tif (this.props.diagramEngine.diagramModel.id !== nextProps.diagramEngine.diagramModel.id) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t\tif (!nextProps.diagramEngine.diagramModel.rendered) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (!this.state.renderedNodes) {\n\t\t\tthis.setState({\n\t\t\t\trenderedNodes: true\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.onKeyUpPointer = this.onKeyUp.bind(this);\n\n\t\t//add a keyboard listener\n\t\tthis.setState({\n\t\t\tdocument: document,\n\t\t\trenderedNodes: true,\n\t\t\tdiagramEngineListener: this.props.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\twindow.addEventListener(\"keyup\", this.onKeyUpPointer, false);\n\n\t\t// dont focus the window when in test mode - jsdom fails\n\t\tif (process.env.NODE_ENV !== \"test\") {\n\t\t\twindow.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event): { model: BaseModel<BaseEntity, BaseModelListener>; element: Element } {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.props.diagramEngine.diagramModel;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, \".port[data-name]\");\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, \".node[data-nodeid]\") as HTMLElement;\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getNode(nodeElement.getAttribute(\"data-nodeid\"))\n\t\t\t\t\t.getPort(element.getAttribute(\"data-name\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, \".point[data-id]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getLink(element.getAttribute(\"data-linkid\"))\n\t\t\t\t\t.getPointModel(element.getAttribute(\"data-id\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, \"[data-linkid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getLink(element.getAttribute(\"data-linkid\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, \".node[data-nodeid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getNode(element.getAttribute(\"data-nodeid\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfireAction() {\n\t\tif (this.state.action && this.props.actionStillFiring) {\n\t\t\tthis.props.actionStillFiring(this.state.action);\n\t\t}\n\t}\n\n\tstopFiringAction(shouldSkipEvent?: boolean) {\n\t\tif (this.props.actionStoppedFiring && !shouldSkipEvent) {\n\t\t\tthis.props.actionStoppedFiring(this.state.action);\n\t\t}\n\t\tthis.setState({ action: null });\n\t}\n\n\tstartFiringAction(action: BaseAction) {\n\t\tvar setState = true;\n\t\tif (this.props.actionStartedFiring) {\n\t\t\tsetState = this.props.actionStartedFiring(action);\n\t\t}\n\t\tif (setState) {\n\t\t\tthis.setState({ action: action });\n\t\t}\n\t}\n\n\tonMouseMove(event) {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\t\t//select items so draw a bounding box\n\t\tif (this.state.action instanceof SelectingAction) {\n\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\n\n\t\t\t_.forEach(diagramModel.getNodes(), node => {\n\t\t\t\tif ((this.state.action as SelectingAction).containsElement(node.x, node.y, diagramModel)) {\n\t\t\t\t\tnode.setSelected(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t_.forEach(diagramModel.getLinks(), link => {\n\t\t\t\tvar allSelected = true;\n\t\t\t\t_.forEach(link.points, point => {\n\t\t\t\t\tif ((this.state.action as SelectingAction).containsElement(point.x, point.y, diagramModel)) {\n\t\t\t\t\t\tpoint.setSelected(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallSelected = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (allSelected) {\n\t\t\t\t\tlink.setSelected(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.state.action.mouseX2 = relative.x;\n\t\t\tthis.state.action.mouseY2 = relative.y;\n\n\t\t\tthis.fireAction();\n\t\t\tthis.setState({ action: this.state.action });\n\t\t\treturn;\n\t\t} else if (this.state.action instanceof MoveItemsAction) {\n\t\t\tlet amountX = event.clientX - this.state.action.mouseX;\n\t\t\tlet amountY = event.clientY - this.state.action.mouseY;\n\t\t\tlet amountZoom = diagramModel.getZoomLevel() / 100;\n\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t// in this case we need to also work out the relative grid position\n\t\t\t\tif (\n\t\t\t\t\tmodel.model instanceof NodeModel ||\n\t\t\t\t\t(model.model instanceof PointModel && !model.model.isConnectedToPort())\n\t\t\t\t) {\n\t\t\t\t\tmodel.model.x = diagramModel.getGridPosition(model.initialX + amountX / amountZoom);\n\t\t\t\t\tmodel.model.y = diagramModel.getGridPosition(model.initialY + amountY / amountZoom);\n\n\t\t\t\t\t// update port coordinates as well\n\t\t\t\t\tif (model.model instanceof NodeModel) {\n\t\t\t\t\t\t_.forEach(model.model.getPorts(), port => {\n\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(port);\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\t\t\tdiagramEngine.calculateRoutingMatrix();\n\t\t\t\t\t}\n\t\t\t\t} else if (model.model instanceof PointModel) {\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\n\t\t\t\t\tmodel.model.x = model.initialX + diagramModel.getGridPosition(amountX / amountZoom);\n\t\t\t\t\tmodel.model.y = model.initialY + diagramModel.getGridPosition(amountY / amountZoom);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\tdiagramEngine.calculateCanvasMatrix();\n\t\t\t}\n\n\t\t\tthis.fireAction();\n\t\t\tif (!this.state.wasMoved) {\n\t\t\t\tthis.setState({ wasMoved: true });\n\t\t\t} else {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t} else if (this.state.action instanceof MoveCanvasAction) {\n\t\t\t//translate the actual canvas\n\t\t\tif (this.props.allowCanvasTranslation) {\n\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\tthis.state.action.initialOffsetX + (event.clientX - this.state.action.mouseX),\n\t\t\t\t\tthis.state.action.initialOffsetY + (event.clientY - this.state.action.mouseY)\n\t\t\t\t);\n\t\t\t\tthis.fireAction();\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\tonKeyUp(event) {\n\t\t//delete all selected\n\t\tif (this.props.deleteKeys.indexOf(event.keyCode) !== -1) {\n\t\t\t_.forEach(this.props.diagramEngine.getDiagramModel().getSelectedItems(), element => {\n\t\t\t\t//only delete items which are not locked\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(element)) {\n\t\t\t\t\telement.remove();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tonMouseUp(event) {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\t//are we going to connect a link to something?\n\t\tif (this.state.action instanceof MoveItemsAction) {\n\t\t\tvar element = this.getMouseElement(event);\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (element && element.model instanceof PortModel && !diagramEngine.isModelLocked(element.model)) {\n\t\t\t\t\tlet link = model.model.getLink();\n\t\t\t\t\tif (link.getTargetPort() !== null) {\n\t\t\t\t\t\t//if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n\t\t\t\t\t\tif (link.getTargetPort() !== element.model && link.getSourcePort() !== element.model) {\n\t\t\t\t\t\t\tconst targetPort = link.getTargetPort();\n\t\t\t\t\t\t\tlet newLink = link.clone({});\n\t\t\t\t\t\t\tnewLink.setSourcePort(element.model);\n\t\t\t\t\t\t\tnewLink.setTargetPort(targetPort);\n\t\t\t\t\t\t\tlink.setTargetPort(element.model);\n\t\t\t\t\t\t\ttargetPort.removeLink(link);\n\t\t\t\t\t\t\tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(newLink);\n\t\t\t\t\t\t\t//if we are connecting to the same target or source, remove tweener points\n\t\t\t\t\t\t} else if (link.getTargetPort() === element.model) {\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t} else if (link.getSourcePort() === element.model) {\n\t\t\t\t\t\t\tlink.removePointsBefore(model.model);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlink.setTargetPort(element.model);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.props.diagramEngine.linksThatHaveInitiallyRendered[link.getID()];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//check for / remove any loose links in any models which have been moved\n\t\t\tif (!this.props.allowLooseLinks && this.state.wasMoved) {\n\t\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t\t//only care about points connecting to things\n\t\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet selectedPoint: PointModel = model.model;\n\t\t\t\t\tlet link: LinkModel = selectedPoint.getLink();\n\t\t\t\t\tif (link.getSourcePort() === null || link.getTargetPort() === null) {\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//remove any invalid links\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet link: LinkModel = model.model.getLink();\n\t\t\t\tlet sourcePort: PortModel = link.getSourcePort();\n\t\t\t\tlet targetPort: PortModel = link.getTargetPort();\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\n\t\t\t\t\tif (!sourcePort.canLinkToPort(targetPort)) {\n\t\t\t\t\t\t//link not allowed\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t_.some(\n\t\t\t\t\t\t\t_.values(targetPort.getLinks()),\n\t\t\t\t\t\t\t(l: LinkModel) =>\n\t\t\t\t\t\t\t\tl !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t//link is a duplicate\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tthis.stopFiringAction(!this.state.wasMoved);\n\t\t} else {\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tthis.stopFiringAction();\n\t\t}\n\t\tthis.state.document.removeEventListener(\"mousemove\", this.onMouseMove);\n\t\tthis.state.document.removeEventListener(\"mouseup\", this.onMouseUp);\n\t}\n\n\tdrawSelectionBox() {\n\t\tlet dimensions = (this.state.action as SelectingAction).getBoxDimensions();\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={this.bem(\"__selector\")}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: dimensions.top,\n\t\t\t\t\tleft: dimensions.left,\n\t\t\t\t\twidth: dimensions.width,\n\t\t\t\t\theight: dimensions.height\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tdiagramEngine.setMaxNumberPointsPerLink(this.props.maxNumberPointsPerLink);\n\t\tdiagramEngine.setSmartRoutingStatus(this.props.smartRouting);\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tref={ref => {\n\t\t\t\t\tif (ref) {\n\t\t\t\t\t\tthis.props.diagramEngine.setCanvas(ref);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonWheel={event => {\n\t\t\t\t\tif (this.props.allowCanvasZoom) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\tconst oldZoomFactor = diagramModel.getZoomLevel() / 100;\n\t\t\t\t\t\tlet scrollDelta = this.props.inverseZoom ? -event.deltaY : event.deltaY;\n\t\t\t\t\t\t//check if it is pinch gesture\n\t\t\t\t\t\tif (event.ctrlKey && scrollDelta % 1 !== 0) {\n\t\t\t\t\t\t\t/*Chrome and Firefox sends wheel event with deltaY that\n                have fractional part, also `ctrlKey` prop of the event is true\n                though ctrl isn't pressed\n              */\n\t\t\t\t\t\t\tscrollDelta /= 3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscrollDelta /= 60;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (diagramModel.getZoomLevel() + scrollDelta > 10) {\n\t\t\t\t\t\t\tdiagramModel.setZoomLevel(diagramModel.getZoomLevel() + scrollDelta);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst zoomFactor = diagramModel.getZoomLevel() / 100;\n\n\t\t\t\t\t\tconst boundingRect = event.currentTarget.getBoundingClientRect();\n\t\t\t\t\t\tconst clientWidth = boundingRect.width;\n\t\t\t\t\t\tconst clientHeight = boundingRect.height;\n\t\t\t\t\t\t// compute difference between rect before and after scroll\n\t\t\t\t\t\tconst widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n\t\t\t\t\t\tconst heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\t\t\t\t\t\t// compute mouse coords relative to canvas\n\t\t\t\t\t\tconst clientX = event.clientX - boundingRect.left;\n\t\t\t\t\t\tconst clientY = event.clientY - boundingRect.top;\n\n\t\t\t\t\t\t// compute width and height increment factor\n\t\t\t\t\t\tconst xFactor = (clientX - diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n\t\t\t\t\t\tconst yFactor = (clientY - diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n\t\t\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\t\t\tdiagramModel.getOffsetX() - widthDiff * xFactor,\n\t\t\t\t\t\t\tdiagramModel.getOffsetY() - heightDiff * yFactor\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiagramEngine.enableRepaintEntities([]);\n\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonMouseDown={event => {\n\t\t\t\t\tthis.setState({ ...this.state, wasMoved: false });\n\n\t\t\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\t\t\tvar model = this.getMouseElement(event);\n\t\t\t\t\t//the canvas was selected\n\t\t\t\t\tif (model === null) {\n\t\t\t\t\t\t//is it a multiple selection\n\t\t\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\n\t\t\t\t\t\t\tthis.startFiringAction(new SelectingAction(relative.x, relative.y));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//its a drag the canvas event\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\tthis.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, diagramModel));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (model.model instanceof PortModel) {\n\t\t\t\t\t\t//its a port element, we want to drag a link\n\t\t\t\t\t\tif (!this.props.diagramEngine.isModelLocked(model.model)) {\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativeMousePoint(event);\n\t\t\t\t\t\t\tvar sourcePort = model.model;\n\t\t\t\t\t\t\tvar link = sourcePort.createLinkModel();\n\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\n\t\t\t\t\t\t\tif (link) {\n\t\t\t\t\t\t\t\tlink.removeMiddlePoints();\n\t\t\t\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\n\t\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlink.setTargetPort(null);\n\n\t\t\t\t\t\t\t\tlink.getFirstPoint().updateLocation(relative);\n\t\t\t\t\t\t\t\tlink.getLastPoint().updateLocation(relative);\n\n\t\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\t\tlink.getLastPoint().setSelected(true);\n\t\t\t\t\t\t\t\tdiagramModel.addLink(link);\n\n\t\t\t\t\t\t\t\tthis.startFiringAction(\n\t\t\t\t\t\t\t\t\tnew MoveItemsAction(event.clientX, event.clientY, diagramEngine)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//its some or other element, probably want to move it\n\t\t\t\t\t\tif (!event.shiftKey && !model.model.isSelected()) {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodel.model.setSelected(true);\n\n\t\t\t\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, diagramEngine));\n\t\t\t\t\t}\n\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\n\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.state.renderedNodes && (\n\t\t\t\t\t<LinkLayerWidget\n\t\t\t\t\t\tdiagramEngine={diagramEngine}\n\t\t\t\t\t\tpointAdded={(point: PointModel, event) => {\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\tdiagramModel.clearSelection(point);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\taction: new MoveItemsAction(event.clientX, event.clientY, diagramEngine)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<NodeLayerWidget diagramEngine={diagramEngine} />\n\t\t\t\t{this.state.action instanceof SelectingAction && this.drawSelectionBox()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport * as React from \"react\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractNodeFactory } from \"../../factories/AbstractNodeFactory\";\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel): JSX.Element {\n\t\treturn React.createElement(DefaultNodeWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\n\t\treturn new DefaultNodeModel();\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLinkFactory } from \"../../factories/AbstractLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\n\t\treturn React.createElement(DefaultLinkWidget, {\n\t\t\tlink: link,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n\n\tgenerateLinkSegment(model: DefaultLinkModel, widget: DefaultLinkWidget, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<path\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\n\t\t\t\tstrokeWidth={model.width}\n\t\t\t\tstroke={model.color}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { BaseEntity, BaseListener } from \"./BaseEntity\";\nimport { DiagramModel } from \"./models/DiagramModel\";\nimport * as _ from \"lodash\";\nimport { BaseModel, BaseModelListener } from \"./models/BaseModel\";\nimport { NodeModel } from \"./models/NodeModel\";\nimport { PointModel } from \"./models/PointModel\";\nimport { PortModel } from \"./models/PortModel\";\nimport { LinkModel } from \"./models/LinkModel\";\nimport { AbstractLabelFactory } from \"./factories/AbstractLabelFactory\";\nimport { AbstractLinkFactory } from \"./factories/AbstractLinkFactory\";\nimport { AbstractNodeFactory } from \"./factories/AbstractNodeFactory\";\nimport { AbstractPortFactory } from \"./factories/AbstractPortFactory\";\nimport { DefaultLinkFactory, DefaultNodeFactory } from \"./main\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport { DefaultPortFactory } from \"./defaults/factories/DefaultPortFactory\";\nimport { LabelModel } from \"./models/LabelModel\";\nimport { DefaultLabelFactory } from \"./defaults/factories/DefaultLabelFactory\";\nimport { Toolkit } from \"./Toolkit\";\n/**\n * @author Dylan Vorster\n */\nexport interface DiagramEngineListener extends BaseListener {\n\tportFactoriesUpdated?(): void;\n\n\tnodeFactoriesUpdated?(): void;\n\n\tlinkFactoriesUpdated?(): void;\n\n\tlabelFactoriesUpdated?(): void;\n\n\trepaintCanvas?(): void;\n}\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends BaseEntity<DiagramEngineListener> {\n\tnodeFactories: { [s: string]: AbstractNodeFactory };\n\tlinkFactories: { [s: string]: AbstractLinkFactory };\n\tportFactories: { [s: string]: AbstractPortFactory };\n\tlabelFactories: { [s: string]: AbstractLabelFactory };\n\n\tdiagramModel: DiagramModel;\n\tcanvas: Element;\n\tpaintableWidgets: {};\n\tlinksThatHaveInitiallyRendered: {};\n\tnodesRendered: boolean;\n\tmaxNumberPointsPerLink: number;\n\tsmartRouting: boolean;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor: number = 0;\n\tvAdjustmentFactor: number = 0;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.diagramModel = new DiagramModel();\n\t\tthis.nodeFactories = {};\n\t\tthis.linkFactories = {};\n\t\tthis.portFactories = {};\n\t\tthis.labelFactories = {};\n\t\tthis.canvas = null;\n\t\tthis.paintableWidgets = null;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID = 0;\n\n\t\t\t//pop it onto the window so our E2E helpers can find it\n\t\t\tif (window) {\n\t\t\t\t(window as any)[\"diagram_instance\"] = this;\n\t\t\t}\n\t\t}\n\t}\n\n\tinstallDefaultFactories() {\n\t\tthis.registerNodeFactory(new DefaultNodeFactory());\n\t\tthis.registerLinkFactory(new DefaultLinkFactory());\n\t\tthis.registerPortFactory(new DefaultPortFactory());\n\t\tthis.registerLabelFactory(new DefaultLabelFactory());\n\t}\n\n\trepaintCanvas() {\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.repaintCanvas) {\n\t\t\t\tlistener.repaintCanvas();\n\t\t\t}\n\t\t});\n\t}\n\n\tclearRepaintEntities() {\n\t\tthis.paintableWidgets = null;\n\t}\n\n\tenableRepaintEntities(entities: BaseModel<BaseEntity, BaseModelListener>[]) {\n\t\tthis.paintableWidgets = {};\n\t\tentities.forEach(entity => {\n\t\t\t//if a node is requested to repaint, add all of its links\n\t\t\tif (entity instanceof NodeModel) {\n\t\t\t\t_.forEach(entity.getPorts(), port => {\n\t\t\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\t\t\tthis.paintableWidgets[link.getID()] = true;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (entity instanceof PointModel) {\n\t\t\t\tthis.paintableWidgets[entity.getLink().getID()] = true;\n\t\t\t}\n\n\t\t\tthis.paintableWidgets[entity.getID()] = true;\n\t\t});\n\t}\n\n\t/**\n\t * Checks to see if a model is locked by running through\n\t * its parents to see if they are locked first\n\t */\n\tisModelLocked(model: BaseEntity<BaseListener>) {\n\t\t//always check the diagram model\n\t\tif (this.diagramModel.isLocked()) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn model.isLocked();\n\t}\n\n\trecalculatePortsVisually() {\n\t\tthis.nodesRendered = false;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\t}\n\n\tcanEntityRepaint(baseModel: BaseModel<BaseEntity, BaseModelListener>) {\n\t\t//no rules applied, allow repaint\n\t\tif (this.paintableWidgets === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.paintableWidgets[baseModel.getID()] !== undefined;\n\t}\n\n\tsetCanvas(canvas: Element | null) {\n\t\tthis.canvas = canvas;\n\t}\n\n\tsetDiagramModel(model: DiagramModel) {\n\t\tthis.diagramModel = model;\n\t\tthis.recalculatePortsVisually();\n\t}\n\n\tgetDiagramModel(): DiagramModel {\n\t\treturn this.diagramModel;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\n\t\treturn this.labelFactories;\n\t}\n\n\tregisterLabelFactory(factory: AbstractLabelFactory) {\n\t\tthis.labelFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.labelFactoriesUpdated) {\n\t\t\t\tlistener.labelFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterPortFactory(factory: AbstractPortFactory) {\n\t\tthis.portFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.portFactoriesUpdated) {\n\t\t\t\tlistener.portFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterNodeFactory(factory: AbstractNodeFactory) {\n\t\tthis.nodeFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.nodeFactoriesUpdated) {\n\t\t\t\tlistener.nodeFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\n\t\tthis.linkFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.linkFactoriesUpdated) {\n\t\t\t\tlistener.linkFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetPortFactory(type: string): AbstractPortFactory {\n\t\tif (this.portFactories[type]) {\n\t\t\treturn this.portFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\n\t}\n\n\tgetNodeFactory(type: string): AbstractNodeFactory {\n\t\tif (this.nodeFactories[type]) {\n\t\t\treturn this.nodeFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\n\t}\n\n\tgetLinkFactory(type: string): AbstractLinkFactory {\n\t\tif (this.linkFactories[type]) {\n\t\t\treturn this.linkFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\n\t}\n\n\tgetLabelFactory(type: string): AbstractLabelFactory {\n\t\tif (this.labelFactories[type]) {\n\t\t\treturn this.labelFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for label of type: [${type}]`);\n\t}\n\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n\t\treturn this.getNodeFactory(node.getType());\n\t}\n\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n\t\treturn this.getLinkFactory(link.getType());\n\t}\n\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n\t\treturn this.getLabelFactory(label.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element | null {\n\t\tvar linkFactory = this.getFactoryForLink(link);\n\t\tif (!linkFactory) {\n\t\t\tthrow new Error(\"Cannot find link factory for link: \" + link.getType());\n\t\t}\n\t\treturn linkFactory.generateReactWidget(this, link);\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element | null {\n\t\tvar nodeFactory = this.getFactoryForNode(node);\n\t\tif (!nodeFactory) {\n\t\t\tthrow new Error(\"Cannot find widget factory for node: \" + node.getType());\n\t\t}\n\t\treturn nodeFactory.generateReactWidget(this, node);\n\t}\n\n\tgetRelativeMousePoint(event): { x: number; y: number } {\n\t\tvar point = this.getRelativePoint(event.clientX, event.clientY);\n\t\treturn {\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\tgetRelativePoint(x, y) {\n\t\tvar canvasRect = this.canvas.getBoundingClientRect();\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\"Cannot find Node element with nodeID: [\" + node.getID() + \"]\");\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot find Node Port element with nodeID: [\" +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t\"] and name: [\" +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t\"]\"\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel) {\n\t\tvar sourceElement = this.getNodePortElement(port);\n\t\tvar sourceRect = sourceElement.getBoundingClientRect();\n\n\t\tvar rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\tsourceElement.offsetWidth / 2 +\n\t\t\t\t(rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty:\n\t\t\t\tsourceElement.offsetHeight / 2 +\n\t\t\t\t(rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(\n\t\tport: PortModel\n\t): {\n\t\tx: number;\n\t\ty: number;\n\t\twidth: number;\n\t\theight: number;\n\t} {\n\t\tconst sourceElement = this.getNodePortElement(port);\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\n\t\tconst canvasRect = this.canvas.getBoundingClientRect() as ClientRect;\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\t(sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.left,\n\t\t\ty:\n\t\t\t\t(sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.top,\n\t\t\twidth: sourceRect.width,\n\t\t\theight: sourceRect.height\n\t\t};\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n\n\tisSmartRoutingEnabled() {\n\t\treturn !!this.smartRouting;\n\t}\n\tsetSmartRoutingStatus(status: boolean) {\n\t\tthis.smartRouting = status;\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\tcalculateCanvasMatrix() {\n\t\tconst {\n\t\t\twidth: canvasWidth,\n\t\t\thAdjustmentFactor,\n\t\t\theight: canvasHeight,\n\t\t\tvAdjustmentFactor\n\t\t} = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions = (): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} => {\n\t\tconst allNodesCoords = _.values(this.diagramModel.nodes).map(item => ({\n\t\t\tx: item.x,\n\t\t\twidth: item.width,\n\t\t\ty: item.y,\n\t\t\theight: item.height\n\t\t}));\n\n\t\tconst allLinks = _.values(this.diagramModel.links);\n\t\tconst allPortsCoords = _.flatMap(allLinks.map(link => [link.sourcePort, link.targetPort]))\n\t\t\t.filter(port => port !== null)\n\t\t\t.map(item => ({\n\t\t\t\tx: item.x,\n\t\t\t\twidth: item.width,\n\t\t\t\ty: item.y,\n\t\t\t\theight: item.height\n\t\t\t}));\n\t\tconst allPointsCoords = _.flatMap(allLinks.map(link => link.points)).map(item => ({\n\t\t\t// points don't have width/height, so let's just use 0\n\t\t\tx: item.x,\n\t\t\twidth: 0,\n\t\t\ty: item.y,\n\t\t\theight: 0\n\t\t}));\n\n\t\tconst canvas = this.canvas as HTMLDivElement;\n\t\tconst minX =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.x).x, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxXElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.x + item.width\n\t\t);\n\t\tconst maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n\t\tconst minY =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.y).y, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxYElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.y + item.height\n\t\t);\n\t\tconst maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\n\n\t\treturn {\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\n\t\t};\n\t};\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes = (matrix: number[][]): void => {\n\t\t_.values(this.diagramModel.nodes).forEach(node => {\n\t\t\tconst startX = Math.floor(node.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.x + node.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.y + node.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts = (matrix: number[][]): void => {\n\t\tconst allElements = _.flatMap(\n\t\t\t_.values(this.diagramModel.links).map(link => [].concat(link.sourcePort, link.targetPort))\n\t\t);\n\t\tallElements.filter(port => port !== null).forEach(port => {\n\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n\n\tzoomToFit() {\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\tthis.diagramModel.setZoomLevel(this.diagramModel.getZoomLevel() * zoomFactor);\n\t\tthis.diagramModel.setOffset(0, 0);\n\t\tthis.repaintCanvas();\n\t}\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar sq = function sq(x) {\n  return x * x;\n};\n\nvar distPointToPoint = function distPointToPoint(_ref, _ref3) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var ax = _ref2[0];\n  var ay = _ref2[1];\n\n  var _ref32 = _slicedToArray(_ref3, 2);\n\n  var bx = _ref32[0];\n  var by = _ref32[1];\n  return Math.sqrt(sq(ax - bx) + sq(ay - by));\n};\n\nvar distPointToParabol = function distPointToParabol(a, f) {\n  var p = distPointToPoint(a, f);\n\n  return p == 0 ? Infinity : sq(p) / (2 * Math.abs(a[1] - f[1]));\n};\n\nvar circumCenter = function circumCenter(a, b, c) {\n  var d = (a[0] - c[0]) * (b[1] - c[1]) - (b[0] - c[0]) * (a[1] - c[1]);\n\n  if (d == 0) return [Infinity, Infinity];\n\n  var xc = (((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[1] - c[1]) - ((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[1] - c[1])) / d;\n  var yc = (((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[0] - c[0]) - ((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[0] - c[0])) / d;\n  return [xc, yc];\n};\n\nvar parabolsCrossX = function parabolsCrossX(fa, fb, q) {\n  if (fa[1] === fb[1]) return [(fa[0] + fb[0]) / 2, (fa[0] + fb[0]) / 2];\n\n  var s1 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q + Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n  var s2 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q - Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n\n  return s1 < s2 ? [s1, s2] : [s2, s1];\n};\n\nvar doHalflinesCross = function doHalflinesCross(sa, sb) {\n  var approx = arguments.length <= 2 || arguments[2] === undefined ? 1e-10 : arguments[2];\n  //sa, sb are Segment instance\n  var dx = sb.ps[0] - sa.ps[0];\n  var dy = sb.ps[1] - sa.ps[1];\n\n  if (sa.m == Infinity) return sa.hp * (sb.m * dx - dy) <= approx && sb.vec[0] * dx <= approx;\n  if (sb.m == Infinity) return sb.hp * (sa.m * dx - dy) >= -approx && sa.vec[0] * dx >= -approx;\n\n  var det = sb.vec[0] * sa.vec[1] - sb.vec[1] * sa.vec[0];\n\n  if (det === 0) return false;\n\n  var u = (dy * sb.vec[0] - dx * sb.vec[1]) / det;\n  var v = (dy * sa.vec[0] - dx * sa.vec[1]) / det;\n\n  return u >= -approx && v >= approx || u >= approx && v >= -approx;\n};\n\nvar matrixTransform = function matrixTransform(points, matrix) {\n  return points.map(function (point) {\n    return {\n      x: point.x * matrix[0] + point.y * matrix[2] + matrix[4],\n      y: point.x * matrix[1] + point.y * matrix[3] + matrix[5]\n    };\n  });\n};\n\nvar transformEllipse = function transformEllipse(rx, ry, ax, m) {\n  var torad = Math.PI / 180;\n  var epsilon = 0.0000000001;\n\n  var c = Math.cos(ax * torad),\n      s = Math.sin(ax * torad);\n  var ma = [rx * (m[0] * c + m[2] * s), rx * (m[1] * c + m[3] * s), ry * (-m[0] * s + m[2] * c), ry * (-m[1] * s + m[3] * c)];\n\n  var J = ma[0] * ma[0] + ma[2] * ma[2],\n      K = ma[1] * ma[1] + ma[3] * ma[3];\n\n  var D = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1]));\n\n  var JK = (J + K) / 2;\n\n  if (D < epsilon * JK) {\n    return {\n      rx: Math.sqrt(JK),\n      ry: Math.sqrt(JK),\n      ax: 0,\n      isDegenerate: false\n    };\n  }\n\n  var L = ma[0] * ma[1] + ma[2] * ma[3];\n  D = Math.sqrt(D);\n\n  var l1 = JK + D / 2,\n      l2 = JK - D / 2;\n\n  var newAx = undefined,\n      newRx = undefined,\n      newRy = undefined;\n  newAx = Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon ? 90 : Math.atan(Math.abs(L) > Math.abs(l1 - K) ? (l1 - J) / L : L / (l1 - K)) * 180 / Math.PI;\n\n  if (newAx >= 0) {\n    newRx = Math.sqrt(l1);\n    newRy = Math.sqrt(l2);\n  } else {\n    newAx += 90;\n    newRx = Math.sqrt(l2);\n    newRy = Math.sqrt(l1);\n  }\n\n  return {\n    rx: newRx,\n    ry: newRy,\n    ax: newAx,\n    isDegenerate: newRx < epsilon * newRy || newRy < epsilon * newRx\n  };\n};\n\nexports[\"default\"] = { distPointToPoint: distPointToPoint, distPointToParabol: distPointToParabol, circumCenter: circumCenter,\n  parabolsCrossX: parabolsCrossX, doHalflinesCross: doHalflinesCross, matrixTransform: matrixTransform, transformEllipse: transformEllipse };\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _geom = require('./geom');\n\nvar Path = function Path(init) {\n  var _instructions = init || [];\n\n  var push = function push(arr, el) {\n    var copy = arr.slice(0, arr.length);\n    copy.push(el);\n    return copy;\n  };\n\n  var areEqualPoints = function areEqualPoints(_ref, _ref3) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var a1 = _ref2[0];\n    var b1 = _ref2[1];\n\n    var _ref32 = _slicedToArray(_ref3, 2);\n\n    var a2 = _ref32[0];\n    var b2 = _ref32[1];\n    return a1 === a2 && b1 === b2;\n  };\n\n  var trimZeros = function trimZeros(string, char) {\n    var l = string.length;\n    while (string.charAt(l - 1) === '0') {\n      l = l - 1;\n    }\n    if (string.charAt(l - 1) === '.') {\n      l = l - 1;\n    }\n    return string.substr(0, l);\n  };\n\n  var round = function round(number, digits) {\n    var str = number.toFixed(digits);\n    return trimZeros(str);\n  };\n\n  var printInstrunction = function printInstrunction(_ref4) {\n    var command = _ref4.command;\n    var params = _ref4.params;\n\n    var numbers = params.map(function (param) {\n      return round(param, 6);\n    });\n    return command + ' ' + numbers.join(' ');\n  };\n\n  var point = function point(_ref5, prev) {\n    var command = _ref5.command;\n    var params = _ref5.params;\n\n    switch (command) {\n      case 'M':\n        return [params[0], params[1]];\n      case 'L':\n        return [params[0], params[1]];\n      case 'H':\n        return [params[0], prev[1]];\n      case 'V':\n        return [prev[0], params[0]];\n      case 'Z':\n        return null;\n      case 'C':\n        return [params[4], params[5]];\n      case 'S':\n        return [params[2], params[3]];\n      case 'Q':\n        return [params[2], params[3]];\n      case 'T':\n        return [params[0], params[1]];\n      case 'A':\n        return [params[5], params[6]];\n    }\n  };\n\n  var transformParams = function transformParams(instruction, matrix, prev) {\n    var p = instruction.params;\n\n    var transformer = {\n      'V': function V(instruction, matrix, prev) {\n        var pts = [{ x: prev[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].x === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].x) {\n          return {\n            command: 'V',\n            params: [newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'H': function H(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: prev[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].y === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].y) {\n          return {\n            command: 'H',\n            params: [newPts[0].x]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'A': function A(instruction, matrix, prev) {\n        // transform rx, ry, and x-axis rotation\n        var r = (0, _geom.transformEllipse)(p[0], p[1], p[2], matrix);\n\n        var sweepFlag = p[4];\n        if (matrix[0] * matrix[3] - matrix[1] * matrix[2] < 0) {\n          sweepFlag = sweepFlag ? '0' : '1';\n        }\n\n        // transform endpoint\n        var pts = [{ x: p[5], y: p[6] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n\n        if (r.isDegenerate) {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'A',\n            params: [r.rx, r.ry, r.ax, p[3], sweepFlag, newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'C': function C(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }, { x: p[2], y: p[3] }, { x: p[4], y: p[5] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        return {\n          command: 'C',\n          params: [newPts[0].x, newPts[0].y, newPts[1].x, newPts[1].y, newPts[2].x, newPts[2].y]\n        };\n      },\n      'Z': function Z(instruction, matrix, prev) {\n        return {\n          command: 'Z',\n          params: []\n        };\n      },\n      'default': function _default(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        var newParams = instruction.params.slice(0, instruction.params.length);\n        newParams.splice(0, 2, newPts[0].x, newPts[0].y);\n        return {\n          command: instruction.command,\n          params: newParams\n        };\n      }\n    };\n\n    if (transformer[instruction.command]) {\n      return transformer[instruction.command](instruction, matrix, prev);\n    } else {\n      return transformer['default'](instruction, matrix, prev);\n    }\n  };\n\n  var verbosify = function verbosify(keys, f) {\n    return function (a) {\n      var args = typeof a === 'object' ? keys.map(function (k) {\n        return a[k];\n      }) : arguments;\n      return f.apply(null, args);\n    };\n  };\n\n  var plus = function plus(instruction) {\n    return Path(push(_instructions, instruction));\n  };\n\n  return {\n    moveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'M',\n        params: [x, y]\n      });\n    }),\n    lineto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'L',\n        params: [x, y]\n      });\n    }),\n    hlineto: verbosify(['x'], function (x) {\n      return plus({\n        command: 'H',\n        params: [x]\n      });\n    }),\n    vlineto: verbosify(['y'], function (y) {\n      return plus({\n        command: 'V',\n        params: [y]\n      });\n    }),\n    closepath: function closepath() {\n      return plus({\n        command: 'Z',\n        params: []\n      });\n    },\n    curveto: verbosify(['x1', 'y1', 'x2', 'y2', 'x', 'y'], function (x1, y1, x2, y2, x, y) {\n      return plus({\n        command: 'C',\n        params: [x1, y1, x2, y2, x, y]\n      });\n    }),\n    smoothcurveto: verbosify(['x2', 'y2', 'x', 'y'], function (x2, y2, x, y) {\n      return plus({\n        command: 'S',\n        params: [x2, y2, x, y]\n      });\n    }),\n    qcurveto: verbosify(['x1', 'y1', 'x', 'y'], function (x1, y1, x, y) {\n      return plus({\n        command: 'Q',\n        params: [x1, y1, x, y]\n      });\n    }),\n    smoothqcurveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'T',\n        params: [x, y]\n      });\n    }),\n    arc: verbosify(['rx', 'ry', 'xrot', 'largeArcFlag', 'sweepFlag', 'x', 'y'], function (rx, ry, xrot, largeArcFlag, sweepFlag, x, y) {\n      return plus({\n        command: 'A',\n        params: [rx, ry, xrot, largeArcFlag, sweepFlag, x, y]\n      });\n    }),\n    translate: verbosify(['dx', 'dy'], function () {\n      var dx = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n      var dy = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      if (dx !== 0 || dx !== 0) {\n        var _ret = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, 0, 1, dx, dy];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    rotate: verbosify(['angle', 'rx', 'ry'], function (angle) {\n      var rx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var ry = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n      if (angle !== 0) {\n        var _ret2 = (function () {\n          var prev = undefined;\n          var matrix = undefined;\n          var newInstructions = _instructions;\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, -rx, -ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          var rad = angle * Math.PI / 180;\n          var cos = Math.cos(rad);\n          var sin = Math.sin(rad);\n\n          prev = [0, 0];\n          matrix = [cos, sin, -sin, cos, 0, 0];\n          newInstructions = newInstructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, rx, ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret2 === 'object') return _ret2.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    scale: verbosify(['sx', 'sy'], function () {\n      var sx = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n      var sy = arguments.length <= 1 || arguments[1] === undefined ? sx : arguments[1];\n      return (function () {\n        if (sx !== 1 || sy !== 1) {\n          var _ret3 = (function () {\n            var prev = [0, 0];\n            var matrix = [sx, 0, 0, sy, 0, 0];\n            var newInstructions = _instructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n            return {\n              v: Path(newInstructions)\n            };\n          })();\n\n          if (typeof _ret3 === 'object') return _ret3.v;\n        } else {\n          return Path(_instructions);\n        }\n      })();\n    }),\n    shearX: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret4 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret4 === 'object') return _ret4.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    shearY: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret5 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret5 === 'object') return _ret5.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    print: function print() {\n      return _instructions.map(printInstrunction).join(' ');\n    },\n    toString: function toString() {\n      return undefined.print();\n    },\n    points: function points() {\n      var ps = [];\n      var prev = [0, 0];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _instructions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var instruction = _step.value;\n\n          var p = point(instruction, prev);\n          prev = p;\n          if (p) {\n            ps.push(p);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator['return']) {\n            _iterator['return']();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return ps;\n    },\n    instructions: function instructions() {\n      return _instructions.slice(0, _instructions.length);\n    },\n    connect: function connect(path) {\n      var ps = this.points();\n      var last = ps[ps.length - 1];\n      var first = path.points()[0];\n      var newInstructions = undefined;\n      if (_instructions[_instructions.length - 1].command !== 'Z') {\n        newInstructions = path.instructions().slice(1);\n        if (!areEqualPoints(last, first)) {\n          newInstructions.unshift({\n            command: \"L\",\n            params: first\n          });\n        }\n      } else {\n        newInstructions = path.instructions();\n      }\n      return Path(this.instructions().concat(newInstructions));\n    }\n  };\n};\n\nexports['default'] = function () {\n  return Path();\n};\n\nmodule.exports = exports['default'];","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n","/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\r\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\r\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n","var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n","var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if (typeof module !== \"undefined\" && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n","module.exports = {\r\n    'Heap'                      : require('heap'),\r\n    'Node'                      : require('./core/Node'),\r\n    'Grid'                      : require('./core/Grid'),\r\n    'Util'                      : require('./core/Util'),\r\n    'DiagonalMovement'          : require('./core/DiagonalMovement'),\r\n    'Heuristic'                 : require('./core/Heuristic'),\r\n    'AStarFinder'               : require('./finders/AStarFinder'),\r\n    'BestFirstFinder'           : require('./finders/BestFirstFinder'),\r\n    'BreadthFirstFinder'        : require('./finders/BreadthFirstFinder'),\r\n    'DijkstraFinder'            : require('./finders/DijkstraFinder'),\r\n    'BiAStarFinder'             : require('./finders/BiAStarFinder'),\r\n    'BiBestFirstFinder'         : require('./finders/BiBestFirstFinder'),\r\n    'BiBreadthFirstFinder'      : require('./finders/BiBreadthFirstFinder'),\r\n    'BiDijkstraFinder'          : require('./finders/BiDijkstraFinder'),\r\n    'IDAStarFinder'             : require('./finders/IDAStarFinder'),\r\n    'JumpPointFinder'           : require('./finders/JumpPointFinder'),\r\n};\r\n","module.exports = require('./src/PathFinding');\r\n","\r\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nmodule.exports = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}","var matches = require('matches-selector')\r\n\r\nmodule.exports = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode\r\n\r\n  while (parent && parent !== document) {\r\n    if (matches(parent, selector)) return parent;\r\n    parent = parent.parentNode\r\n  }\r\n}\r\n"],"sourceRoot":""}