<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>ApiExtension</Name>
    <Version>1.0.2</Version>
    <Vendor>becon GmbH</Vendor>
    <URL>https://www.becon.de</URL>
    <License>becon GmbH</License>
    <ChangeLog Date="2021-04-05 12:40:12" Version="1.0.0">[Initial commit] First release</ChangeLog>
    <ChangeLog Date="2021-12-07 10:01:12" Version="1.0.1">[BUGFIX] fixed api operations of the configuration mangagement package</ChangeLog>
    <ChangeLog Date="2024-16-02 08:01:15" Version="1.0.2">[Added] customer and customer crud (without delete) api operation</ChangeLog>
    <Description Lang="de">Das Paket beinhaltet eine API Erweiterung f√ºr die Service und LinkObject Verwaltung.</Description>
    <Description Lang="en">The package includes an api extenstion for managing Service and LinkObject.</Description>
    <Framework>6.x.x</Framework>
    <IntroInstall Lang="en" Title="License Agreement" Type="pre">
        </IntroInstall>
    <PackageRequired Version="6.0.0">ITSMConfigurationManagement</PackageRequired>
    <BuildDate>2024-02-16 08:32:53</BuildDate>
    <BuildHost>otrs.becon.de</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ApiExtension.xml" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/GenericInterface/Operation/ConfigItem/Common.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/GenericInterface/Operation/ConfigItem/ConfigItemSearch.pm" Permission="644" Encode="Base64"></File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Link/LinkCreate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Okxpbms6OkxpbmtDcmVhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnTGlua0NyZWF0ZS5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJMaW5rQ3JlYXRlOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhTb3VyY2VPYmplY3QgU291cmNlS2V5IFRhcmdldE9iamVjdCBUYXJnZXRLZXkgVHlwZSBTdGF0ZSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17RGF0YX0tPnskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnTGlua0NyZWF0ZS5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiTGlua0NyZWF0ZTogJE5lZWRlZCBwYXJhbWV0ZXIgaXMgbWlzc2luZyEiLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CiAgICAKICAgIG15ICRMaW5rT2JqZWN0ID0gICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMaW5rT2JqZWN0Jyk7CgogICAgIyBjaGVjayBpZiBzb3VyY2UgYW5kIHRhcmdldCBhcmUgdGhlIHNhbWUgb2JqZWN0CiAgICBpZiAoICRQYXJhbXtEYXRhfS0+e1NvdXJjZU9iamVjdH0gZXEgJFBhcmFte0RhdGF9LT57VGFyZ2V0T2JqZWN0fSAmJiAkUGFyYW17RGF0YX0tPntTb3VyY2VLZXl9IGVxICRQYXJhbXtEYXRhfS0+e1RhcmdldEtleX0gKSB7CiAgICAgICAgJFN1Y2Nlc3MgPSAwOwogICAgICAgICRFcnJvck1lc3NhZ2UgPSAiSW1wb3NzaWJsZSB0byBsaW5rIG9iamVjdCB3aXRoIGl0c2VsZiEiOwogICAgfQoKICAgIGlmKCAhJEVycm9yTWVzc2FnZSApewogICAgCiAgICAgICAgIyBsb29rdXAgdGhlIG9iamVjdCBpZHMKICAgICAgICBPQkpFQ1Q6CiAgICAgICAgZm9yIG15ICRPYmplY3QgKHF3KFNvdXJjZU9iamVjdCBUYXJnZXRPYmplY3QpKSB7CgogICAgICAgICAgICAjIGxvb2t1cCB0aGUgb2JqZWN0IGlkCiAgICAgICAgICAgICRQYXJhbXsgJE9iamVjdCAuICdJRCcgfSA9ICRMaW5rT2JqZWN0LT5PYmplY3RMb29rdXAoCiAgICAgICAgICAgICAgICBOYW1lID0+ICRQYXJhbXtEYXRhfS0+eyRPYmplY3R9LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgbmV4dCBPQkpFQ1QgaWYgJFBhcmFteyAkT2JqZWN0IC4gJ0lEJyB9OwoKICAgICAgICAgICAgJFN1Y2Nlc3MgPSAwOwogICAgICAgICAgICAkRXJyb3JNZXNzYWdlID0gIkludmFsaWQgJE9iamVjdCBpcyBnaXZlbiEiOwogICAgICAgIH0KICAgIH0KCiAgICBpZiggISRFcnJvck1lc3NhZ2UgKXsKCiAgICAgICAgIyBnZXQgYSBsaXN0IG9mIHBvc3NpYmxlIGxpbmsgdHlwZXMgZm9yIHRoZSB0d28gb2JqZWN0cwogICAgICAgIG15ICVQb3NzaWJsZVR5cGVzTGlzdCA9ICRMaW5rT2JqZWN0LT5Qb3NzaWJsZVR5cGVzTGlzdCgKICAgICAgICAgICAgT2JqZWN0MSA9PiAkUGFyYW17RGF0YX0tPntTb3VyY2VPYmplY3R9LAogICAgICAgICAgICBPYmplY3QyID0+ICRQYXJhbXtEYXRhfS0+e1RhcmdldE9iamVjdH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBjaGVjayBpZiB3YW50ZWQgbGluayB0eXBlIGlzIHBvc3NpYmxlCiAgICAgICAgaWYgKCAhJFBvc3NpYmxlVHlwZXNMaXN0eyAkUGFyYW17RGF0YX0tPntUeXBlfSB9ICkgewogICAgICAgICAgICBteSAkc3RyID0gIiI7CgogICAgICAgICAgICAkU3VjY2VzcyA9IDA7CiAgICAgICAgICAgICRFcnJvck1lc3NhZ2UgPSAiTm90IHBvc3NpYmxlIHRvIGNyZWF0ZSBhICckUGFyYW17RGF0YX0tPntUeXBlfScgbGluayBiZXR3ZWVuICRQYXJhbXtEYXRhfS0+e1NvdXJjZU9iamVjdH0gYW5kICRQYXJhbXtEYXRhfS0+e1RhcmdldE9iamVjdH0hIFBvc3NpYmxlIHZhbHVlcyBhcmU6ICIuam9pbigiLCAiLGtleXMgJVBvc3NpYmxlVHlwZXNMaXN0KTsKICAgICAgICAgICAgJVBvc3NpYmxlVHlwZXNMaXN0OwogICAgICAgIH0KCiAgICB9CgogICAgaWYoICEkRXJyb3JNZXNzYWdlICl7CgogICAgICAgIG15ICRUcnVlID0gJExpbmtPYmplY3QtPkxpbmtBZGQoCiAgICAgICAgICAgIFNvdXJjZU9iamVjdCA9PiAkUGFyYW17RGF0YX0tPntTb3VyY2VPYmplY3R9LAogICAgICAgICAgICBTb3VyY2VLZXkgICAgPT4gJFBhcmFte0RhdGF9LT57U291cmNlS2V5fSwKICAgICAgICAgICAgVGFyZ2V0T2JqZWN0ID0+ICRQYXJhbXtEYXRhfS0+e1RhcmdldE9iamVjdH0sCiAgICAgICAgICAgIFRhcmdldEtleSAgICA9PiAkUGFyYW17RGF0YX0tPntUYXJnZXRLZXl9LAogICAgICAgICAgICBUeXBlICAgICAgICAgPT4gJFBhcmFte0RhdGF9LT57VHlwZX0sCiAgICAgICAgICAgIFN0YXRlICAgICAgICA9PiAkUGFyYW17RGF0YX0tPntTdGF0ZX0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgICA9PiAkVXNlcklELAogICAgICAgICk7CgoKICAgICAgICBpZighJFRydWUpewogICAgICAgICAgICAkU3VjY2VzcyA9IDA7CiAgICAgICAgICAgICRFcnJvck1lc3NhZ2UgPSAiU29tZXRoaW5nIHdlbnQgd3JvbmcuIE1heWJlIFN0YXRlIGlzIG5vdCB2YWxpZCIKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJFN1Y2Nlc3MgPSAxOwogICAgICAgICAgICAkUmVzcG9uc2V7UmVzdWx0fSA9IDE7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Link/LinkList.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Okxpbms6OkxpbmtMaXN0OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIE1JTUU6OkJhc2U2NDsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFyaWFibGVDaGVjayBxdyhJc0FycmF5UmVmV2l0aERhdGEgSXNIYXNoUmVmV2l0aERhdGEgSXNTdHJpbmdXaXRoRGF0YSk7Cgp1c2UgYmFzZSBxdygKICAgIEtlcm5lbDo6R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpDb21tb24KICAgIEtlcm5lbDo6R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpUaWNrZXQ6OkNvbW1vbgopOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uOjpUaWNrZXQ6OlRpY2tldEdldCAtIEdlbmVyaWNJbnRlcmZhY2UgVGlja2V0IEdldCBPcGVyYXRpb24gYmFja2VuZAoKPWhlYWQxIFNZTk9QU0lTCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCnVzdWFsbHksIHlvdSB3YW50IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzCmJ5IHVzaW5nIEtlcm5lbDo6R2VuZXJpY0ludGVyZmFjZTo6T3BlcmF0aW9uLT5uZXcoKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciBteSAkTmVlZGVkIChxdyhEZWJ1Z2dlck9iamVjdCBXZWJzZXJ2aWNlSUQpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgU3VjY2VzcyAgICAgID0+IDAsCiAgICAgICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkdvdCBubyAkTmVlZGVkISIsCiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICAkU2VsZi0+eyROZWVkZWR9ID0gJFBhcmFteyROZWVkZWR9OwogICAgfQoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gUnVuKCkKCnBlcmZvcm0gVGlja2V0R2V0IE9wZXJhdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBhYmxlIHRvIHJldHVybgpvbmUgb3IgbW9yZSB0aWNrZXQgZW50cmllcyBpbiBvbmUgY2FsbC4KCj1jdXQKCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkUmVzdWx0ID0gJFNlbGYtPkluaXQoCiAgICAgICAgV2Vic2VydmljZUlEID0+ICRTZWxmLT57V2Vic2VydmljZUlEfSwKICAgICk7CgogICAgaWYgKCAhJFJlc3VsdC0+e1N1Y2Nlc3N9ICkgewogICAgICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnV2Vic2VydmljZS5JbnZhbGlkQ29uZmlndXJhdGlvbicsCiAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAkUmVzdWx0LT57RXJyb3JNZXNzYWdlfSwKICAgICAgICApOwogICAgfQoKICAgIGlmKCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pewogICAgICAgIG15ICREZWNvZGVkID0gZGVjb2RlX2Jhc2U2NCgkUGFyYW17RGF0YX0tPntCYXNpY0F1dGh9KTsKCiAgICAgICAgbXkgQEF1dGg9c3BsaXQoLzovLCREZWNvZGVkKTsKCiAgICAgICAgJFBhcmFte0RhdGF9LT57VXNlckxvZ2lufSAgID0gJEF1dGhbMF07CiAgICAgICAgJFBhcmFte0RhdGF9LT57UGFzc3dvcmR9ICAgID0gJEF1dGhbMV07CiAgICB9CgogICAgbXkgKCAkVXNlcklELCAkVXNlclR5cGUgKSA9ICRTZWxmLT5BdXRoKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0xpbmtMaXN0LkF1dGhGYWlsJywKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkxpbmtMaXN0OiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhPYmplY3QgS2V5IFN0YXRlKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyROZWVkZWR9ICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdMaW5rTGlzdC5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiTGlua0xpc3Q6ICROZWVkZWQgcGFyYW1ldGVyIGlzIG1pc3NpbmchIiwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CgogICAgbXkgJExpbmtMaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3QnKS0+TGlua0xpc3QoCiAgICAgICAgT2JqZWN0ICAgICAgPT4gJFBhcmFte0RhdGF9LT57T2JqZWN0fSwKICAgICAgICBLZXkgICAgICAgICA9PiAkUGFyYW17RGF0YX0tPntLZXl9LAogICAgICAgIE9iamVjdDIgICAgID0+ICRQYXJhbXtEYXRhfS0+e09iamVjdDJ9IHx8ICIiLAogICAgICAgIFR5cGUgICAgICAgID0+ICRQYXJhbXtEYXRhfS0+e1R5cGV9IHx8ICIiLAogICAgICAgIFN0YXRlICAgICAgID0+ICRQYXJhbXtEYXRhfS0+e1N0YXRlfSwKICAgICAgICBEaXJlY3Rpb24gICA9PiAkUGFyYW17RGF0YX0tPntEaXJlY3Rpb259IHx8ICIiLCAgIAogICAgICAgIFVzZXJJRCAgICAgID0+ICRVc2VySUQgICAgIAogICAgKTsKICAgIAogICAgZm9yIG15ICRPYmplY3QgKCBzb3J0IGtleXMgJXskTGlua0xpc3R9ICkgewogICAgICAgICBmb3IgbXkgJFR5cGUgKCBzb3J0IGtleXMgJXskTGlua0xpc3QtPnskT2JqZWN0fX0gKSB7CiAgICAgICAgICAgIGZvciBteSAkRGlyZWN0aW9uICggc29ydCBrZXlzICV7JExpbmtMaXN0LT57JE9iamVjdH0tPnskVHlwZX19ICkgewogICAgICAgICAgICAgICAgICAgIG15IEBrZXlzICA9IGtleXMgJXskTGlua0xpc3QtPnskT2JqZWN0fS0+eyRUeXBlfS0+eyREaXJlY3Rpb259fTsKICAgICAgICAgICAgICAgICAgICAkTGlua0xpc3QtPnskT2JqZWN0fS0+eyRUeXBlfS0+eyREaXJlY3Rpb259ID0gXEBrZXlzOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIG15ICVSZXNwb25zZTsKICAgIG15ICRTdWNjZXNzOwoKICAgICRTdWNjZXNzID0gMTsKICAgICRSZXNwb25zZXtSZXN1bHR9ID0gJExpbmtMaXN0OwoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICIiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEluIGNhc2Ugb2YgYW4gZXJyb3IKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVSZXNwb25zZSwKICAgIH07Cgp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Link/LinkDelete.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246Okxpbms6OkxpbmtEZWxldGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnTGlua0RlbGV0ZS5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJMaW5rRGVsZXRlOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhPYmplY3QxIEtleTEgT2JqZWN0MiBLZXkyIFR5cGUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFte0RhdGF9LT57JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0xpbmtEZWxldGUuTWlzc2luZ1BhcmFtZXRlcicsCiAgICAgICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkxpbmtEZWxldGU6ICROZWVkZWQgcGFyYW1ldGVyIGlzIG1pc3NpbmchIiwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIG15ICVSZXNwb25zZTsKICAgIG15ICRFcnJvck1lc3NhZ2U7CiAgICBteSAkU3VjY2VzczsKICAgIAogICAgbXkgJExpbmtPYmplY3QgPSAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3QnKTsKCiAgICAKICAgICMgbG9va3VwIHRoZSBvYmplY3QgaWRzCiAgICBPQkpFQ1Q6CiAgICBmb3IgbXkgJE9iamVjdCAocXcoT2JqZWN0MSBPYmplY3QyKSkgewoKICAgICAgICAjIGxvb2t1cCB0aGUgb2JqZWN0IGlkCiAgICAgICAgJFBhcmFteyAkT2JqZWN0IC4gJ0lEJyB9ID0gJExpbmtPYmplY3QtPk9iamVjdExvb2t1cCgKICAgICAgICAgICAgTmFtZSA9PiAkUGFyYW17RGF0YX0tPnskT2JqZWN0fSwKICAgICAgICApOwoKICAgICAgICBuZXh0IE9CSkVDVCBpZiAkUGFyYW17ICRPYmplY3QgLiAnSUQnIH07CgogICAgICAgICRTdWNjZXNzID0gMDsKICAgICAgICAkRXJyb3JNZXNzYWdlID0gIkludmFsaWQgJE9iamVjdCBpcyBnaXZlbiEiOwogICAgfQogICAKCiAgICBpZiggISRFcnJvck1lc3NhZ2UgKXsKCiAgICAgICAgIyBnZXQgYSBsaXN0IG9mIHBvc3NpYmxlIGxpbmsgdHlwZXMgZm9yIHRoZSB0d28gb2JqZWN0cwogICAgICAgIG15ICVQb3NzaWJsZVR5cGVzTGlzdCA9ICRMaW5rT2JqZWN0LT5Qb3NzaWJsZVR5cGVzTGlzdCgKICAgICAgICAgICAgT2JqZWN0MSA9PiAkUGFyYW17RGF0YX0tPntPYmplY3QxfSwKICAgICAgICAgICAgT2JqZWN0MiA9PiAkUGFyYW17RGF0YX0tPntPYmplY3QyfSwKICAgICAgICApOwoKICAgICAgICAjIGNoZWNrIGlmIHdhbnRlZCBsaW5rIHR5cGUgaXMgcG9zc2libGUKICAgICAgICBpZiAoICEkUG9zc2libGVUeXBlc0xpc3R7ICRQYXJhbXtEYXRhfS0+e1R5cGV9IH0gKSB7CiAgICAgICAgICAgIG15ICRzdHIgPSAiIjsKCiAgICAgICAgICAgICRTdWNjZXNzID0gMDsKICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJOb3QgcG9zc2libGUgdG8gdXNlIHRoZSB0eXBlICckUGFyYW17RGF0YX0tPntUeXBlfSchIFBvc3NpYmxlIHZhbHVlcyBhcmU6ICIuam9pbigiLCAiLGtleXMgJVBvc3NpYmxlVHlwZXNMaXN0KTsKICAgICAgICAgICAgJVBvc3NpYmxlVHlwZXNMaXN0OwogICAgICAgIH0KCiAgICB9CgogICAgaWYoICEkRXJyb3JNZXNzYWdlICl7CgogICAgICAgIG15ICRUcnVlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxpbmtPYmplY3QnKS0+TGlua0RlbGV0ZSgKICAgICAgICAgICAgT2JqZWN0MSA9PiAkUGFyYW17RGF0YX0tPntPYmplY3QxfSwKICAgICAgICAgICAgS2V5MSAgICA9PiAkUGFyYW17RGF0YX0tPntLZXkxfSwKICAgICAgICAgICAgT2JqZWN0MiA9PiAkUGFyYW17RGF0YX0tPntPYmplY3QyfSwKICAgICAgICAgICAgS2V5MiAgICA9PiAkUGFyYW17RGF0YX0tPntLZXkyfSwKICAgICAgICAgICAgVHlwZSAgICA9PiAkUGFyYW17RGF0YX0tPntUeXBlfSwKICAgICAgICAgICAgVXNlcklEICA9PiAkVXNlcklELAogICAgICAgICk7CgogICAgICAgIGlmKCEkVHJ1ZSl7CiAgICAgICAgICAgICRTdWNjZXNzID0gMDsKICAgICAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJTb21ldGhpbmcgd2VudCB3cm9uZyIKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJFN1Y2Nlc3MgPSAxOwogICAgICAgICAgICAkUmVzcG9uc2V7UmVzdWx0fSA9IDE7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Service/ServiceCreate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlNlcnZpY2U6OlNlcnZpY2VDcmVhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KICAgIAogICAgbXkgKCAkVXNlcklELCAkVXNlclR5cGUgKSA9ICRTZWxmLT5BdXRoKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1NlcnZpY2VDcmVhdGUuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiU2VydmljZUNyZWF0ZTogQXV0aG9yaXphdGlvbiBmYWlsaW5nISIsCiAgICApIGlmICEkVXNlcklEOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoTmFtZSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17RGF0YX0tPnskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnU2VydmljZUNyZWF0ZS5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiU2VydmljZUNyZWF0ZTogJE5lZWRlZCBwYXJhbWV0ZXIgaXMgbWlzc2luZyEiLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KICAgIAogICAgbXkgJFNlcnZpY2VJRCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpTZXJ2aWNlJyktPlNlcnZpY2VBZGQoCiAgICAgICAgTmFtZSAgICAgPT4gJFBhcmFte0RhdGF9LT57TmFtZX0sCiAgICAgICAgUGFyZW50SUQgPT4gJFBhcmFte0RhdGF9LT57UGFyZW50SUR9IHx8ICIiLCAgICAgICAgICAgIyAob3B0aW9uYWwpCiAgICAgICAgQ29tbWVudCAgPT4gJFBhcmFte0RhdGF9LT57Q29tbWVudH0gfHwgIiIsICAgICMgKG9wdGlvbmFsKQogICAgICAgIFZhbGlkSUQgID0+IDEsCiAgICAgICAgVXNlcklEICAgPT4gJFVzZXJJRCwKICAgICAgICBUeXBlSUQgICAgICA9PiAkUGFyYW17RGF0YX0tPntUeXBlSUR9IHx8IDIsCiAgICAgICAgQ3JpdGljYWxpdHkgPT4gJFBhcmFte0RhdGF9LT57Q3JpdGljYWxpdHl9IHx8JzMgbm9ybWFsJywKICAgICk7CgogICAgbXkgJVJlc3BvbnNlOwogICAgbXkgJEVycm9yTWVzc2FnZTsKICAgIG15ICRTdWNjZXNzOwoKICAgIGlmKCEkU2VydmljZUlEKXsKICAgICAgICAkU3VjY2VzcyA9IDA7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJBIHNlcnZpY2Ugd2l0aCB0aGUgbmFtZSAiLiRQYXJhbXtEYXRhfS0+e05hbWV9LiIgYWxyZWFkeSBleGlzdHMiCiAgICB9ZWxzZXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJFJlc3BvbnNle1NlcnZpY2VJRH0gPSAkU2VydmljZUlEOwogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Service/ServiceGet.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlNlcnZpY2U6OlNlcnZpY2VHZXQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KICAgIAogICAgbXkgKCAkVXNlcklELCAkVXNlclR5cGUgKSA9ICRTZWxmLT5BdXRoKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1NlcnZpY2VHZXQuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiU2VydmljZUdldDogQXV0aG9yaXphdGlvbiBmYWlsaW5nISIsCiAgICApIGlmICEkVXNlcklEOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17RGF0YX0tPntTZXJ2aWNlSUR9ICYmICEkUGFyYW17RGF0YX0tPntOYW1lfSkgewogICAgICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnU2VydmljZUdldC5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJTZXJ2aWNlR2V0OiBOYW1lIG9yIFNlcnZpZUlEIHBhcmFtZXRlciBpcyBtaXNzaW5nISIsCiAgICAgICAgKTsKICAgIH0KICAgCiAgICBteSAlU2VydmljZURhdGEgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2VydmljZScpLT5TZXJ2aWNlR2V0KAogICAgICAgIFNlcnZpY2VJRCAgID0+ICRQYXJhbXtEYXRhfS0+e1NlcnZpY2VJRH0gfHwgIiIsCiAgICAgICAgTmFtZSAgICAgICAgPT4gJFBhcmFte0RhdGF9LT57TmFtZX0gfHwgIiIsCiAgICAgICAgVXNlcklEICAgICAgPT4gJFVzZXJJRAogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgaWYoISVTZXJ2aWNlRGF0YSl7CiAgICAgICAgJFN1Y2Nlc3MgPSAxOwogICAgICAgIGlmKCRQYXJhbXtEYXRhfS0+e1NlcnZpY2VJRH0pewogICAgICAgICAgICAkUmVzcG9uc2V7bWVzc2FnZX0gPSAiQSBzZXJ2aWNlIHdpdGggdGhlIElEICIuJFBhcmFte0RhdGF9LT57U2VydmljZUlEfS4iIGRvZXNudCBleGlzdHMiCiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICRSZXNwb25zZXttZXNzYWdlfSA9ICJBIHNlcnZpY2Ugd2l0aCB0aGUgbmFtZSAiLiRQYXJhbXtEYXRhfS0+e05hbWV9LiIgZG9lc250IGV4aXN0cyIKICAgICAgICB9CiAgICB9ZWxzZXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJVJlc3BvbnNlID0gJVNlcnZpY2VEYXRhOwogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Service/ServiceUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlNlcnZpY2U6OlNlcnZpY2VVcGRhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnU2VydmljZVVwZGF0ZS5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJTZXJ2aWNlVXBkYXRlOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhTZXJ2aWNlSUQgTmFtZSBWYWxpZElEIFR5cGVJRCBDcml0aWNhbGl0eSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17RGF0YX0tPnskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnU2VydmljZVVwZGF0ZS5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiU2VydmljZVVwZGF0ZTogJE5lZWRlZCBwYXJhbWV0ZXIgaXMgbWlzc2luZyEiLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KICAgIAogICAgbXkgJFRydWUgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6U2VydmljZScpLT5TZXJ2aWNlVXBkYXRlKAogICAgICAgIFNlcnZpY2VJRCAgID0+ICRQYXJhbXtEYXRhfS0+e1NlcnZpY2VJRH0sCiAgICAgICAgTmFtZSAgICAgICAgPT4gJFBhcmFte0RhdGF9LT57TmFtZX0sCiAgICAgICAgUGFyZW50SUQgICAgPT4gJFBhcmFte0RhdGF9LT57UGFyZW50SUR9IHx8ICIiLCAgICMgKG9wdGlvbmFsKQogICAgICAgIENvbW1lbnQgICAgID0+ICRQYXJhbXtEYXRhfS0+e0NvbW1lbnR9IHx8ICIiLCAgICAjIChvcHRpb25hbCkKICAgICAgICBWYWxpZElEICAgICA9PiAkUGFyYW17RGF0YX0tPntWYWxpZElEfSwKICAgICAgICBVc2VySUQgICAgICA9PiAkVXNlcklELAogICAgICAgIFR5cGVJRCAgICAgID0+ICRQYXJhbXtEYXRhfS0+e1R5cGVJRH0sCiAgICAgICAgQ3JpdGljYWxpdHkgPT4gJFBhcmFte0RhdGF9LT57Q3JpdGljYWxpdHl9LAogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgaWYoISRUcnVlKXsKICAgICAgICAkU3VjY2VzcyA9IDA7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJVcGRhdGUgb2YgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgaWQgIi4kUGFyYW17RGF0YX0tPntTZXJ2aWNlSUR9LiIgd2FzIG5vdCBzdWNjZXNzZnVsbHkuIE1heWJlIHNlcnZpY2UgaXMgbm90IGV4aXN0IgogICAgfWVsc2V7CiAgICAgICAgJFN1Y2Nlc3MgPSAxOwogICAgICAgICRSZXNwb25zZXtSZXN1bHR9ID0gMTsKICAgIH0KCiAgICByZXR1cm4gJFJlc3VsdCA9IHsKICAgICAgICBTdWNjZXNzICAgICAgPT4gJFN1Y2Nlc3MsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDAgb3IgMQogICAgICAgIEVycm9yTWVzc2FnZSA9PiAkRXJyb3JNZXNzYWdlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEluIGNhc2Ugb2YgYW4gZXJyb3IKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVSZXNwb25zZSwKICAgIH07Cgp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Service/ServiceSearch.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlNlcnZpY2U6OlNlcnZpY2VTZWFyY2g7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnU2VydmljZVNlYXJjaC5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJTZXJ2aWNlU2VhcmNoOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgbXkgQFNlcnZpY2VMaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlNlcnZpY2UnKS0+U2VydmljZVNlYXJjaCgKICAgICAgICBTZXJ2aWNlSUQgICA9PiAkUGFyYW17RGF0YX0tPntTZXJ2aWNlSUR9IHx8ICIiLAogICAgICAgIE5hbWUgICAgICAgID0+ICRQYXJhbXtEYXRhfS0+e05hbWV9IHx8ICIiLAogICAgICAgIFVzZXJJRCAgICAgID0+ICRVc2VySUQsCiAgICAgICAgVHlwZUlEcyAgICAgPT4gJFBhcmFte0RhdGF9LT57VHlwZUlEc30gfHwgW10sCiAgICAgICAgQ3JpdGljYWxpdGllcyA9PiAkUGFyYW17RGF0YX0tPntDcml0aWNhbGl0aWVzfSB8fCBbXQogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkU3VjY2VzczsKCgogICAgJFN1Y2Nlc3MgPSAxOwogICAgJFJlc3BvbnNle1Jlc3VsdH0gPSBcQFNlcnZpY2VMaXN0OwoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICIiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEluIGNhc2Ugb2YgYW4gZXJyb3IKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVSZXNwb25zZSwKICAgIH07Cgp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Customer/CustomerCreate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkN1c3RvbWVyOjpDdXN0b21lckNyZWF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBNSU1FOjpCYXNlNjQ7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoSXNBcnJheVJlZldpdGhEYXRhIElzSGFzaFJlZldpdGhEYXRhIElzU3RyaW5nV2l0aERhdGEpOwoKdXNlIGJhc2UgcXcoCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29tbW9uCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpDb21tb24KKTsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpUaWNrZXRHZXQgLSBHZW5lcmljSW50ZXJmYWNlIFRpY2tldCBHZXQgT3BlcmF0aW9uIGJhY2tlbmQKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbi0+bmV3KCk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoRGVidWdnZXJPYmplY3QgV2Vic2VydmljZUlEKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFN1Y2Nlc3MgICAgICA9PiAwLAogICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJHb3Qgbm8gJE5lZWRlZCEiLAogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgJFNlbGYtPnskTmVlZGVkfSA9ICRQYXJhbXskTmVlZGVkfTsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpwZXJmb3JtIFRpY2tldEdldCBPcGVyYXRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYWJsZSB0byByZXR1cm4Kb25lIG9yIG1vcmUgdGlja2V0IGVudHJpZXMgaW4gb25lIGNhbGwuCgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFJlc3VsdCA9ICRTZWxmLT5Jbml0KAogICAgICAgIFdlYnNlcnZpY2VJRCA9PiAkU2VsZi0+e1dlYnNlcnZpY2VJRH0sCiAgICApOwoKICAgIGlmICggISRSZXN1bHQtPntTdWNjZXNzfSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1dlYnNlcnZpY2UuSW52YWxpZENvbmZpZ3VyYXRpb24nLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJFJlc3VsdC0+e0Vycm9yTWVzc2FnZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICBpZigkUGFyYW17RGF0YX0tPntCYXNpY0F1dGh9KXsKICAgICAgICBteSAkRGVjb2RlZCA9IGRlY29kZV9iYXNlNjQoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSk7CgogICAgICAgIG15IEBBdXRoPXNwbGl0KC86LywkRGVjb2RlZCk7CgogICAgICAgICRQYXJhbXtEYXRhfS0+e1VzZXJMb2dpbn0gICA9ICRBdXRoWzBdOwogICAgICAgICRQYXJhbXtEYXRhfS0+e1Bhc3N3b3JkfSAgICA9ICRBdXRoWzFdOwogICAgfQogICAgCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ3VzdG9tZXJDcmVhdGUuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ3VzdG9tZXJDcmVhdGU6IEF1dGhvcml6YXRpb24gZmFpbGluZyEiLAogICAgKSBpZiAhJFVzZXJJRDsKCiAgICBteSAlUmVxdWlyZWQ7CiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICROZWVkZWQgKHF3KEVtYWlsIEZpcnN0bmFtZSBMYXN0bmFtZSBDdXN0b21lcklEIExvZ2luKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyROZWVkZWR9ICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdDdXN0b21lckNyZWF0ZS5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ3VzdG9tZXJDcmVhdGU6ICROZWVkZWQgcGFyYW1ldGVyIGlzIG1pc3NpbmchIiwKICAgICAgICAgICAgKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJFJlcXVpcmVkeyJVc2VyIi4kTmVlZGVkfSA9ICRQYXJhbXtEYXRhfS0+eyROZWVkZWR9OwogICAgICAgIH0KICAgIH0KICAgIAogICAgbXkgJU9wdGlvbmFsczsKICAgICMgZ2V0IG9wdGlvbmFsIHN0dWZmCiAgICBmb3IgbXkgJE9wdGlvbmFsIChxdyggUGFzc3dvcmQpKSB7CiAgICAgICAgaWYgKCAkUGFyYW17RGF0YX0tPnskT3B0aW9uYWx9ICkgewogICAgICAgICAgICAkT3B0aW9uYWxzeyJVc2VyIi4kT3B0aW9uYWx9ID0gJFBhcmFte0RhdGF9LT57JE9wdGlvbmFsfTsKICAgICAgICB9CiAgICB9CgogICAgbXkgJFVzZXJMb2dpbiA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInKS0+Q3VzdG9tZXJVc2VyQWRkKAogICAgICAgIFNvdXJjZSAgICAgICAgID0+ICdDdXN0b21lclVzZXInLCAjIEN1c3RvbWVyVXNlciBzb3VyY2UgY29uZmlnCiAgICAgICAgJVJlcXVpcmVkLAogICAgICAgICVPcHRpb25hbHMsCiAgICAgICAgVmFsaWRJRCAgPT4gMSwKICAgICAgICBVc2VySUQgICA9PiAkVXNlcklECiAgICApOwoKICAgIG15ICVSZXNwb25zZTsKICAgIG15ICRFcnJvck1lc3NhZ2U7CiAgICBteSAkU3VjY2VzczsKCiAgICBpZighJFVzZXJMb2dpbil7CiAgICAgICAgJFN1Y2Nlc3MgPSAwOwogICAgICAgICRFcnJvck1lc3NhZ2UgPSAiQSBjdXN0b21lciB3aXRoIHRoZSBlbWFpbCAiLiRQYXJhbXtEYXRhfS0+e0VtYWlsfS4iIG9yIGxvZ2luIG5hbWUgIi4kUGFyYW17RGF0YX0tPntMb2dpbn0uIiBhbHJlYWR5IGV4aXN0cyIKICAgIH1lbHNlewogICAgICAgICRTdWNjZXNzID0gMTsKICAgICAgICAkUmVzcG9uc2V7VXNlckxvZ2lufSA9ICRVc2VyTG9naW47CiAgICB9CgogICAgcmV0dXJuICRSZXN1bHQgPSB7CiAgICAgICAgU3VjY2VzcyAgICAgID0+ICRTdWNjZXNzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwIG9yIDEKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJEVycm9yTWVzc2FnZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbiBjYXNlIG9mIGFuIGVycm9yCiAgICAgICAgRGF0YSAgICAgICAgID0+IFwlUmVzcG9uc2UsCiAgICB9OwoKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Customer/CustomerGet.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkN1c3RvbWVyOjpDdXN0b21lckdldDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBNSU1FOjpCYXNlNjQ7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoSXNBcnJheVJlZldpdGhEYXRhIElzSGFzaFJlZldpdGhEYXRhIElzU3RyaW5nV2l0aERhdGEpOwoKdXNlIGJhc2UgcXcoCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29tbW9uCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpDb21tb24KKTsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpUaWNrZXRHZXQgLSBHZW5lcmljSW50ZXJmYWNlIFRpY2tldCBHZXQgT3BlcmF0aW9uIGJhY2tlbmQKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbi0+bmV3KCk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoRGVidWdnZXJPYmplY3QgV2Vic2VydmljZUlEKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFN1Y2Nlc3MgICAgICA9PiAwLAogICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJHb3Qgbm8gJE5lZWRlZCEiLAogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgJFNlbGYtPnskTmVlZGVkfSA9ICRQYXJhbXskTmVlZGVkfTsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpwZXJmb3JtIFRpY2tldEdldCBPcGVyYXRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYWJsZSB0byByZXR1cm4Kb25lIG9yIG1vcmUgdGlja2V0IGVudHJpZXMgaW4gb25lIGNhbGwuCgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFJlc3VsdCA9ICRTZWxmLT5Jbml0KAogICAgICAgIFdlYnNlcnZpY2VJRCA9PiAkU2VsZi0+e1dlYnNlcnZpY2VJRH0sCiAgICApOwoKICAgIGlmICggISRSZXN1bHQtPntTdWNjZXNzfSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1dlYnNlcnZpY2UuSW52YWxpZENvbmZpZ3VyYXRpb24nLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJFJlc3VsdC0+e0Vycm9yTWVzc2FnZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICBpZigkUGFyYW17RGF0YX0tPntCYXNpY0F1dGh9KXsKICAgICAgICBteSAkRGVjb2RlZCA9IGRlY29kZV9iYXNlNjQoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSk7CgogICAgICAgIG15IEBBdXRoPXNwbGl0KC86LywkRGVjb2RlZCk7CgogICAgICAgICRQYXJhbXtEYXRhfS0+e1VzZXJMb2dpbn0gICA9ICRBdXRoWzBdOwogICAgICAgICRQYXJhbXtEYXRhfS0+e1Bhc3N3b3JkfSAgICA9ICRBdXRoWzFdOwogICAgfQogICAgCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ3VzdG9tZXJHZXQuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ3VzdG9tZXJHZXQ6IEF1dGhvcml6YXRpb24gZmFpbGluZyEiLAogICAgKSBpZiAhJFVzZXJJRDsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0RhdGF9LT57VXNlcn0pIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0N1c3RvbWVyR2V0Lk1pc3NpbmdQYXJhbWV0ZXInLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkN1c3RvbWVyR2V0OiBVc2VyIHBhcmFtZXRlciBpcyBtaXNzaW5nISIsCiAgICAgICAgKTsKICAgIH0KICAgCiAgICBteSAlQ3VzdG9tZXJEYXRhID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpLT5DdXN0b21lclVzZXJEYXRhR2V0KAogICAgICAgIFVzZXIgICAgICA9PiAkUGFyYW17RGF0YX0tPntVc2VyfQogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgaWYoISVDdXN0b21lckRhdGEpewogICAgICAgICRTdWNjZXNzID0gMTsKICAgICAgICAgICAgJFJlc3BvbnNle21lc3NhZ2V9ID0gIkFuIHVzZXIgICIuJFBhcmFte0RhdGF9LT57VXNlcn0uIiBkb2VzbnQgZXhpc3RzIgogICAgfWVsc2V7CiAgICAgICAgJFN1Y2Nlc3MgPSAxOwogICAgICAgICVSZXNwb25zZSA9ICVDdXN0b21lckRhdGE7CiAgICB9CgogICAgcmV0dXJuICRSZXN1bHQgPSB7CiAgICAgICAgU3VjY2VzcyAgICAgID0+ICRTdWNjZXNzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwIG9yIDEKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJEVycm9yTWVzc2FnZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbiBjYXNlIG9mIGFuIGVycm9yCiAgICAgICAgRGF0YSAgICAgICAgID0+IFwlUmVzcG9uc2UsCiAgICB9OwoKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Customer/CustomerUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkN1c3RvbWVyOjpDdXN0b21lclVwZGF0ZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBNSU1FOjpCYXNlNjQ7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoSXNBcnJheVJlZldpdGhEYXRhIElzSGFzaFJlZldpdGhEYXRhIElzU3RyaW5nV2l0aERhdGEpOwoKdXNlIGJhc2UgcXcoCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29tbW9uCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpDb21tb24KKTsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpUaWNrZXRHZXQgLSBHZW5lcmljSW50ZXJmYWNlIFRpY2tldCBHZXQgT3BlcmF0aW9uIGJhY2tlbmQKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbi0+bmV3KCk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoRGVidWdnZXJPYmplY3QgV2Vic2VydmljZUlEKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFN1Y2Nlc3MgICAgICA9PiAwLAogICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJHb3Qgbm8gJE5lZWRlZCEiLAogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgJFNlbGYtPnskTmVlZGVkfSA9ICRQYXJhbXskTmVlZGVkfTsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpwZXJmb3JtIFRpY2tldEdldCBPcGVyYXRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYWJsZSB0byByZXR1cm4Kb25lIG9yIG1vcmUgdGlja2V0IGVudHJpZXMgaW4gb25lIGNhbGwuCgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFJlc3VsdCA9ICRTZWxmLT5Jbml0KAogICAgICAgIFdlYnNlcnZpY2VJRCA9PiAkU2VsZi0+e1dlYnNlcnZpY2VJRH0sCiAgICApOwoKICAgIGlmICggISRSZXN1bHQtPntTdWNjZXNzfSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1dlYnNlcnZpY2UuSW52YWxpZENvbmZpZ3VyYXRpb24nLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJFJlc3VsdC0+e0Vycm9yTWVzc2FnZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICBpZigkUGFyYW17RGF0YX0tPntCYXNpY0F1dGh9KXsKICAgICAgICBteSAkRGVjb2RlZCA9IGRlY29kZV9iYXNlNjQoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSk7CgogICAgICAgIG15IEBBdXRoPXNwbGl0KC86LywkRGVjb2RlZCk7CgogICAgICAgICRQYXJhbXtEYXRhfS0+e1VzZXJMb2dpbn0gICA9ICRBdXRoWzBdOwogICAgICAgICRQYXJhbXtEYXRhfS0+e1Bhc3N3b3JkfSAgICA9ICRBdXRoWzFdOwogICAgfQogICAgCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ3VzdG9tZXJVcGRhdGUuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ3VzdG9tZXJVcGRhdGU6IEF1dGhvcml6YXRpb24gZmFpbGluZyEiLAogICAgKSBpZiAhJFVzZXJJRDsKCiAgICBteSAlUmVxdWlyZWQ7CiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICROZWVkZWQgKHF3KExvZ2luIElEKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyROZWVkZWR9ICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdDdXN0b21lclVwZGF0ZS5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ3VzdG9tZXJVcGRhdGU6ICROZWVkZWQgcGFyYW1ldGVyIGlzIG1pc3NpbmchIiwKICAgICAgICAgICAgKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJFJlcXVpcmVkeyJVc2VyIi4kTmVlZGVkfSA9ICRQYXJhbXtEYXRhfS0+eyROZWVkZWR9OwogICAgICAgIH0KICAgIH0KICAgIAogICAgbXkgJU9wdGlvbmFsczsKCiAgICAjIGdldCBvcHRpb25hbCBzdHVmZgogICAgZm9yIG15ICRPcHRpb25hbCAocXcoIEVtYWlsIEZpcnN0bmFtZSBMYXN0bmFtZSBDdXN0b21lcklEIExvZ2luIFBhc3N3b3JkICkpIHsKICAgICAgICBpZiAoICRQYXJhbXtEYXRhfS0+eyRPcHRpb25hbH0gKSB7CiAgICAgICAgICAgICRPcHRpb25hbHN7IlVzZXIiLiRPcHRpb25hbH0gPSAkUGFyYW17RGF0YX0tPnskT3B0aW9uYWx9OwogICAgICAgIH0KICAgIH0KCiAgICBteSAkVXNlckxvZ2luID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpLT5DdXN0b21lclVzZXJVcGRhdGUoCiAgICAgICAgU291cmNlICAgICAgICAgPT4gJ0N1c3RvbWVyVXNlcicsCiAgICAgICAgSUQgPT4gJFBhcmFte0RhdGF9LT57SUR9LAogICAgICAgICVPcHRpb25hbHMsCiAgICAgICAgJVJlcXVpcmVkLAogICAgICAgIFZhbGlkSUQgID0+IDEsCiAgICAgICAgVXNlcklEICAgPT4gJFVzZXJJRAogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgaWYoISRVc2VyTG9naW4pewogICAgICAgICRTdWNjZXNzID0gMDsKICAgICAgICAkRXJyb3JNZXNzYWdlID0gIlNvbWV0aGluZyB3ZW50IHdyb25nLiBNYXliZSBlbWFpbCBpcyBhbHJlYWR5IGluIHVzZS4iCiAgICB9ZWxzZXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJFJlc3BvbnNle1VzZXJMb2dpbn0gPSAkVXNlckxvZ2luOwogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Customer/CustomerSearch.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkN1c3RvbWVyOjpDdXN0b21lclNlYXJjaDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBNSU1FOjpCYXNlNjQ7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoSXNBcnJheVJlZldpdGhEYXRhIElzSGFzaFJlZldpdGhEYXRhIElzU3RyaW5nV2l0aERhdGEpOwoKdXNlIGJhc2UgcXcoCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6Q29tbW9uCiAgICBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpDb21tb24KKTsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbjo6VGlja2V0OjpUaWNrZXRHZXQgLSBHZW5lcmljSW50ZXJmYWNlIFRpY2tldCBHZXQgT3BlcmF0aW9uIGJhY2tlbmQKCj1oZWFkMSBTWU5PUFNJUwoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OkdlbmVyaWNJbnRlcmZhY2U6Ok9wZXJhdGlvbi0+bmV3KCk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoRGVidWdnZXJPYmplY3QgV2Vic2VydmljZUlEKSkgewogICAgICAgIGlmICggISRQYXJhbXskTmVlZGVkfSApIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFN1Y2Nlc3MgICAgICA9PiAwLAogICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJHb3Qgbm8gJE5lZWRlZCEiLAogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgJFNlbGYtPnskTmVlZGVkfSA9ICRQYXJhbXskTmVlZGVkfTsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIFJ1bigpCgpwZXJmb3JtIFRpY2tldEdldCBPcGVyYXRpb24uIFRoaXMgZnVuY3Rpb24gaXMgYWJsZSB0byByZXR1cm4Kb25lIG9yIG1vcmUgdGlja2V0IGVudHJpZXMgaW4gb25lIGNhbGwuCgo9Y3V0CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFJlc3VsdCA9ICRTZWxmLT5Jbml0KAogICAgICAgIFdlYnNlcnZpY2VJRCA9PiAkU2VsZi0+e1dlYnNlcnZpY2VJRH0sCiAgICApOwoKICAgIGlmICggISRSZXN1bHQtPntTdWNjZXNzfSApIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ1dlYnNlcnZpY2UuSW52YWxpZENvbmZpZ3VyYXRpb24nLAogICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJFJlc3VsdC0+e0Vycm9yTWVzc2FnZX0sCiAgICAgICAgKTsKICAgIH0KCiAgICBpZigkUGFyYW17RGF0YX0tPntCYXNpY0F1dGh9KXsKICAgICAgICBteSAkRGVjb2RlZCA9IGRlY29kZV9iYXNlNjQoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSk7CgogICAgICAgIG15IEBBdXRoPXNwbGl0KC86LywkRGVjb2RlZCk7CgogICAgICAgICRQYXJhbXtEYXRhfS0+e1VzZXJMb2dpbn0gICA9ICRBdXRoWzBdOwogICAgICAgICRQYXJhbXtEYXRhfS0+e1Bhc3N3b3JkfSAgICA9ICRBdXRoWzFdOwogICAgfQoKICAgIG15ICggJFVzZXJJRCwgJFVzZXJUeXBlICkgPSAkU2VsZi0+QXV0aCgKICAgICAgICAlUGFyYW0sCiAgICApOwoKICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgRXJyb3JDb2RlICAgID0+ICdDdXN0b21lclNlYXJjaC5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDdXN0b21lclNlYXJjaDogQXV0aG9yaXphdGlvbiBmYWlsaW5nISIsCiAgICApIGlmICEkVXNlcklEOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17RGF0YX0tPntVc2VyTG9naW59KSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdDdXN0b21lckdldC5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDdXN0b21lckdldDogVXNlciBwYXJhbWV0ZXIgaXMgbWlzc2luZyEiLAogICAgICAgICk7CiAgICB9CgogICAgbXkgJExpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyktPkN1c3RvbWVyU2VhcmNoRGV0YWlsKAogICAgICAjICBVc2VyTG9naW4gPT4gJFBhcmFte0RhdGF9LT57VXNlckxvZ2lufSwgICAgICAgICAgICAgIyBhbHNvICdoYW5zK2h1YmVyJyBwb3NzaWJsZQogICAgICAgIFZhbGlkICA9PiAxLCAgCiAgICAgICAgUmVzdWx0ID0+ICdBUlJBWScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIChvcHRpb25hbCkgZGVmYXVsdCAxCiAgICAgICAgTGltaXQgID0+ICRQYXJhbXtEYXRhfS0+e0xpbWl0fSB8fCAxMDAsICAgICAgIyAob3B0aW9uYWwpIG92ZXJyaWRlcyBsaW1pdCBvZiB0aGUgY29uZmlnCiAgICApOwoKICAgIG15ICVSZXNwb25zZTsKICAgIG15ICRTdWNjZXNzOwoKICAgICRTdWNjZXNzID0gMTsKICAgICRSZXNwb25zZXtSZXN1bHR9ID0gJExpc3Q7CgogICAgcmV0dXJuICRSZXN1bHQgPSB7CiAgICAgICAgU3VjY2VzcyAgICAgID0+ICRTdWNjZXNzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwIG9yIDEKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIiIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Company/CompanyCreate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbXBhbnk6OkNvbXBhbnlDcmVhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KICAgIAogICAgbXkgKCAkVXNlcklELCAkVXNlclR5cGUgKSA9ICRTZWxmLT5BdXRoKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0NvbXBhbnlDcmVhdGUuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ29tcGFueUNyZWF0ZTogQXV0aG9yaXphdGlvbiBmYWlsaW5nISIsCiAgICApIGlmICEkVXNlcklEOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoQ3VzdG9tZXJJRCBOYW1lKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyROZWVkZWR9ICkgewogICAgICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdDb21wYW55Q3JlYXRlLk1pc3NpbmdQYXJhbWV0ZXInLAogICAgICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDb21wYW55Q3JlYXRlOiAkTmVlZGVkIHBhcmFtZXRlciBpcyBtaXNzaW5nISIsCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBteSAkQ3VzdG9tZXJJRCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnknKS0+Q3VzdG9tZXJDb21wYW55QWRkKAogICAgICAgIEN1c3RvbWVySUQgICAgICAgICAgICAgID0+ICRQYXJhbXtEYXRhfS0+e0N1c3RvbWVySUR9LAogICAgICAgIEN1c3RvbWVyQ29tcGFueU5hbWUgICAgID0+ICRQYXJhbXtEYXRhfS0+e05hbWV9LAogICAgICAgIEN1c3RvbWVyQ29tcGFueVN0cmVldCAgID0+ICRQYXJhbXtEYXRhfS0+e1N0cmVldH0gfHwgIiIsCiAgICAgICAgQ3VzdG9tZXJDb21wYW55WklQICAgICAgPT4gJFBhcmFte0RhdGF9LT57WklQfSB8fCAiIiwKICAgICAgICBDdXN0b21lckNvbXBhbnlDaXR5ICAgICA9PiAkUGFyYW17RGF0YX0tPntDaXR5fSB8fCAiIiwKICAgICAgICBDdXN0b21lckNvbXBhbnlDb3VudHJ5ICA9PiAkUGFyYW17RGF0YX0tPntDb3VudHJ5fSB8fCAiIiwKICAgICAgICBDdXN0b21lckNvbXBhbnlVUkwgICAgICA9PiAkUGFyYW17RGF0YX0tPntVUkx9IHx8ICIiLAogICAgICAgIEN1c3RvbWVyQ29tcGFueUNvbW1lbnQgID0+ICRQYXJhbXtEYXRhfS0+e0NvbW1lbnR9IHx8ICIiLAogICAgICAgIFZhbGlkSUQgICAgICAgICAgICAgICAgID0+IDEsCiAgICAgICAgVXNlcklEICAgICAgICAgICAgICAgICAgPT4gJFVzZXJJRCwgICAgICAgIAogICAgKTsKCiAgICBteSAlUmVzcG9uc2U7CiAgICBteSAkRXJyb3JNZXNzYWdlOwogICAgbXkgJFN1Y2Nlc3M7CgogICAgaWYoISRDdXN0b21lcklEKXsKICAgICAgICAkU3VjY2VzcyA9IDA7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJBIGN1c3RvbWVyIGNvbXBhbnkgd2l0aCB0aGUgbmFtZSAiLiRQYXJhbXtEYXRhfS0+e05hbWV9LiIgYWxyZWFkeSBleGlzdHMiCiAgICB9ZWxzZXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJFJlc3BvbnNle0N1c3RvbWVySUR9ID0gJEN1c3RvbWVySUQ7CiAgICB9CgogICAgcmV0dXJuICRSZXN1bHQgPSB7CiAgICAgICAgU3VjY2VzcyAgICAgID0+ICRTdWNjZXNzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwIG9yIDEKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJEVycm9yTWVzc2FnZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBJbiBjYXNlIG9mIGFuIGVycm9yCiAgICAgICAgRGF0YSAgICAgICAgID0+IFwlUmVzcG9uc2UsCiAgICB9OwoKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Company/CompanyGet.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbXBhbnk6OkNvbXBhbnlHZXQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KICAgIAogICAgbXkgKCAkVXNlcklELCAkVXNlclR5cGUgKSA9ICRTZWxmLT5BdXRoKAogICAgICAgICVQYXJhbSwKICAgICk7CgogICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0NvbXBhbnlHZXQuQXV0aEZhaWwnLAogICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ29tcGFueUdldDogQXV0aG9yaXphdGlvbiBmYWlsaW5nISIsCiAgICApIGlmICEkVXNlcklEOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17RGF0YX0tPntDdXN0b21lcklEfSkgewogICAgICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ29tcGFueUdldC5NaXNzaW5nUGFyYW1ldGVyJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDb21wYW55R2V0OiBDdXN0b21lcklEIHBhcmFtZXRlciBpcyBtaXNzaW5nISIsCiAgICAgICAgKTsKICAgIH0KICAgCiAgICBteSAlQ3VzdG9tZXJDb21wYW55ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueScpLT5DdXN0b21lckNvbXBhbnlHZXQoCiAgICAgICAgQ3VzdG9tZXJJRCAgID0+ICRQYXJhbXtEYXRhfS0+e0N1c3RvbWVySUR9LAogICAgICAgIFVzZXJJRCAgICAgID0+ICRVc2VySUQKICAgICk7CgogICAgbXkgJVJlc3BvbnNlOwogICAgbXkgJEVycm9yTWVzc2FnZTsKICAgIG15ICRTdWNjZXNzOwoKICAgIGlmKCElQ3VzdG9tZXJDb21wYW55KXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJFJlc3BvbnNle21lc3NhZ2V9ID0gIkEgY29tcGFueSB3aXRoIHRoZSBJRCAiLiRQYXJhbXtEYXRhfS0+e0N1c3RvbWVySUR9LiIgZG9lc250IGV4aXN0cyIKICAgIH1lbHNlewogICAgICAgICRTdWNjZXNzID0gMTsKICAgICAgICAlUmVzcG9uc2UgPSAlQ3VzdG9tZXJDb21wYW55OwogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Company/CompanyUpdate.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbXBhbnk6OkNvbXBhbnlVcGRhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ29tcGFueVVwZGF0ZS5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDb21wYW55VXBkYXRlOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhDdXN0b21lcklEIE5hbWUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFte0RhdGF9LT57JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiAkU2VsZi0+UmV0dXJuRXJyb3IoCiAgICAgICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0NvbXBhbnlVcGRhdGUuTWlzc2luZ1BhcmFtZXRlcicsCiAgICAgICAgICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIkNvbXBhbnlVcGRhdGU6ICROZWVkZWQgcGFyYW1ldGVyIGlzIG1pc3NpbmchIiwKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9CiAgICBteSAlT3B0aW9uYWxzOwogICAgIyBnZXQgb3B0aW9uYWwgc3R1ZmYKICAgIGZvciBteSAkT3B0aW9uYWwgKHF3KE5hbWUgU3RyZWV0IFpJUCBDaXR5IENvdW50cnkgVVJMIENvbW1lbnQpKSB7CiAgICAgICAgaWYgKCAkUGFyYW17RGF0YX0tPnskT3B0aW9uYWx9ICkgewogICAgICAgICAgICAkT3B0aW9uYWxzeyJDdXN0b21lckNvbXBhbnkiLiRPcHRpb25hbH0gPSAkUGFyYW17RGF0YX0tPnskT3B0aW9uYWx9OwogICAgICAgIH0KICAgIH0KCiAgICBteSAkVHJ1ZSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnknKS0+Q3VzdG9tZXJDb21wYW55VXBkYXRlKAogICAgICAgIEN1c3RvbWVySUQgICAgICAgICAgICAgID0+ICRQYXJhbXtEYXRhfS0+e0N1c3RvbWVySUR9LAogICAgICAgIEN1c3RvbWVyQ29tcGFueU5hbWUgICAgID0+ICRQYXJhbXtEYXRhfS0+e05hbWV9LAogICAgICAgICVPcHRpb25hbHMsCiAgICAgICAgVmFsaWRJRCAgICAgICAgICAgICAgICAgPT4gMSwKICAgICAgICBVc2VySUQgICAgICAgICAgICAgICAgICA9PiAkVXNlcklELCAgICAgICAgCiAgICApOwogICAgbXkgJVJlc3BvbnNlOwogICAgbXkgJEVycm9yTWVzc2FnZTsKICAgIG15ICRTdWNjZXNzOwoKICAgIGlmKCEkVHJ1ZSl7CiAgICAgICAgJFN1Y2Nlc3MgPSAwOwogICAgICAgICRFcnJvck1lc3NhZ2UgPSAiVXBkYXRlIG9mIHRoZSBjb21wYW55IHdpdGggdGhlIGlkICIuJFBhcmFte0RhdGF9LT57Q3VzdG9tZXJJRH0uIiB3YXMgbm90IHN1Y2Nlc3NmdWxseS4gTWF5YmUgY29tcGFueSBpcyBub3QgZXhpc3QiCiAgICB9ZWxzZXsKICAgICAgICAkU3VjY2VzcyA9IDE7CiAgICAgICAgJFJlc3BvbnNle1Jlc3VsdH0gPSAxOwogICAgfQoKICAgIHJldHVybiAkUmVzdWx0ID0gewogICAgICAgIFN1Y2Nlc3MgICAgICA9PiAkU3VjY2VzcywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRFcnJvck1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Company/CompanySearch.pm" Permission="644" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE2IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbXBhbnk6OkNvbXBhbnlTZWFyY2g7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgTUlNRTo6QmFzZTY0OwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KElzQXJyYXlSZWZXaXRoRGF0YSBJc0hhc2hSZWZXaXRoRGF0YSBJc1N0cmluZ1dpdGhEYXRhKTsKCnVzZSBiYXNlIHF3KAogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OkNvbW1vbgogICAgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6Q29tbW9uCik7CgpvdXIgJE9iamVjdE1hbmFnZXJEaXNhYmxlZCA9IDE7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb246OlRpY2tldDo6VGlja2V0R2V0IC0gR2VuZXJpY0ludGVyZmFjZSBUaWNrZXQgR2V0IE9wZXJhdGlvbiBiYWNrZW5kCgo9aGVhZDEgU1lOT1BTSVMKCj1oZWFkMSBQVUJMSUMgSU5URVJGQUNFCgo9b3ZlciA0Cgo9Y3V0Cgo9aXRlbSBuZXcoKQoKdXN1YWxseSwgeW91IHdhbnQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMKYnkgdXNpbmcgS2VybmVsOjpHZW5lcmljSW50ZXJmYWNlOjpPcGVyYXRpb24tPm5ldygpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjaGVjayBuZWVkZWQgb2JqZWN0cwogICAgZm9yIG15ICROZWVkZWQgKHF3KERlYnVnZ2VyT2JqZWN0IFdlYnNlcnZpY2VJRCkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBTdWNjZXNzICAgICAgPT4gMCwKICAgICAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiR290IG5vICROZWVkZWQhIiwKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT57JE5lZWRlZH0gPSAkUGFyYW17JE5lZWRlZH07CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9Cgo9aXRlbSBSdW4oKQoKcGVyZm9ybSBUaWNrZXRHZXQgT3BlcmF0aW9uLiBUaGlzIGZ1bmN0aW9uIGlzIGFibGUgdG8gcmV0dXJuCm9uZSBvciBtb3JlIHRpY2tldCBlbnRyaWVzIGluIG9uZSBjYWxsLgoKPWN1dAoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRSZXN1bHQgPSAkU2VsZi0+SW5pdCgKICAgICAgICBXZWJzZXJ2aWNlSUQgPT4gJFNlbGYtPntXZWJzZXJ2aWNlSUR9LAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0LT57U3VjY2Vzc30gKSB7CiAgICAgICAgcmV0dXJuICRTZWxmLT5SZXR1cm5FcnJvcigKICAgICAgICAgICAgRXJyb3JDb2RlICAgID0+ICdXZWJzZXJ2aWNlLkludmFsaWRDb25maWd1cmF0aW9uJywKICAgICAgICAgICAgRXJyb3JNZXNzYWdlID0+ICRSZXN1bHQtPntFcnJvck1lc3NhZ2V9LAogICAgICAgICk7CiAgICB9CgogICAgaWYoJFBhcmFte0RhdGF9LT57QmFzaWNBdXRofSl7CiAgICAgICAgbXkgJERlY29kZWQgPSBkZWNvZGVfYmFzZTY0KCRQYXJhbXtEYXRhfS0+e0Jhc2ljQXV0aH0pOwoKICAgICAgICBteSBAQXV0aD1zcGxpdCgvOi8sJERlY29kZWQpOwoKICAgICAgICAkUGFyYW17RGF0YX0tPntVc2VyTG9naW59ICAgPSAkQXV0aFswXTsKICAgICAgICAkUGFyYW17RGF0YX0tPntQYXNzd29yZH0gICAgPSAkQXV0aFsxXTsKICAgIH0KCiAgICBteSAoICRVc2VySUQsICRVc2VyVHlwZSApID0gJFNlbGYtPkF1dGgoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgIEVycm9yQ29kZSAgICA9PiAnQ29tcGFueVNlYXJjaC5BdXRoRmFpbCcsCiAgICAgICAgRXJyb3JNZXNzYWdlID0+ICJDb21wYW55U2VhcmNoOiBBdXRob3JpemF0aW9uIGZhaWxpbmchIiwKICAgICkgaWYgISRVc2VySUQ7CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRQYXJhbXtEYXRhfS0+e1NlYXJjaH0pIHsKICAgICAgICByZXR1cm4gJFNlbGYtPlJldHVybkVycm9yKAogICAgICAgICAgICBFcnJvckNvZGUgICAgPT4gJ0NvbXBhbnlTZWFyY2guTWlzc2luZ1BhcmFtZXRlcicsCiAgICAgICAgICAgIEVycm9yTWVzc2FnZSA9PiAiQ29tcGFueVNlYXJjaDogU2VhcmNoIHBhcmFtZXRlciBpcyBtaXNzaW5nISIsCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAlQ3VzdG9tZXJDb21wYW55TGlzdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnknKS0+Q3VzdG9tZXJDb21wYW55TGlzdCgKICAgICAgICBTZWFyY2ggICA9PiAkUGFyYW17RGF0YX0tPntTZWFyY2h9LAogICAgICAgIFVzZXJJRCAgICAgID0+ICRVc2VySUQsCiAgICApOwoKICAgIG15ICVSZXNwb25zZTsKICAgIG15ICRTdWNjZXNzOwoKICAgIG15IEBBcnJheUxpc3Q7CgogICAgZm9yZWFjaChzb3J0IGtleXMgJUN1c3RvbWVyQ29tcGFueUxpc3QpewogICAgICAgIHB1c2goQEFycmF5TGlzdCwgc29ydCB7JGEgPD0+ICRifXsKICAgICAgICAgICAgSUQgPT4gJF8sCiAgICAgICAgICAgIE5hbWUgPT4gJEN1c3RvbWVyQ29tcGFueUxpc3R7JF99CiAgICAgICAgICAgIH0pOwogICAgfQoKICAgICRTdWNjZXNzID0gMTsKICAgICRSZXNwb25zZXtSZXN1bHR9ID0gXEBBcnJheUxpc3Q7CgogICAgcmV0dXJuICRSZXN1bHQgPSB7CiAgICAgICAgU3VjY2VzcyAgICAgID0+ICRTdWNjZXNzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAwIG9yIDEKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gIiIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgSW4gY2FzZSBvZiBhbiBlcnJvcgogICAgICAgIERhdGEgICAgICAgICA9PiBcJVJlc3BvbnNlLAogICAgfTsKCn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwOi8vb3Rycy5vcmcvPikuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dD4uCgo9Y3V0Cg==</File>
        <File Location="var/webservices/OC-Connector.yml" Permission="644" Encode="Base64">LS0tCkRlYnVnZ2VyOgogIERlYnVnVGhyZXNob2xkOiBkZWJ1ZwogIFRlc3RNb2RlOiAnMCcKRGVzY3JpcHRpb246ICcnCkZyYW1ld29ya1ZlcnNpb246IDYuMC4yNgpQcm92aWRlcjoKICBPcGVyYXRpb246CiAgICBDb25maWdJdGVtQ3JlYXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBNYXBwaW5nSW5ib3VuZDoKICAgICAgICBUeXBlOiBTaW1wbGUKICAgICAgTWFwcGluZ091dGJvdW5kOgogICAgICAgIFR5cGU6IFNpbXBsZQogICAgICBUeXBlOiBDb25maWdJdGVtOjpDb25maWdJdGVtQ3JlYXRlCiAgICBDb25maWdJdGVtRGVsZXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBNYXBwaW5nSW5ib3VuZDoKICAgICAgICBUeXBlOiBTaW1wbGUKICAgICAgTWFwcGluZ091dGJvdW5kOgogICAgICAgIFR5cGU6IFNpbXBsZQogICAgICBUeXBlOiBDb25maWdJdGVtOjpDb25maWdJdGVtRGVsZXRlCiAgICBDb25maWdJdGVtR2V0OgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBDb25maWdJdGVtOjpDb25maWdJdGVtR2V0CiAgICBDb25maWdJdGVtU2VhcmNoOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBNYXBwaW5nSW5ib3VuZDoKICAgICAgICBUeXBlOiBTaW1wbGUKICAgICAgTWFwcGluZ091dGJvdW5kOgogICAgICAgIFR5cGU6IFNpbXBsZQogICAgICBUeXBlOiBDb25maWdJdGVtOjpDb25maWdJdGVtU2VhcmNoCiAgICBDb25maWdJdGVtVXBkYXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBNYXBwaW5nSW5ib3VuZDoKICAgICAgICBUeXBlOiBTaW1wbGUKICAgICAgTWFwcGluZ091dGJvdW5kOgogICAgICAgIFR5cGU6IFNpbXBsZQogICAgICBUeXBlOiBDb25maWdJdGVtOjpDb25maWdJdGVtVXBkYXRlCiAgICBMaW5rQ3JlYXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBMaW5rOjpMaW5rQ3JlYXRlCiAgICBMaW5rRGVsZXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBMaW5rOjpMaW5rRGVsZXRlCiAgICBMaW5rTGlzdDoKICAgICAgRGVzY3JpcHRpb246ICcnCiAgICAgIEluY2x1ZGVUaWNrZXREYXRhOiAnMCcKICAgICAgVHlwZTogTGluazo6TGlua0xpc3QKICAgIFNlcnZpY2VDcmVhdGU6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IFNlcnZpY2U6OlNlcnZpY2VDcmVhdGUKICAgIFNlcnZpY2VHZXQ6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IFNlcnZpY2U6OlNlcnZpY2VHZXQKICAgIFNlcnZpY2VTZWFyY2g6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IFNlcnZpY2U6OlNlcnZpY2VTZWFyY2gKICAgIFNlcnZpY2VVcGRhdGU6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IFNlcnZpY2U6OlNlcnZpY2VVcGRhdGUKICAgIEN1c3RvbWVyQ3JlYXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBDdXN0b21lcjo6Q3VzdG9tZXJDcmVhdGUKICAgIEN1c3RvbWVyR2V0OgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBDdXN0b21lcjo6Q3VzdG9tZXJHZXQKICAgIEN1c3RvbWVyU2VhcmNoOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBDdXN0b21lcjo6Q3VzdG9tZXJTZWFyY2gKICAgIEN1c3RvbWVyVXBkYXRlOgogICAgICBEZXNjcmlwdGlvbjogJycKICAgICAgSW5jbHVkZVRpY2tldERhdGE6ICcwJwogICAgICBUeXBlOiBDdXN0b21lcjo6Q3VzdG9tZXJVcGRhdGUKICAgIENvbXBhbnlDcmVhdGU6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IENvbXBhbnk6OkNvbXBhbnlDcmVhdGUKICAgIENvbXBhbnlHZXQ6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IENvbXBhbnk6OkNvbXBhbnlHZXQKICAgIENvbXBhbnlTZWFyY2g6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IENvbXBhbnk6OkNvbXBhbnlTZWFyY2gKICAgIENvbXBhbnlVcGRhdGU6CiAgICAgIERlc2NyaXB0aW9uOiAnJwogICAgICBJbmNsdWRlVGlja2V0RGF0YTogJzAnCiAgICAgIFR5cGU6IENvbXBhbnk6OkNvbXBhbnlVcGRhdGUgICAgICAKICAgIFRpY2tldEdldDoKICAgICAgRGVzY3JpcHRpb246ICcnCiAgICAgIEluY2x1ZGVUaWNrZXREYXRhOiAnMCcKICAgICAgTWFwcGluZ0luYm91bmQ6CiAgICAgICAgVHlwZTogU2ltcGxlCiAgICAgIE1hcHBpbmdPdXRib3VuZDoKICAgICAgICBUeXBlOiBTaW1wbGUKICAgICAgVHlwZTogVGlja2V0OjpUaWNrZXRHZXQKICAgIFRpY2tldFNlYXJjaDoKICAgICAgRGVzY3JpcHRpb246ICcnCiAgICAgIEluY2x1ZGVUaWNrZXREYXRhOiAnMCcKICAgICAgVHlwZTogVGlja2V0OjpUaWNrZXRTZWFyY2gKICBUcmFuc3BvcnQ6CiAgICBDb25maWc6CiAgICAgIEFkZGl0aW9uYWxIZWFkZXJzOiB+CiAgICAgIEtlZXBBbGl2ZTogJycKICAgICAgTWF4TGVuZ3RoOiAnMTAwMDAwMDAwMCcKICAgICAgUm91dGVPcGVyYXRpb25NYXBwaW5nOgogICAgICAgIENvbmZpZ0l0ZW1DcmVhdGU6CiAgICAgICAgICBSb3V0ZTogL0NvbmZpZ0l0ZW1DcmVhdGUvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBDb25maWdJdGVtRGVsZXRlOgogICAgICAgICAgUm91dGU6IC9Db25maWdJdGVtRGVsZXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ29uZmlnSXRlbUdldDoKICAgICAgICAgIFJvdXRlOiAvQ29uZmlnSXRlbUdldC86VXNlckxvZ2luLzpQYXNzd29yZAogICAgICAgIENvbmZpZ0l0ZW1TZWFyY2g6CiAgICAgICAgICBSb3V0ZTogL0NvbmZpZ0l0ZW1TZWFyY2gvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBDb25maWdJdGVtVXBkYXRlOgogICAgICAgICAgUm91dGU6IC9Db25maWdJdGVtVXBkYXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgTGlua0NyZWF0ZToKICAgICAgICAgIFJvdXRlOiAvTGlua0NyZWF0ZS86VXNlckxvZ2luLzpQYXNzd29yZAogICAgICAgIExpbmtEZWxldGU6CiAgICAgICAgICBSb3V0ZTogL0xpbmtEZWxldGUvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBMaW5rTGlzdDoKICAgICAgICAgIFJvdXRlOiAvTGlua0xpc3QvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBTZXJ2aWNlQ3JlYXRlOgogICAgICAgICAgUm91dGU6IC9TZXJ2aWNlQ3JlYXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgU2VydmljZUdldDoKICAgICAgICAgIFJvdXRlOiAvU2VydmljZUdldC86VXNlckxvZ2luLzpQYXNzd29yZAogICAgICAgIFNlcnZpY2VTZWFyY2g6CiAgICAgICAgICBSb3V0ZTogL1NlcnZpY2VTZWFyY2gvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBTZXJ2aWNlVXBkYXRlOgogICAgICAgICAgUm91dGU6IC9TZXJ2aWNlVXBkYXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ3VzdG9tZXJDcmVhdGU6CiAgICAgICAgICBSb3V0ZTogL0N1c3RvbWVyQ3JlYXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ3VzdG9tZXJHZXQ6CiAgICAgICAgICBSb3V0ZTogL0N1c3RvbWVyR2V0LzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ3VzdG9tZXJTZWFyY2g6CiAgICAgICAgICBSb3V0ZTogL0N1c3RvbWVyU2VhcmNoLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ3VzdG9tZXJVcGRhdGU6CiAgICAgICAgICBSb3V0ZTogQ3VzdG9tZXJVcGRhdGUvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBDb21wYW55Q3JlYXRlOgogICAgICAgICAgUm91dGU6IC9Db21wYW55Q3JlYXRlLzpVc2VyTG9naW4vOlBhc3N3b3JkCiAgICAgICAgQ29tcGFueUdldDoKICAgICAgICAgIFJvdXRlOiAvQ29tcGFueUdldC86VXNlckxvZ2luLzpQYXNzd29yZAogICAgICAgIENvbXBhbnlTZWFyY2g6CiAgICAgICAgICBSb3V0ZTogL0NvbXBhbnlTZWFyY2gvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBDb21wYW55VXBkYXRlOgogICAgICAgICAgUm91dGU6IENvbXBhbnlVcGRhdGUvOlVzZXJMb2dpbi86UGFzc3dvcmQgICAgICAgICAgCiAgICAgICAgVGlja2V0R2V0OgogICAgICAgICAgUm91dGU6IC9UaWNrZXRHZXQvOlVzZXJMb2dpbi86UGFzc3dvcmQKICAgICAgICBUaWNrZXRTZWFyY2g6CiAgICAgICAgICBSb3V0ZTogL1RpY2tldFNlYXJjaC86VXNlckxvZ2luLzpQYXNzd29yZAogICAgVHlwZTogSFRUUDo6UkVTVApSZW1vdGVTeXN0ZW06ICcnClJlcXVlc3RlcjoKICBUcmFuc3BvcnQ6CiAgICBUeXBlOiBIVFRQOjpSRVNUCgo=</File>
        <File Location="var/packages/ApiExtension.sopm" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8+CjxvdHJzX3BhY2thZ2UgdmVyc2lvbj0iMS4xIj4KICAgIDxOYW1lPkFwaUV4dGVuc2lvbjwvTmFtZT4KICAgIDxWZXJzaW9uPjEuMC4yPC9WZXJzaW9uPgogICAgPFZlbmRvcj5iZWNvbiBHbWJIPC9WZW5kb3I+CiAgICA8VVJMPmh0dHBzOi8vd3d3LmJlY29uLmRlPC9VUkw+CiAgICA8TGljZW5zZT5iZWNvbiBHbWJIPC9MaWNlbnNlPgoKICAgIDxDaGFuZ2VMb2cgRGF0ZT0iMjAyMS0wNC0wNSAxMjo0MDoxMiIgVmVyc2lvbj0iMS4wLjAiPltJbml0aWFsIGNvbW1pdF0gRmlyc3QgcmVsZWFzZTwvQ2hhbmdlTG9nPgogICAgPENoYW5nZUxvZyBEYXRlPSIyMDIxLTEyLTA3IDEwOjAxOjEyIiBWZXJzaW9uPSIxLjAuMSI+W0JVR0ZJWF0gZml4ZWQgYXBpIG9wZXJhdGlvbnMgb2YgdGhlIGNvbmZpZ3VyYXRpb24gbWFuZ2FnZW1lbnQgcGFja2FnZTwvQ2hhbmdlTG9nPgogICAgPENoYW5nZUxvZyBEYXRlPSIyMDI0LTE2LTAyIDA4OjAxOjE1IiBWZXJzaW9uPSIxLjAuMiI+W0FkZGVkXSBjdXN0b21lciBhbmQgY3VzdG9tZXIgY3J1ZCAod2l0aG91dCBkZWxldGUpIGFwaSBvcGVyYXRpb248L0NoYW5nZUxvZz4KCiAgICA8RGVzY3JpcHRpb24gTGFuZz0iZGUiPkRhcyBQYWtldCBiZWluaGFsdGV0IGVpbmUgQVBJIEVyd2VpdGVydW5nIGbDvHIgZGllIFNlcnZpY2UgdW5kIExpbmtPYmplY3QgVmVyd2FsdHVuZy48L0Rlc2NyaXB0aW9uPgogICAgPERlc2NyaXB0aW9uIExhbmc9ImVuIj5UaGUgcGFja2FnZSBpbmNsdWRlcyBhbiBhcGkgZXh0ZW5zdGlvbiBmb3IgbWFuYWdpbmcgU2VydmljZSBhbmQgTGlua09iamVjdC48L0Rlc2NyaXB0aW9uPgogICAgPEZyYW1ld29yaz42LngueDwvRnJhbWV3b3JrPgogICAgPEludHJvSW5zdGFsbCBMYW5nPSJlbiIgVGl0bGU9IkxpY2Vuc2UgQWdyZWVtZW50IiBUeXBlPSJwcmUiPgogICAgICAgIDwvSW50cm9JbnN0YWxsPgogICAgPFBhY2thZ2VSZXF1aXJlZCBWZXJzaW9uPSI2LjAuMCI+SVRTTUNvbmZpZ3VyYXRpb25NYW5hZ2VtZW50PC9QYWNrYWdlUmVxdWlyZWQ+CgogICAgPEJ1aWxkRGF0ZT4/PC9CdWlsZERhdGU+CiAgICA8QnVpbGRIb3N0Pm90cnM2X2Rldi5iZWNvbi5kZTwvQnVpbGRIb3N0PgogICAgPEZpbGVsaXN0PgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249Iktlcm5lbC9Db25maWcvRmlsZXMvWE1ML0FwaUV4dGVuc2lvbi54bWwiPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL0NvbmZpZ0l0ZW0vQ29tbW9uLnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9Db25maWdJdGVtL0NvbmZpZ0l0ZW1TZWFyY2gucG0iPjwvRmlsZT4gICAgICAgIAogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249IkN1c3RvbS9LZXJuZWwvR2VuZXJpY0ludGVyZmFjZS9PcGVyYXRpb24vTGluay9MaW5rQ3JlYXRlLnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9MaW5rL0xpbmtMaXN0LnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9MaW5rL0xpbmtEZWxldGUucG0iPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL1NlcnZpY2UvU2VydmljZUNyZWF0ZS5wbSI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249IkN1c3RvbS9LZXJuZWwvR2VuZXJpY0ludGVyZmFjZS9PcGVyYXRpb24vU2VydmljZS9TZXJ2aWNlR2V0LnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9TZXJ2aWNlL1NlcnZpY2VVcGRhdGUucG0iPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL1NlcnZpY2UvU2VydmljZVNlYXJjaC5wbSI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249IkN1c3RvbS9LZXJuZWwvR2VuZXJpY0ludGVyZmFjZS9PcGVyYXRpb24vQ3VzdG9tZXIvQ3VzdG9tZXJDcmVhdGUucG0iPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL0N1c3RvbWVyL0N1c3RvbWVyR2V0LnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9DdXN0b21lci9DdXN0b21lclVwZGF0ZS5wbSI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249IkN1c3RvbS9LZXJuZWwvR2VuZXJpY0ludGVyZmFjZS9PcGVyYXRpb24vQ3VzdG9tZXIvQ3VzdG9tZXJTZWFyY2gucG0iPjwvRmlsZT4gICAKICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL0NvbXBhbnkvQ29tcGFueUNyZWF0ZS5wbSI+PC9GaWxlPgogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249IkN1c3RvbS9LZXJuZWwvR2VuZXJpY0ludGVyZmFjZS9PcGVyYXRpb24vQ29tcGFueS9Db21wYW55R2V0LnBtIj48L0ZpbGU+CiAgICAgICAgPEZpbGUgUGVybWlzc2lvbj0iNjQ0IiBMb2NhdGlvbj0iQ3VzdG9tL0tlcm5lbC9HZW5lcmljSW50ZXJmYWNlL09wZXJhdGlvbi9Db21wYW55L0NvbXBhbnlVcGRhdGUucG0iPjwvRmlsZT4KICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJDdXN0b20vS2VybmVsL0dlbmVyaWNJbnRlcmZhY2UvT3BlcmF0aW9uL0NvbXBhbnkvQ29tcGFueVNlYXJjaC5wbSI+PC9GaWxlPiAKICAgICAgICA8RmlsZSBQZXJtaXNzaW9uPSI2NDQiIExvY2F0aW9uPSJ2YXIvd2Vic2VydmljZXMvT0MtQ29ubmVjdG9yLnltbCI+PC9GaWxlPiAgICAgICAgICAgIAogICAgICAgIDxGaWxlIFBlcm1pc3Npb249IjY0NCIgTG9jYXRpb249InZhci9wYWNrYWdlcy9BcGlFeHRlbnNpb24uc29wbSI+PC9GaWxlPiAgICAgICAgICAgIAogICAgPC9GaWxlbGlzdD4KPC9vdHJzX3BhY2thZ2U+Cg==</File>
    </Filelist>
</otrs_package>